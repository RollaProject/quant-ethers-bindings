pub use quantcalculator_mod::*;
#[allow(clippy::too_many_arguments)]
mod quantcalculator_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "QuantCalculator was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static QUANTCALCULATOR_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_optionsFactory\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_assetsRegistry\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_priceRegistry\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"assetsRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralTokenId\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"calculateClaimableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnableCollateral\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amountToClaim\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_qTokenToMint\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_qTokenForCollateral\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getCollateralRequirement\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_qToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getExercisePayout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"payoutToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"payoutAmount\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_qTokenShort\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_qTokenLong\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_amountToNeutralize\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getNeutralizationPayout\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"collateralOwed\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"optionsDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"optionsFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"priceRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"strikeAssetDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static QUANTCALCULATOR_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x610120806040523462000125576060816200323f80380380916200002482856200012a565b8339810103126200012557806200003f620000639262000164565b906200005c6040620000546020840162000164565b920162000164565b91620002cf565b604051612eb490816200038b8239608051818181610156015281816107ac0152818161080c01528181610cdb015281816112fa0152611666015260a051818181610134015281816107890152818161083101528181610da8015281816112d80152611644015260c051818181610246015281816103f801528181610c090152610e18015260e05181818160e5015281816107d701528181610d4b0152818161129801526115980152610100518181816105b401528181610b5501526115250152f35b600080fd5b601f909101601f19168101906001600160401b038211908210176200014e57604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200012557565b156200018157565b60405162461bcd60e51b815260206004820152602f60248201527f5175616e7443616c63756c61746f723a20696e76616c6964204f7074696f6e7360448201526e466163746f7279206164647265737360881b6064820152608490fd5b15620001e657565b60405162461bcd60e51b815260206004820152602f60248201527f5175616e7443616c63756c61746f723a20696e76616c6964204173736574735260448201526e65676973747279206164647265737360881b6064820152608490fd5b156200024b57565b60405162461bcd60e51b815260206004820152602e60248201527f5175616e7443616c63756c61746f723a20696e76616c6964205072696365526560448201526d676973747279206164647265737360901b6064820152608490fd5b9081602091031262000125575160ff81168103620001255790565b506040513d6000823e3d90fd5b600460206001600160a01b03838116906200030a90620002f183151562000179565b620003008188161515620001de565b8716151562000243565b604051638493cec160e01b815292839182905afa9081156200037a575b60009162000345575b50608052601260a05260c05260e05261010052565b6200036b915060203d811162000372575b6200036281836200012a565b810190620002a7565b3862000330565b503d62000356565b62000384620002c2565b6200032756fe60806040526004361015610013575b600080fd5b60003560e01c8063099ca872146100c75780631df82e59146100be5780632a2d7d94146100b5578063535131d7146100ac57806357284c2a146100a35780638493cec11461009a578063911303b414610091578063c1325661146100885763e66ef2c41461008057600080fd5b61000e610dcc565b5061000e610d6f565b5061000e610cff565b5061000e610ca2565b5061000e610b79565b5061000e610b09565b5061000e61036a565b5061000e61021b565b3461000e5761017b61018560ff6100dd366101d1565b6101209592957f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8816612626565b958691600060405161013181610e6c565b527f0000000000000000000000000000000000000000000000000000000000000000937f000000000000000000000000000000000000000000000000000000000000000092611c2f565b9190931690612a72565b6040805173ffffffffffffffffffffffffffffffffffffffff939093168352602083019190915290f35b0390f35b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc606091011261000e57600435610207816101b3565b90602435610214816101b3565b9060443590565b503461000e5761018561022d366101d1565b9173ffffffffffffffffffffffffffffffffffffffff807f000000000000000000000000000000000000000000000000000000000000000016604051907f0c74804e000000000000000000000000000000000000000000000000000000009283835280851660048401526102bb6020938481602481875afa90811561035d575b600091610340575b506111f0565b851692836102cd575b5050505061127b565b6102fd93602484926040519485938492835260048301525afa918215610333575b600092610306575b50506111f0565b388080806102c4565b6103259250803d1061032c575b61031d8183610eb1565b8101906111dc565b38806102f6565b503d610313565b61033b610f0a565b6102ee565b6103579150853d871161032c5761031d8183610eb1565b386102b5565b610365610f0a565b6102ad565b503461000e5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760048035906024356044356103ae816101b3565b6040928351947fb2016bd400000000000000000000000000000000000000000000000000000000865260209573ffffffffffffffffffffffffffffffffffffffff818881868495857f0000000000000000000000000000000000000000000000000000000000000000165afa908115610afc575b600091610adf575b5016948651977fd94a7e53000000000000000000000000000000000000000000000000000000008952878980610467878983019190602083019252565b03818a5afa938415610ad2575b6000998a95610a94575b50918891849387958c16996104948b1515610f3c565b828b86519a8b80927f7dc0d1d00000000000000000000000000000000000000000000000000000000082525afa988915610a87575b600099610a56575b50869798998551947f99bc0aea000000000000000000000000000000000000000000000000000000008087528d86888c81845afa978815610a49575b600098610a28575b50869089519b8c80927f7158da7c0000000000000000000000000000000000000000000000000000000082525afa998a15610a1b575b60009a6109c1575b509285928795926101af9f9b99978f6108759f9e9c9a828f928f8f8f908f9d916105b28f6002996106639b61063e96886affffffffffffffffffffff94518094819382525afa9081156109b4575b600091610987575b50164211610fea565b7f0000000000000000000000000000000000000000000000000000000000000000169d5195869485947f8df6475d0000000000000000000000000000000000000000000000000000000086528501919392906040916affffffffffffffffffffff606085019673ffffffffffffffffffffffffffffffffffffffff809416865216602085015216910152565b03818c5afa90811561097a575b60009161094d575b5061065d8161108d565b146110c6565b80610940575086517efdd58e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116818b01908152602081019390935291839183918290819060400103915afa918215610933575b600092610906575b5050998a965b6107488551978895869485947f818182260000000000000000000000000000000000000000000000000000000086528501919392906040916affffffffffffffffffffff606085019673ffffffffffffffffffffffffffffffffffffffff809416865216602085015216910152565b03915afa9182156108f9575b6000926108ca575b506000906107686111bc565b508516156108a757509161086861086d92610860856107fc6107d160ff988a7f000000000000000000000000000000000000000000000000000000000000000090877f000000000000000000000000000000000000000000000000000000000000000091611780565b9050955b7f000000000000000000000000000000000000000000000000000000000000000090612626565b976108056111bc565b508d6108587f0000000000000000000000000000000000000000000000000000000000000000918b83887f0000000000000000000000000000000000000000000000000000000000000000968794611c2f565b95909f611780565b939050612bc4565b612be1565b911690612a72565b92519384938473ffffffffffffffffffffffffffffffffffffffff604092959493606083019683521660208201520152565b60ff9391945061086d9261086061086892966107fc6108c46128f7565b956107d5565b6108eb919250893d8b116108f2575b6108e38183610eb1565b81019061116e565b903861075c565b503d6108d9565b610901610f0a565b610754565b6109259250803d1061092c575b61091d8183610eb1565b810190611151565b38806106d3565b503d610913565b61093b610f0a565b6106cb565b9350505050998a966106d9565b61096d9150883d8a11610973575b6109658183610eb1565b810190611075565b38610653565b503d61095b565b610982610f0a565b61064b565b6109a79150893d8b116109ad575b61099f8183610eb1565b810190610fc7565b386105a9565b503d610995565b6109bc610f0a565b6105a1565b8e9a50928795928a9f8f988e9f9e9c9a818d9b8f8d9b98839b843d8611610a14575b6109ed8183610eb1565b81016109f891610ef2565b9f50989b505050505050509295979a9e995092959b9a9b610553565b503d6109e3565b610a23610f0a565b61054b565b87919850610a4290823d84116109ad5761099f8183610eb1565b9790610515565b610a51610f0a565b61050d565b87989950610a7990843d8611610a80575b610a718183610eb1565b810190610ef2565b98976104d1565b503d610a67565b610a8f610f0a565b6104c9565b89929a50869493919550610abd90833d8511610acb575b610ab58183610eb1565b810190610f17565b9a909a95919394509161047e565b503d610aab565b610ada610f0a565b610474565b610af69150893d8b11610a8057610a718183610eb1565b3861042a565b610b04610f0a565b610422565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576101af610c49600435610bbb816101b3565b610c406040517f0c74804e00000000000000000000000000000000000000000000000000000000815260208160248173ffffffffffffffffffffffffffffffffffffffff80881660048301527f0000000000000000000000000000000000000000000000000000000000000000165afa908115610c95575b600091610c7d57506111f0565b602435906113ea565b60408051931515845273ffffffffffffffffffffffffffffffffffffffff9092166020840152908201529081906060820190565b610357915060203d811161032c5761031d8183610eb1565b610c9d610f0a565b610c33565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6020810190811067ffffffffffffffff821117610e8857604052565b610e90610e3c565b604052565b6060810190811067ffffffffffffffff821117610e8857604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610e8857604052565b9081602091031261000e5751610f07816101b3565b90565b506040513d6000823e3d90fd5b919082604091031261000e5760208251610f30816101b3565b920151610f07816101b3565b15610f4357565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f43616e206e6f7420636c61696d20636f6c6c61746572616c2066726f6d206e6f60448201527f6e2d6578697374696e67206f7074696f6e0000000000000000000000000000006064820152fd5b9081602091031261000e57516affffffffffffffffffffff8116810361000e5790565b15610ff157565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603960248201527f43616e206e6f7420636c61696d20636f6c6c61746572616c2066726f6d206f7060448201527f74696f6e73206265666f726520746865697220657870697279000000000000006064820152fd5b9081602091031261000e5751600381101561000e5790565b6003111561109757565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b156110cd57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f43616e206e6f7420636c61696d20636f6c6c61746572616c206265666f72652060448201527f6f7074696f6e20697320736574746c65640000000000000000000000000000006064820152fd5b9081602091031261000e575190565b519060ff8216820361000e57565b9081604091031261000e576111a76020604051926040840184811067ffffffffffffffff8211176111af575b6040528051845201611160565b602082015290565b6111b7610e3c565b61119a565b604051906111c982610e6c565b60008252565b5190811515820361000e57565b9081602091031261000e57610f07906111cf565b156111f757565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f5175616e7443616c63756c61746f723a20496e76616c69642051546f6b656e2060448201527f61646472657373000000000000000000000000000000000000000000000000006064820152fd5b929160ff9161131f91600060405161129281610e6c565b526112d37f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8816612626565b9586917f0000000000000000000000000000000000000000000000000000000000000000937f000000000000000000000000000000000000000000000000000000000000000092611c2f565b91909316906000601b831460001461133d5750610f07915051612e15565b601b83111561136c5750611366611360611359610f0794612919565b9251612e15565b91612953565b9061296f565b82610f0793601b106113dd575b601b0390916113888151612e15565b61139183612953565b9081156113d0575b066113c7575b6113606113ac9151612e15565b9081156113ba575b04612a66565b6113c26129a0565b6113b4565b6001925061139f565b6113d86129a0565b611399565b6113e56124ec565b611379565b909173ffffffffffffffffffffffffffffffffffffffff91828116936040918251947f7dc0d1d0000000000000000000000000000000000000000000000000000000008652602080876004818b5afa968715611773575b600097611754575b5084517f99bc0aea00000000000000000000000000000000000000000000000000000000815281816004818c5afa908115611747575b60009161172a575b508551927f7158da7c00000000000000000000000000000000000000000000000000000000845282846004818d5afa93841561171d575b6000946116fb575b5086517f8df6475d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a811660048301526affffffffffffffffffffff84166024830152851660448201527f000000000000000000000000000000000000000000000000000000000000000091909116926002918181606481885afa9182156116ee575b6000926116d1575b505061156f8161108d565b149889156116c15786610f07979460ff979461168b97946115bd61162c956115956111bc565b507f000000000000000000000000000000000000000000000000000000000000000090612626565b9c8451958694859384937f8181822600000000000000000000000000000000000000000000000000000000855260048501919392906040916affffffffffffffffffffff606085019673ffffffffffffffffffffffffffffffffffffffff809416865216602085015216910152565b03915afa9384156116b4575b600094611695575b50507f0000000000000000000000000000000000000000000000000000000000000000917f000000000000000000000000000000000000000000000000000000000000000091611780565b9190941690612a72565b6116ac929450803d106108f2576108e38183610eb1565b913880611640565b6116bc610f0a565b611638565b5060009750879695505050505050565b6116e79250803d10610973576109658183610eb1565b3880611564565b6116f6610f0a565b61155c565b600291945061171690843d8611610a8057610a718183610eb1565b93906114c6565b611725610f0a565b6114be565b6117419150823d84116109ad5761099f8183610eb1565b38611487565b61174f610f0a565b61147f565b8161176c9298503d8911610a8057610a718183610eb1565b9538611449565b61177b610f0a565b611441565b9173ffffffffffffffffffffffffffffffffffffffff610f0794929695936117a66111bc565b5016956040517f6d63647800000000000000000000000000000000000000000000000000000000815260209081816004818c5afa90811561195e575b600091611941575b5060008282156118d1576040517f7158da7c00000000000000000000000000000000000000000000000000000000815260049250818184818f5afa9081156118c4575b6000916118a7575b505b9a604051928380927fc52987cf0000000000000000000000000000000000000000000000000000000082525afa92831561189a575b60009361187b575b50506121e7565b611892929350803d1061092c5761091d8183610eb1565b903880611874565b6118a2610f0a565b61186c565b6118be9150823d8411610a8057610a718183610eb1565b38611835565b6118cc610f0a565b61182d565b60049182828d604051928380927f17d69bc80000000000000000000000000000000000000000000000000000000082525afa918215611934575b91611917575b50611837565b61192e9150823d8411610a8057610a718183610eb1565b38611911565b61193c610f0a565b61190b565b6119589150823d841161032c5761031d8183610eb1565b386117ea565b611966610f0a565b6117e2565b1561197257565b60a46040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604560248201527f436f6e74726f6c6c65723a2043616e277420637265617465207370726561647360448201527f2066726f6d206f7074696f6e73207769746820646966666572656e742065787060648201527f69726965730000000000000000000000000000000000000000000000000000006084820152fd5b15611a2357565b60a46040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604e60248201527f436f6e74726f6c6c65723a2043616e277420637265617465207370726561647360448201527f2066726f6d206f7074696f6e73207769746820646966666572656e7420756e6460648201527f65726c79696e67206173736574730000000000000000000000000000000000006084820152fd5b15611ad457565b60a46040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f436f6e74726f6c6c65723a2043616e277420637265617465207370726561647360448201527f2066726f6d206f7074696f6e73207769746820646966666572656e742074797060648201527f65730000000000000000000000000000000000000000000000000000000000006084820152fd5b15611b8557565b60a46040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604460248201527f436f6e74726f6c6c65723a2043616e277420637265617465207370726561647360448201527f2066726f6d206f7074696f6e73207769746820646966666572656e74206f726160648201527f636c6573000000000000000000000000000000000000000000000000000000006084820152fd5b939194929092611c3d6111bc565b5073ffffffffffffffffffffffffffffffffffffffff809516926040928351977fc52987cf0000000000000000000000000000000000000000000000000000000090818a526020986004988a8c8b818c5afa9b8c156121da575b60009c6121a3575b50611ed996959493928992909189918c918e908216600081156121945750611e2a611e94969798865190815283818781865afa908115612187575b60009161216a575b5098611d5987517f99bc0aea0000000000000000000000000000000000000000000000000000000080825286828a81875afa91821561215d575b60009261213e575b50895190815286818a81895afa908115612131575b600091612114575b506affffffffffffffffffffff80911691161461196b565b611dc38751867f7158da7c0000000000000000000000000000000000000000000000000000000080835287838b81885afa928315612107575b6000936120e6575b5081908b5190815288818c818b5afa9081156120d9575b6000916120bc575b5016911614611a1c565b865190848288817f6d63647800000000000000000000000000000000000000000000000000000000948582525afa9182156120af575b600092612090575b50875190815284818881875afa908115612083575b600091612066575b50151590151514611acd565b8d855194838682817f7dc0d1d000000000000000000000000000000000000000000000000000000000958682525afa958615612059575b600096612034575b50908391859697518094819382525afa918215612027575b60009261200a575b505016911614611b7e565b8651917f6d636478000000000000000000000000000000000000000000000000000000009b8c84528b848c818d5afa938415611ffd575b600094611fde575b50612342565b94815190815284818581865afa908115611fd1575b600091611fb4575b5060009015611f67575090839151928380927f7158da7c0000000000000000000000000000000000000000000000000000000082525afa918215611f5a575b600092611f4157505091565b611f579250803d10610a8057610a718183610eb1565b91565b611f62610f0a565b611f35565b9391829151938480927f17d69bc80000000000000000000000000000000000000000000000000000000082525afa928315611fa7575b92611f4157505091565b611faf610f0a565b611f9d565b611fcb9150853d871161032c5761031d8183610eb1565b38611ef6565b611fd9610f0a565b611eee565b611ff69194508c8d3d1061032c5761031d8183610eb1565b9238611ed3565b612005610f0a565b611ecb565b6120209250803d10610a8057610a718183610eb1565b388f611e89565b61202f610f0a565b611e81565b85965090612050859392843d8611610a8057610a718183610eb1565b96509091611e69565b612061610f0a565b611e61565b61207d9150853d871161032c5761031d8183610eb1565b38611e1e565b61208b610f0a565b611e16565b6120a8919250853d871161032c5761031d8183610eb1565b9038611e01565b6120b7610f0a565b611df9565b6120d39150893d8b11610a8057610a718183610eb1565b38611db9565b6120e1610f0a565b611db1565b8291935061210090893d8b11610a8057610a718183610eb1565b9290611d9a565b61210f610f0a565b611d92565b61212b9150873d89116109ad5761099f8183610eb1565b38611d41565b612139610f0a565b611d39565b612156919250873d89116109ad5761099f8183610eb1565b9038611d24565b612165610f0a565b611d1c565b6121819150843d861161092c5761091d8183610eb1565b38611ce2565b61218f610f0a565b611cda565b96505050505050915090611e94565b611ed99796959493919c508a8a938d6121c98c94823d841161092c5761091d8183610eb1565b9f94969798999a5050935050611c9f565b6121e2610f0a565b611c97565b92949361221f61220f612227949360ff8094600060405161220781610e6c565b5216906129d0565b95826020825192015116906129d0565b9516906129d0565b906040519261223584610e95565b83526020830193845260408301918252156122555750610f079150612297565b90600060405161226481610e6c565b528051835190519051121561228c57610f07926122849151905190612be1565b905190612ceb565b505050610f076128f7565b60006040516122a581610e6c565b526020810190815181519051905112600014612338578161230c6122e16123149360406122d86123199751835190612be1565b91015190612ceb565b91519160006040516122f281610e6c565b526122fd81516127c3565b5082511561232b575b516127c3565b905190612c7c565b612ae3565b6040519061232682610e6c565b815290565b6123336129a0565b612306565b5050610f076128f7565b95610f07966123c79596939460409283519161235d83610e6c565b600080935282855161236e81610e6c565b521561247b5760ff61239d612396826123b19486895161238d81610e6c565b521680966129d0565b94876129d0565b9616604d811161246e575b80600a0a6129d0565b936123cc575b50505060ff9150935b16906129d0565b612d2c565b908092935051845113156000146123f3575050505060ff6123eb6128f7565b3880806123b7565b8361243c6124066124449460ff97612be1565b9183865161241381610e6c565b528361241f84516127c3565b8251908115612461575b0713156124575761230c600193516127c3565b910b90612b58565b90519061245082610e6c565b81526123eb565b61230c8493612306565b6124696129a0565b612429565b6124766124ec565b6123a8565b81955060ff90826124a6949561249f94505161249681610e6c565b521680936129d0565b91836129d0565b9281926124ba575b505060ff9150936123c0565b508051835191925013156124db5760ff916124d491612be1565b38806124ae565b505060ff6124e76128f7565b6124d4565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9080601f8301121561000e5781519067ffffffffffffffff82116125bc575b60405192602091612573837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8701160186610eb1565b83855282848301011161000e5782906000905b838383106125a45750501161259a57505090565b6000918301015290565b81935082819392010151828288010152018391612586565b6125c4610e3c565b61253b565b91909160808184031261000e57805167ffffffffffffffff9081811161000e57846125f591840161251c565b93602083015191821161000e5761260d91830161251c565b91610f07606061261f60408501611160565b93016111cf565b6040517f6d63647800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff926020928416918381600481865afa9081156127b6575b600091612799575b50156127905782600460009461271f94604051928380927f7158da7c0000000000000000000000000000000000000000000000000000000082525afa918215612783575b8592612766575b50506040519485809481937fbb9453a50000000000000000000000000000000000000000000000000000000083526004830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0392165afa908115612759575b600091612737575090565b612752913d8091833e61274a8183610eb1565b8101906125c9565b5091505090565b612761610f0a565b61272c565b61277c9250803d10610a8057610a718183610eb1565b38806126cb565b61278b610f0a565b6126c4565b50505050601290565b6127b09150843d861161032c5761031d8183610eb1565b38612680565b6127be610f0a565b612678565b6b033b2e3c9fd0803ce800000090600174279d346de4781f921dd7a89933d54d1f72927c70148211600083131616612835575b60017fffffffffffffffffffffffd862cb921b87e06de2285766cc2ab2e08d6d838fec8212600083121616612829570290565b6128316124ec565b0290565b61283d6124ec565b6127f6565b600082136000821390837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8181048511838516166128ea575b60008212927f8000000000000000000000000000000000000000000000000000000000000000948487870585129116166128dd575b826000871295058612908516166128d0575b058312911616612829570290565b6128d86124ec565b6128c2565b6128e56124ec565b6128b0565b6128f26124ec565b61287b565b600060405161290581610e6c565b5260405161291281610e6c565b6000815290565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe590601b8110612947570190565b61294f6124ec565b0190565b604d8111612962575b600a0a90565b61296a6124ec565b61295c565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821181151516612829570290565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006040516129de81610e6c565b5260006040516129ed81610e6c565b52601b8203612a00576123199150612d8c565b601b821115612a3857612a1d612a1861231993612919565b612953565b908115612a2b575b04612d8c565b612a336129a0565b612a25565b612a54906113668361231994601b10612a59575b601b03612953565b612d8c565b612a616124ec565b612a4c565b81198111612947570190565b601b8203612a8557610f07915051612e15565b601b821115612aa057611366611360611359610f0794612919565b612ab6612abf9183601b10612ad6575b51612e15565b91601b03612953565b908115612aca570490565b612ad26129a0565b0490565b612ade6124ec565b612ab0565b60008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03600013811516612b4b575b817f80000000000000000000000000000000000000000000000000000000000000000360001216612b435790565b610f076124ec565b612b536124ec565b612b15565b60008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313811516612bb7575b817f800000000000000000000000000000000000000000000000000000000000000003831216612947570190565b612bbf6124ec565b612b89565b90612319916000604051612bd781610e6c565b5251905190612b58565b6000604051612bef81610e6c565b5251905160008112817f8000000000000000000000000000000000000000000000000000000000000000018312811516612c6f575b817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01831316612c62575b60405191612c5c83610e6c565b03815290565b612c6a6124ec565b612c4f565b612c776124ec565b612c24565b8115612cde575b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82147f8000000000000000000000000000000000000000000000000000000000000000821416612cd2570590565b612cda6124ec565b0590565b612ce66129a0565b612c83565b612d26612319926b033b2e3c9fd0803ce8000000926000604051612d0e81610e6c565b52612d1c8151835190612842565b5051905190612842565b05612ae3565b612d61612d7b612319936000604051612d4481610e6c565b52600084516b033b2e3c9fd0803ce8000000948591845190612842565b0713600090600014612d8657506001935b51905190612842565b059060000b90612b58565b93612d72565b7f8000000000000000000000000000000000000000000000000000000000000000811015612db75790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f5175616e744d6174683a206f7574206f6620696e742072616e676500000000006044820152fd5b60008112612e205790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5175616e744d6174683a206e6567617469766520696e740000000000000000006044820152fdfea264697066735822122098fc6a7f8dbe5ec03dd90636450b58792fc6a8fdb2be7ef5b35d28584f9ae3d864736f6c634300080e0033" . parse () . expect ("invalid bytecode")
        });
    pub struct QuantCalculator<M>(ethers::contract::Contract<M>);
    impl<M> Clone for QuantCalculator<M> {
        fn clone(&self) -> Self {
            QuantCalculator(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for QuantCalculator<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for QuantCalculator<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(QuantCalculator))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> QuantCalculator<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), QUANTCALCULATOR_ABI.clone(), client)
                .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                QUANTCALCULATOR_ABI.clone(),
                QUANTCALCULATOR_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `assetsRegistry` (0x911303b4) function"]
        pub fn assets_registry(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([145, 19, 3, 180], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `calculateClaimableCollateral` (0x2a2d7d94) function"]
        pub fn calculate_claimable_collateral(
            &self,
            collateral_token_id: ethers::core::types::U256,
            amount: ethers::core::types::U256,
            user: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (
                ethers::core::types::U256,
                ethers::core::types::Address,
                ethers::core::types::U256,
            ),
        > {
            self.0
                .method_hash([42, 45, 125, 148], (collateral_token_id, amount, user))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getCollateralRequirement` (0x1df82e59) function"]
        pub fn get_collateral_requirement(
            &self,
            q_token_to_mint: ethers::core::types::Address,
            q_token_for_collateral: ethers::core::types::Address,
            amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (ethers::core::types::Address, ethers::core::types::U256),
        > {
            self.0
                .method_hash(
                    [29, 248, 46, 89],
                    (q_token_to_mint, q_token_for_collateral, amount),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getExercisePayout` (0x57284c2a) function"]
        pub fn get_exercise_payout(
            &self,
            q_token: ethers::core::types::Address,
            amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (
                bool,
                ethers::core::types::Address,
                ethers::core::types::U256,
            ),
        > {
            self.0
                .method_hash([87, 40, 76, 42], (q_token, amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getNeutralizationPayout` (0x099ca872) function"]
        pub fn get_neutralization_payout(
            &self,
            q_token_short: ethers::core::types::Address,
            q_token_long: ethers::core::types::Address,
            amount_to_neutralize: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (ethers::core::types::Address, ethers::core::types::U256),
        > {
            self.0
                .method_hash(
                    [9, 156, 168, 114],
                    (q_token_short, q_token_long, amount_to_neutralize),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `optionsDecimals` (0x8493cec1) function"]
        pub fn options_decimals(&self) -> ethers::contract::builders::ContractCall<M, u8> {
            self.0
                .method_hash([132, 147, 206, 193], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `optionsFactory` (0xe66ef2c4) function"]
        pub fn options_factory(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([230, 110, 242, 196], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `priceRegistry` (0x535131d7) function"]
        pub fn price_registry(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([83, 81, 49, 215], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `strikeAssetDecimals` (0xc1325661) function"]
        pub fn strike_asset_decimals(&self) -> ethers::contract::builders::ContractCall<M, u8> {
            self.0
                .method_hash([193, 50, 86, 97], ())
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for QuantCalculator<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[doc = "Container type for all input parameters for the `assetsRegistry`function with signature `assetsRegistry()` and selector `[145, 19, 3, 180]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "assetsRegistry", abi = "assetsRegistry()")]
    pub struct AssetsRegistryCall;
    #[doc = "Container type for all input parameters for the `calculateClaimableCollateral`function with signature `calculateClaimableCollateral(uint256,uint256,address)` and selector `[42, 45, 125, 148]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "calculateClaimableCollateral",
        abi = "calculateClaimableCollateral(uint256,uint256,address)"
    )]
    pub struct CalculateClaimableCollateralCall {
        pub collateral_token_id: ethers::core::types::U256,
        pub amount: ethers::core::types::U256,
        pub user: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getCollateralRequirement`function with signature `getCollateralRequirement(address,address,uint256)` and selector `[29, 248, 46, 89]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "getCollateralRequirement",
        abi = "getCollateralRequirement(address,address,uint256)"
    )]
    pub struct GetCollateralRequirementCall {
        pub q_token_to_mint: ethers::core::types::Address,
        pub q_token_for_collateral: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `getExercisePayout`function with signature `getExercisePayout(address,uint256)` and selector `[87, 40, 76, 42]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getExercisePayout", abi = "getExercisePayout(address,uint256)")]
    pub struct GetExercisePayoutCall {
        pub q_token: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `getNeutralizationPayout`function with signature `getNeutralizationPayout(address,address,uint256)` and selector `[9, 156, 168, 114]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "getNeutralizationPayout",
        abi = "getNeutralizationPayout(address,address,uint256)"
    )]
    pub struct GetNeutralizationPayoutCall {
        pub q_token_short: ethers::core::types::Address,
        pub q_token_long: ethers::core::types::Address,
        pub amount_to_neutralize: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `optionsDecimals`function with signature `optionsDecimals()` and selector `[132, 147, 206, 193]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "optionsDecimals", abi = "optionsDecimals()")]
    pub struct OptionsDecimalsCall;
    #[doc = "Container type for all input parameters for the `optionsFactory`function with signature `optionsFactory()` and selector `[230, 110, 242, 196]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "optionsFactory", abi = "optionsFactory()")]
    pub struct OptionsFactoryCall;
    #[doc = "Container type for all input parameters for the `priceRegistry`function with signature `priceRegistry()` and selector `[83, 81, 49, 215]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "priceRegistry", abi = "priceRegistry()")]
    pub struct PriceRegistryCall;
    #[doc = "Container type for all input parameters for the `strikeAssetDecimals`function with signature `strikeAssetDecimals()` and selector `[193, 50, 86, 97]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "strikeAssetDecimals", abi = "strikeAssetDecimals()")]
    pub struct StrikeAssetDecimalsCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum QuantCalculatorCalls {
        AssetsRegistry(AssetsRegistryCall),
        CalculateClaimableCollateral(CalculateClaimableCollateralCall),
        GetCollateralRequirement(GetCollateralRequirementCall),
        GetExercisePayout(GetExercisePayoutCall),
        GetNeutralizationPayout(GetNeutralizationPayoutCall),
        OptionsDecimals(OptionsDecimalsCall),
        OptionsFactory(OptionsFactoryCall),
        PriceRegistry(PriceRegistryCall),
        StrikeAssetDecimals(StrikeAssetDecimalsCall),
    }
    impl ethers::core::abi::AbiDecode for QuantCalculatorCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <AssetsRegistryCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantCalculatorCalls::AssetsRegistry(decoded));
            }
            if let Ok(decoded) =
                <CalculateClaimableCollateralCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(QuantCalculatorCalls::CalculateClaimableCollateral(decoded));
            }
            if let Ok(decoded) =
                <GetCollateralRequirementCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(QuantCalculatorCalls::GetCollateralRequirement(decoded));
            }
            if let Ok(decoded) =
                <GetExercisePayoutCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantCalculatorCalls::GetExercisePayout(decoded));
            }
            if let Ok(decoded) =
                <GetNeutralizationPayoutCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantCalculatorCalls::GetNeutralizationPayout(decoded));
            }
            if let Ok(decoded) =
                <OptionsDecimalsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantCalculatorCalls::OptionsDecimals(decoded));
            }
            if let Ok(decoded) =
                <OptionsFactoryCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantCalculatorCalls::OptionsFactory(decoded));
            }
            if let Ok(decoded) =
                <PriceRegistryCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantCalculatorCalls::PriceRegistry(decoded));
            }
            if let Ok(decoded) =
                <StrikeAssetDecimalsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantCalculatorCalls::StrikeAssetDecimals(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for QuantCalculatorCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                QuantCalculatorCalls::AssetsRegistry(element) => element.encode(),
                QuantCalculatorCalls::CalculateClaimableCollateral(element) => element.encode(),
                QuantCalculatorCalls::GetCollateralRequirement(element) => element.encode(),
                QuantCalculatorCalls::GetExercisePayout(element) => element.encode(),
                QuantCalculatorCalls::GetNeutralizationPayout(element) => element.encode(),
                QuantCalculatorCalls::OptionsDecimals(element) => element.encode(),
                QuantCalculatorCalls::OptionsFactory(element) => element.encode(),
                QuantCalculatorCalls::PriceRegistry(element) => element.encode(),
                QuantCalculatorCalls::StrikeAssetDecimals(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for QuantCalculatorCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                QuantCalculatorCalls::AssetsRegistry(element) => element.fmt(f),
                QuantCalculatorCalls::CalculateClaimableCollateral(element) => element.fmt(f),
                QuantCalculatorCalls::GetCollateralRequirement(element) => element.fmt(f),
                QuantCalculatorCalls::GetExercisePayout(element) => element.fmt(f),
                QuantCalculatorCalls::GetNeutralizationPayout(element) => element.fmt(f),
                QuantCalculatorCalls::OptionsDecimals(element) => element.fmt(f),
                QuantCalculatorCalls::OptionsFactory(element) => element.fmt(f),
                QuantCalculatorCalls::PriceRegistry(element) => element.fmt(f),
                QuantCalculatorCalls::StrikeAssetDecimals(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<AssetsRegistryCall> for QuantCalculatorCalls {
        fn from(var: AssetsRegistryCall) -> Self {
            QuantCalculatorCalls::AssetsRegistry(var)
        }
    }
    impl ::std::convert::From<CalculateClaimableCollateralCall> for QuantCalculatorCalls {
        fn from(var: CalculateClaimableCollateralCall) -> Self {
            QuantCalculatorCalls::CalculateClaimableCollateral(var)
        }
    }
    impl ::std::convert::From<GetCollateralRequirementCall> for QuantCalculatorCalls {
        fn from(var: GetCollateralRequirementCall) -> Self {
            QuantCalculatorCalls::GetCollateralRequirement(var)
        }
    }
    impl ::std::convert::From<GetExercisePayoutCall> for QuantCalculatorCalls {
        fn from(var: GetExercisePayoutCall) -> Self {
            QuantCalculatorCalls::GetExercisePayout(var)
        }
    }
    impl ::std::convert::From<GetNeutralizationPayoutCall> for QuantCalculatorCalls {
        fn from(var: GetNeutralizationPayoutCall) -> Self {
            QuantCalculatorCalls::GetNeutralizationPayout(var)
        }
    }
    impl ::std::convert::From<OptionsDecimalsCall> for QuantCalculatorCalls {
        fn from(var: OptionsDecimalsCall) -> Self {
            QuantCalculatorCalls::OptionsDecimals(var)
        }
    }
    impl ::std::convert::From<OptionsFactoryCall> for QuantCalculatorCalls {
        fn from(var: OptionsFactoryCall) -> Self {
            QuantCalculatorCalls::OptionsFactory(var)
        }
    }
    impl ::std::convert::From<PriceRegistryCall> for QuantCalculatorCalls {
        fn from(var: PriceRegistryCall) -> Self {
            QuantCalculatorCalls::PriceRegistry(var)
        }
    }
    impl ::std::convert::From<StrikeAssetDecimalsCall> for QuantCalculatorCalls {
        fn from(var: StrikeAssetDecimalsCall) -> Self {
            QuantCalculatorCalls::StrikeAssetDecimals(var)
        }
    }
}
