pub use quant_calculator::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod quant_calculator {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "QuantCalculator was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static QUANTCALCULATOR_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers :: core :: utils :: __serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_optionsFactory\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_assetsRegistry\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_priceRegistry\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"assetsRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralTokenId\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"calculateClaimableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnableCollateral\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amountToClaim\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_qTokenToMint\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_qTokenForCollateral\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getCollateralRequirement\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_qToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getExercisePayout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"payoutToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"payoutAmount\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_qTokenShort\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_qTokenLong\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_amountToNeutralize\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getNeutralizationPayout\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"collateralOwed\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"optionsDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"optionsFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"priceRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"strikeAssetDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static QUANTCALCULATOR_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x610120604081815234620002d457606082620031a98038038091620000258285620002d9565b833981010312620002d4576200003b8262000313565b9160209262000059836200005186850162000313565b930162000313565b936001600160a01b038281169081156200027857808516156200021c57861615620001c15781600491865192838092638493cec160e01b82525afa918215620001b65760009262000171575b5050608052601260a05260c05260e05261010091825251612e8091826200032983396080518281816101f7015281816107d90152818161083e01528181610da6015281816110d9015261159f015260a05182818161012e015281816107b80152818161086301528181610d84015281816110b7015261157d015260c05182818160cf015281816102a1015281816104550152610cbc015260e05182818161019c0152818161080501528181610d5a015261106b0152518181816103a6015281816105dd015261147d0152f35b81813d8311620001ae575b620001888183620002d9565b81010312620001aa57519060ff82168203620001a757503880620000a5565b80fd5b5080fd5b503d6200017c565b85513d6000823e3d90fd5b845162461bcd60e51b815260048101839052602e60248201527f5175616e7443616c63756c61746f723a20696e76616c6964205072696365526560448201526d676973747279206164647265737360901b6064820152608490fd5b855162461bcd60e51b815260048101849052602f60248201527f5175616e7443616c63756c61746f723a20696e76616c6964204173736574735260448201526e65676973747279206164647265737360881b6064820152608490fd5b855162461bcd60e51b815260048101849052602f60248201527f5175616e7443616c63756c61746f723a20696e76616c6964204f7074696f6e7360448201526e466163746f7279206164647265737360881b6064820152608490fd5b600080fd5b601f909101601f19168101906001600160401b03821190821017620002fd57604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620002d45756fe6040608081526004908136101561001557600080fd5b600091823560e01c908163099ca872146110485781631df82e5914610c8f5781632a2d7d94146103ca578163535131d71461035b57816357284c2a1461021b575080638493cec1146101c0578063911303b414610152578063c1325661146100f75763e66ef2c41461008657600080fd5b346100f357817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f3576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b50346100f357817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f3576020905160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346100f357817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f3576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346100f357817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f3576020905160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b9190503461035757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103575781359273ffffffffffffffffffffffffffffffffffffffff92838516808603610357578351917f0c74804e000000000000000000000000000000000000000000000000000000008352820152602081602481877f0000000000000000000000000000000000000000000000000000000000000000165afa91821561034c578092610301575b50506060936102e26102eb926112b1565b6024359061133c565b9291939082519415158552166020840152820152f35b9091506020823d8211610344575b8161031c602093836111b8565b8101031261034157506060936102e26103376102eb936112a4565b92508195506102d1565b80fd5b3d915061030f565b8351903d90823e3d90fd5b8280fd5b5050346100f357817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f3576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b8383346100f35760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f357823592602435916044359473ffffffffffffffffffffffffffffffffffffffff948587168703610341578251917fb2016bd4000000000000000000000000000000000000000000000000000000008352602092838187818b7f0000000000000000000000000000000000000000000000000000000000000000165afa908115610c85579088918491610c4d575b50168451967fd94a7e5300000000000000000000000000000000000000000000000000000000885282878901528588602481855afa918215610c435784988593610bfc575b50898916938751917f7dc0d1d000000000000000000000000000000000000000000000000000000000835287838b81895afa928315610bf2578793610bbb575b5088519c8d94897f99bc0aea00000000000000000000000000000000000000000000000000000000968781528d818b5afa958615610bb1578c9d9e9f8a9d9b9c9d97610b92575b508b8d51809c7f7158da7c000000000000000000000000000000000000000000000000000000008252818c5afa9a8b15610b88578a9b610b3b575b509c809e9f9b8d9e819e519283918252818c5afa908115610b3157906affffffffffffffffffffff918e8c92610b04575b505016421115610a82579084939291868f8f978f918f8f610667917f0000000000000000000000000000000000000000000000000000000000000000169b5195869485947f8df6475d0000000000000000000000000000000000000000000000000000000086528501919392906040916affffffffffffffffffffff606085019673ffffffffffffffffffffffffffffffffffffffff809416865216602085015216910152565b03818a5afa908115610a77578e8c92610a4a575b50506003811015610a1d5760020361099a57918d96959493918f8e94801560001461098e57506106fc9596979851958694859384937efdd58e00000000000000000000000000000000000000000000000000000000855284016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03915afa90811561098457908b949392918891610949575b509b5b6107868551998a95869485947f818182260000000000000000000000000000000000000000000000000000000086528501919392906040916affffffffffffffffffffff606085019673ffffffffffffffffffffffffffffffffffffffff809416865216602085015216910152565b03915afa93841561093f57908892918495610910575b508388516107a98161116d565b52808616156108ed576107ff857f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008685611703565b9050915b7f000000000000000000000000000000000000000000000000000000000000000061082d91612630565b9484895161083a8161116d565b52837f0000000000000000000000000000000000000000000000000000000000000000928c88857f00000000000000000000000000000000000000000000000000000000000000009461088e948694611ab9565b9561089a94919d611703565b93905087516108a88161116d565b525190516108b591612c00565b908551916108c28361116d565b82526108cd91612c5e565b9060ff166108da91612af7565b9483519586521690840152820152606090f35b50828388516108fb8161116d565b5287516109078161116d565b84815291610803565b610931919550883d8a11610938575b61092981836111b8565b810190611263565b938a61079c565b503d61091f565b87513d85823e3d90fd5b8092939495508b8092503d831161097d575b61096581836111b8565b8101031261097957908a939291518e610714565b8680fd5b503d61095b565b8b513d89823e3d90fd5b9450505050509b610717565b5060848e8d8f51917f08c379a0000000000000000000000000000000000000000000000000000000008352820152603160248201527f43616e206e6f7420636c61696d20636f6c6c61746572616c206265666f72652060448201527f6f7074696f6e20697320736574746c65640000000000000000000000000000006064820152fd5b8f8b60216024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b610a699250803d10610a70575b610a6181836111b8565b81019061123d565b388e61067b565b503d610a57565b508e513d8c823e3d90fd5b60848e8d8f51917f08c379a0000000000000000000000000000000000000000000000000000000008352820152603960248201527f43616e206e6f7420636c61696d20636f6c6c61746572616c2066726f6d206f7060448201527f74696f6e73206265666f726520746865697220657870697279000000000000006064820152fd5b610b239250803d10610b2a575b610b1b81836111b8565b81019061121a565b388e6105c0565b503d610b11565b8e513d8c823e3d90fd5b9f9a508f8c90813d8311610b81575b610b5481836111b8565b81010312610b7d579c809e9f9b8d9e610b6f829f9d9e6111f9565b9c5091509b9f9e9d9c61058f565b8980fd5b503d610b4a565b8d513d8c823e3d90fd5b610baa9197508c8d3d10610b2a57610b1b81836111b8565b9538610554565b8b513d8b823e3d90fd5b9092508781813d8311610beb575b610bd381836111b8565b8101031261097957610be4906111f9565b918d61050d565b503d610bc9565b89513d89823e3d90fd5b985091508588813d8111610c3c575b610c1581836111b8565b81010312610c3857610c3185610c2a8a6111f9565b99016111f9565b918b6104cd565b8380fd5b503d610c0b565b86513d86823e3d90fd5b809250858092503d8311610c7e575b610c6681836111b8565b8101031261035757610c7888916111f9565b8a610488565b503d610c5c565b85513d85823e3d90fd5b839150346100f357610ca036611108565b91939073ffffffffffffffffffffffffffffffffffffffff92837f0000000000000000000000000000000000000000000000000000000000000000168751947f0c74804e000000000000000000000000000000000000000000000000000000009182875281891692838989015260209260249884818b81875afa801561103e578990611004575b610d3191506112b1565b86169081610f66575b5050505091610dcb91610d7f859460ff97968b51610d578161116d565b527f000000000000000000000000000000000000000000000000000000000000000090612630565b9788917f0000000000000000000000000000000000000000000000000000000000000000937f000000000000000000000000000000000000000000000000000000000000000092611ab9565b9390951693601b8514600014610e2057505050610e1c9150610ded9051612e0a565b925b51928392836020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0390f35b601b851115610ea557601b8510610e7c57505050610e1c91610e707fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5610e69610e769451612e0a565b92016129ab565b906129e8565b92610def565b6011907f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b929380601b10610f3c57601b038194610ebe8151612e0a565b610ec7836129ab565b908115610f115706610f08575b90610eeb610ee5610ef19351612e0a565b916129ab565b90612a19565b9284198411610e7c575050500191610e1c90610def565b60019550610ed4565b85856012897f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b506011837f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b908884928d51948593849283528d8301525afa918215610ffa578692610faa575b505091610d7f60ff96959492610f9f610dcb956112b1565b929495968294610d3a565b90809250813d8311610ff3575b610fc181836111b8565b81010312610fef5791610d7f60ff96959492610f9f610fe2610dcb966112a4565b9395505092949596610f87565b8480fd5b503d610fb7565b8a513d88823e3d90fd5b508481813d8311611037575b61101a81836111b8565b810103126110335761102e610d31916112a4565b610d27565b8880fd5b503d611010565b8d513d8b823e3d90fd5b82843461034157610e1c610ded60ff6110fe61106336611108565b9690916110a67f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8316612630565b9788928a516110b48161116d565b527f0000000000000000000000000000000000000000000000000000000000000000937f000000000000000000000000000000000000000000000000000000000000000092611ab9565b9190941690612af7565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60609101126111685773ffffffffffffffffffffffffffffffffffffffff90600435828116810361116857916024359081168103611168579060443590565b600080fd5b6020810190811067ffffffffffffffff82111761118957604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761118957604052565b519073ffffffffffffffffffffffffffffffffffffffff8216820361116857565b9081602091031261116857516affffffffffffffffffffff811681036111685790565b90816020910312611168575160038110156111685790565b519060ff8216820361116857565b9081604091031261116857604051906040820182811067ffffffffffffffff821117611189576040528051825261129c90602001611255565b602082015290565b5190811515820361116857565b156112b857565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f5175616e7443616c63756c61746f723a20496e76616c69642051546f6b656e2060448201527f61646472657373000000000000000000000000000000000000000000000000006064820152fd5b909173ffffffffffffffffffffffffffffffffffffffff91828116936040918251947f7dc0d1d00000000000000000000000000000000000000000000000000000000086526020600496818189818c5afa9081156116f8576000916116c3575b508551927f99bc0aea00000000000000000000000000000000000000000000000000000000845282848a818d5afa9384156116b857908994939291600094611699575b50828b8951968780927f7158da7c0000000000000000000000000000000000000000000000000000000082525afa94851561168e57600095611657575b5087517f8df6475d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808416828d019081526affffffffffffffffffffff8716602082015290871660408201527f00000000000000000000000000000000000000000000000000000000000000009290921693918290829081906060010381875afa91821561164c5760009261162f575b5050600381101561160157600214998a156115f057906114e98894939260008651610d578161116d565b996115598551968795869485947f818182260000000000000000000000000000000000000000000000000000000086528501919392906040916affffffffffffffffffffff606085019673ffffffffffffffffffffffffffffffffffffffff809416865216602085015216910152565b03915afa9384156115e657926110fe926115c4959260ff956000946115c7575b50507f0000000000000000000000000000000000000000000000000000000000000000917f000000000000000000000000000000000000000000000000000000000000000091611703565b90565b6115de929450803d106109385761092981836111b8565b913880611579565b513d6000823e3d90fd5b506000985088979650505050505050565b60218a7f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b6116459250803d10610a7057610a6181836111b8565b38806114bf565b89513d6000823e3d90fd5b90948382813d8311611687575b61166e81836111b8565b810103126103415750611680906111f9565b933861141c565b503d611664565b88513d6000823e3d90fd5b6116b1919450833d8511610b2a57610b1b81836111b8565b92386113df565b87513d6000823e3d90fd5b908282813d83116116f1575b6116d981836111b8565b8101031261034157506116eb906111f9565b3861139c565b503d6116cf565b86513d6000823e3d90fd5b919094939260409373ffffffffffffffffffffffffffffffffffffffff85519461172c8661116d565b600080965216968551907f6d63647800000000000000000000000000000000000000000000000000000000825260209384836004818d5afa928315611aaf578793611a76575b5060049083156119f857858b8a51938480927f7158da7c0000000000000000000000000000000000000000000000000000000082525afa80156119b557869089906119bf575b600493505b9b8a51938480927fc52987cf0000000000000000000000000000000000000000000000000000000082525afa9182156119b557898991829461197c575b50611837949360ff8094846118209461182f9650516118188161116d565b521690612a52565b95828882519201511690612a52565b961690612a52565b928651926060840184811067ffffffffffffffff82111761194f578852835282019384528186019283521561190b578385516118728161116d565b52825181519051905112156118ef57826118a66118de959361189e6118d1946118d99751905190612c5e565b905190612d40565b90519286516118b48161116d565b526118ca6118c28251612835565b845190612ce1565b5051612835565b905190612ceb565b612b74565b9051906118ea8261116d565b815290565b505050908181516118ff8161116d565b5251906118ea8261116d565b919383819492945161191c8161116d565b528251855190519051121561193e5750506115c49261189e9151905190612c5e565b92509250508181516118ff8161116d565b6024887f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b92935050508581813d83116119ae575b61199681836111b8565b810103126119aa57519087896118206117fa565b8780fd5b503d61198c565b89513d8a823e3d90fd5b5082819392933d83116119f1575b6119d781836111b8565b810103126119aa5790856119ec6004936111f9565b6117b8565b503d6119cd565b858b8a51938480927f17d69bc80000000000000000000000000000000000000000000000000000000082525afa80156119b55786908990611a3d575b600493506117bd565b5082819392933d8311611a6f575b611a5581836111b8565b810103126119aa579085611a6a6004936111f9565b611a34565b503d611a4b565b9092508481813d8311611aa8575b611a8e81836111b8565b8101031261097957611aa16004916112a4565b9290611772565b503d611a84565b88513d89823e3d90fd5b909293604094855193611acb8561116d565b600080955273ffffffffffffffffffffffffffffffffffffffff809416928751947fc52987cf000000000000000000000000000000000000000000000000000000009586815260209660049988838c818b5afa9283156120c8579084918b9461255e575b5016908115612553578b5190815288818c81855afa9081156120c8578a91612526575b50928b518b8a827f99bc0aea0000000000000000000000000000000000000000000000000000000092838252818d5afa918215612205578d918f8d928f95612507575b5051928391825281875afa908115612205578c916124ea575b506affffffffffffffffffffff809116911603612442578b517f7158da7c000000000000000000000000000000000000000000000000000000008082528a828e818d5afa918215612205578d918f8d928f95612406575b5051928391825281875afa80156122055783908d906123d0575b81925016911603612328578b517f6d636478000000000000000000000000000000000000000000000000000000008082528a828e818d5afa918215612205578d918f8d928f956122ec575b5051928391825281875afa908115612205578c916122b7575b5015159015150361220f578b51918b8a847f7dc0d1d00000000000000000000000000000000000000000000000000000000092838252818d5afa93841561220557908d8f8d938f976121c0575b50518094819382525afa9081156121b6579082918c9161217a575b50169116036120d2575b89519a7f6d636478000000000000000000000000000000000000000000000000000000009b8c815288818c818b5afa9081156120c8578a918d91839161208f575b50828251611d438161116d565b52828251611d508161116d565b52156120085760ff809383611d7793611d7e955051611d6e8161116d565b52168094612a52565b9284612a52565b9316604d8111611fdc5793611de793611dfb938a8d611dbe95611da88a611e059c9b600a0a612a52565b93611f3a575b50505060ff9150955b1690612a52565b92878a51611dcb8161116d565b528784516b033b2e3c9fd0803ce80000009485918451906128c7565b071315611f33576001935b519051906128c7565b0590850b90612c00565b855190611e118261116d565b815295855190815282818681855afa908115610c4357908392918591611efb575b5015611ebc578551948580927f7158da7c0000000000000000000000000000000000000000000000000000000082525afa938415611eb157508193611e78575b50505091565b9091809350813d8311611eaa575b611e9081836111b8565b810103126103415750611ea2906111f9565b388080611e72565b503d611e86565b51913d9150823e3d90fd5b8551948580927f17d69bc80000000000000000000000000000000000000000000000000000000082525afa938415611eb157508193611e785750505091565b8381939492503d8311611f2c575b611f1381836111b8565b81010312610c385790611f2683926112a4565b38611e32565b503d611f09565b8793611df2565b80919293505184511315600014611f73575090915051611f598161116d565b5260ff8b51611f678161116d565b8a81525b8a8d38611dae565b83611fbf93611f87611fb69360ff97612c5e565b9351611f928161116d565b528d80611fa26118c28651612835565b1315611fd257506118d16001935b51612835565b908c0b90612c00565b8c5190611fcb8261116d565b8152611f6b565b6118d19093611fb0565b60248960118c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b611de795509361203861203160ff611e059a999585611dfb99611dbe99975051611d6e8161116d565b9282612a52565b91809161204b575b5060ff915095611db7565b8091505182511260001461206b5760ff9161206591612c5e565b38612040565b5050888b516120798161116d565b5260ff8b516120878161116d565b8a8152612065565b925050508881813d83116120c1575b6120a881836111b8565b81010312610b7d578b6120bb8b926112a4565b38611d36565b503d61209e565b8c513d8c823e3d90fd5b60a489888c51917f08c379a0000000000000000000000000000000000000000000000000000000008352820152604460248201527f436f6e74726f6c6c65723a2043616e277420637265617465207370726561647360448201527f2066726f6d206f7074696f6e73207769746820646966666572656e74206f726160648201527f636c6573000000000000000000000000000000000000000000000000000000006084820152fd5b8092508b8092503d83116121af575b61219381836111b8565b810103126121ab576121a582916111f9565b38611ceb565b8a80fd5b503d612189565b8d513d8d823e3d90fd5b939294959650505081813d83116121fe575b6121dc81836111b8565b810103126121fa578d9392918d6121f38d936111f9565b9538611cd0565b8b80fd5b503d6121d2565b8e513d8e823e3d90fd5b60a48b8a8e51917f08c379a0000000000000000000000000000000000000000000000000000000008352820152604260248201527f436f6e74726f6c6c65723a2043616e277420637265617465207370726561647360448201527f2066726f6d206f7074696f6e73207769746820646966666572656e742074797060648201527f65730000000000000000000000000000000000000000000000000000000000006084820152fd5b90508a81813d83116122e5575b6122ce81836111b8565b810103126121fa576122df906112a4565b38611c83565b503d6122c4565b935050925081813d8311612321575b61230581836111b8565b810103126121fa578a8e9261231a8f936112a4565b9338611c6a565b503d6122fb565b60a48b8a8e51917f08c379a0000000000000000000000000000000000000000000000000000000008352820152604e60248201527f436f6e74726f6c6c65723a2043616e277420637265617465207370726561647360448201527f2066726f6d206f7074696f6e73207769746820646966666572656e7420756e6460648201527f65726c79696e67206173736574730000000000000000000000000000000000006084820152fd5b50508a81813d83116123ff575b6123e781836111b8565b810103126121fa57826123fa81926111f9565b611c1f565b503d6123dd565b935050925081813d831161243b575b61241f81836111b8565b810103126121fa578a8e926124348f936111f9565b9338611c05565b503d612415565b60a48b8a8e51917f08c379a0000000000000000000000000000000000000000000000000000000008352820152604560248201527f436f6e74726f6c6c65723a2043616e277420637265617465207370726561647360448201527f2066726f6d206f7074696f6e73207769746820646966666572656e742065787060648201527f69726965730000000000000000000000000000000000000000000000000000006084820152fd5b61250191508b3d8d11610b2a57610b1b81836111b8565b38611bae565b61251f919550833d8511610b2a57610b1b81836111b8565b9338611b95565b90508881813d831161254c575b61253d81836111b8565b81010312610b7d575138611b52565b503d612533565b505090508690611cf5565b8a809295508193503d831161258a575b61257881836111b8565b81010312610b7d578390519238611b2f565b503d61256e565b9080601f830112156111685781519067ffffffffffffffff821161118957604051926020916125e7837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f87011601866111b8565b8385528284830101116111685782906000905b838383106126185750501161260e57505090565b6000918301015290565b819350828193920101518282880101520183916125fa565b604080517f6d6364780000000000000000000000000000000000000000000000000000000081526020939273ffffffffffffffffffffffffffffffffffffffff91908216908581600481855afa90811561282a576000916127f5575b50156127eb57846004918451928380927f7158da7c0000000000000000000000000000000000000000000000000000000082525afa9081156127e0576000916127a4575b5090602460009282855196879485937fbb9453a5000000000000000000000000000000000000000000000000000000008552166004840152165afa92831561279957600093612720575b50505090565b929091923d8083863e61273381866111b8565b8401916080858403126103415784519167ffffffffffffffff928381116103575784612760918801612591565b50850151918211610341575061279092612781606093612789938701612591565b508401611255565b92016112a4565b5038808061271a565b50513d6000823e3d90fd5b908582813d83116127d9575b6127ba81836111b8565b8101031261034157509060246127d16000936111f9565b9192506126d0565b503d6127b0565b83513d6000823e3d90fd5b5050505050601290565b908682813d8311612823575b61280b81836111b8565b81010312610341575061281d906112a4565b3861268c565b503d612801565b84513d6000823e3d90fd5b6000600174279d346de4781f921dd7a89933d54d1f72927c70148311828413161661289a5760017fffffffffffffffffffffffd862cb921b87e06de2285766cc2ab2e08d6d838fec8312828412161661289a57506b033b2e3c9fd0803ce80000000290565b807f4e487b7100000000000000000000000000000000000000000000000000000000602492526011600452fd5b60008082138184137f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82821686820486111661295157838612917f80000000000000000000000000000000000000000000000000000000000000009383878605891291161661297e5786858712940586129084161661295157859005841291161661289a57500290565b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024857f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b604d81116129b957600a0a90565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211811515166129b9570290565b8115612a23570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b90604051612a5f8161116d565b600080915280604051612a718161116d565b52601b8203612a92575050612a8590612d81565b604051906118ea8261116d565b601b821115612adb57601b821061289a5750612a8591610eeb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5612ad693016129ab565b612d81565b81601b1061289a5750612a8591610e70612ad692601b036129ab565b6000601b8303612b0d57506115c4915051612e0a565b601b831115612b51575090601b81106129b957610e707fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5610e696115c49451612e0a565b82601b1061289a575090610eeb612b6b6115c49351612e0a565b91601b036129ab565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038213811516612bd357827f80000000000000000000000000000000000000000000000000000000000000000382121661289a575090565b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b60008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166129b957817f8000000000000000000000000000000000000000000000000000000000000000038312166129b9570190565b60405190612c6b8261116d565b600080925251915190808212827f8000000000000000000000000000000000000000000000000000000000000000018412811516612bd357827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0184131661289a575060405191612cdb8361116d565b03815290565b8115612a23570790565b8115612a23577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82147f80000000000000000000000000000000000000000000000000000000000000008214166129b9570590565b612d7b612a85926b033b2e3c9fd0803ce8000000926000604051612d638161116d565b52612d7181518351906128c7565b50519051906128c7565b05612b74565b7f8000000000000000000000000000000000000000000000000000000000000000811015612dac5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f5175616e744d6174683a206f7574206f6620696e742072616e676500000000006044820152fd5b60008112612e155790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5175616e744d6174683a206e6567617469766520696e740000000000000000006044820152fdfea164736f6c634300080f000a" . parse () . expect ("invalid bytecode")
        });
    pub struct QuantCalculator<M>(ethers::contract::Contract<M>);
    impl<M> Clone for QuantCalculator<M> {
        fn clone(&self) -> Self {
            QuantCalculator(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for QuantCalculator<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for QuantCalculator<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(QuantCalculator))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> QuantCalculator<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), QUANTCALCULATOR_ABI.clone(), client)
                .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                QUANTCALCULATOR_ABI.clone(),
                QUANTCALCULATOR_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `assetsRegistry` (0x911303b4) function"]
        pub fn assets_registry(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([145, 19, 3, 180], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `calculateClaimableCollateral` (0x2a2d7d94) function"]
        pub fn calculate_claimable_collateral(
            &self,
            collateral_token_id: ethers::core::types::U256,
            amount: ethers::core::types::U256,
            user: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (
                ethers::core::types::U256,
                ethers::core::types::Address,
                ethers::core::types::U256,
            ),
        > {
            self.0
                .method_hash([42, 45, 125, 148], (collateral_token_id, amount, user))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getCollateralRequirement` (0x1df82e59) function"]
        pub fn get_collateral_requirement(
            &self,
            q_token_to_mint: ethers::core::types::Address,
            q_token_for_collateral: ethers::core::types::Address,
            amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (ethers::core::types::Address, ethers::core::types::U256),
        > {
            self.0
                .method_hash(
                    [29, 248, 46, 89],
                    (q_token_to_mint, q_token_for_collateral, amount),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getExercisePayout` (0x57284c2a) function"]
        pub fn get_exercise_payout(
            &self,
            q_token: ethers::core::types::Address,
            amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (
                bool,
                ethers::core::types::Address,
                ethers::core::types::U256,
            ),
        > {
            self.0
                .method_hash([87, 40, 76, 42], (q_token, amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getNeutralizationPayout` (0x099ca872) function"]
        pub fn get_neutralization_payout(
            &self,
            q_token_short: ethers::core::types::Address,
            q_token_long: ethers::core::types::Address,
            amount_to_neutralize: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (ethers::core::types::Address, ethers::core::types::U256),
        > {
            self.0
                .method_hash(
                    [9, 156, 168, 114],
                    (q_token_short, q_token_long, amount_to_neutralize),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `optionsDecimals` (0x8493cec1) function"]
        pub fn options_decimals(&self) -> ethers::contract::builders::ContractCall<M, u8> {
            self.0
                .method_hash([132, 147, 206, 193], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `optionsFactory` (0xe66ef2c4) function"]
        pub fn options_factory(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([230, 110, 242, 196], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `priceRegistry` (0x535131d7) function"]
        pub fn price_registry(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([83, 81, 49, 215], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `strikeAssetDecimals` (0xc1325661) function"]
        pub fn strike_asset_decimals(&self) -> ethers::contract::builders::ContractCall<M, u8> {
            self.0
                .method_hash([193, 50, 86, 97], ())
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for QuantCalculator<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[doc = "Container type for all input parameters for the `assetsRegistry` function with signature `assetsRegistry()` and selector `[145, 19, 3, 180]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "assetsRegistry", abi = "assetsRegistry()")]
    pub struct AssetsRegistryCall;
    #[doc = "Container type for all input parameters for the `calculateClaimableCollateral` function with signature `calculateClaimableCollateral(uint256,uint256,address)` and selector `[42, 45, 125, 148]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "calculateClaimableCollateral",
        abi = "calculateClaimableCollateral(uint256,uint256,address)"
    )]
    pub struct CalculateClaimableCollateralCall {
        pub collateral_token_id: ethers::core::types::U256,
        pub amount: ethers::core::types::U256,
        pub user: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getCollateralRequirement` function with signature `getCollateralRequirement(address,address,uint256)` and selector `[29, 248, 46, 89]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "getCollateralRequirement",
        abi = "getCollateralRequirement(address,address,uint256)"
    )]
    pub struct GetCollateralRequirementCall {
        pub q_token_to_mint: ethers::core::types::Address,
        pub q_token_for_collateral: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `getExercisePayout` function with signature `getExercisePayout(address,uint256)` and selector `[87, 40, 76, 42]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getExercisePayout", abi = "getExercisePayout(address,uint256)")]
    pub struct GetExercisePayoutCall {
        pub q_token: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `getNeutralizationPayout` function with signature `getNeutralizationPayout(address,address,uint256)` and selector `[9, 156, 168, 114]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "getNeutralizationPayout",
        abi = "getNeutralizationPayout(address,address,uint256)"
    )]
    pub struct GetNeutralizationPayoutCall {
        pub q_token_short: ethers::core::types::Address,
        pub q_token_long: ethers::core::types::Address,
        pub amount_to_neutralize: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `optionsDecimals` function with signature `optionsDecimals()` and selector `[132, 147, 206, 193]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "optionsDecimals", abi = "optionsDecimals()")]
    pub struct OptionsDecimalsCall;
    #[doc = "Container type for all input parameters for the `optionsFactory` function with signature `optionsFactory()` and selector `[230, 110, 242, 196]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "optionsFactory", abi = "optionsFactory()")]
    pub struct OptionsFactoryCall;
    #[doc = "Container type for all input parameters for the `priceRegistry` function with signature `priceRegistry()` and selector `[83, 81, 49, 215]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "priceRegistry", abi = "priceRegistry()")]
    pub struct PriceRegistryCall;
    #[doc = "Container type for all input parameters for the `strikeAssetDecimals` function with signature `strikeAssetDecimals()` and selector `[193, 50, 86, 97]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "strikeAssetDecimals", abi = "strikeAssetDecimals()")]
    pub struct StrikeAssetDecimalsCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum QuantCalculatorCalls {
        AssetsRegistry(AssetsRegistryCall),
        CalculateClaimableCollateral(CalculateClaimableCollateralCall),
        GetCollateralRequirement(GetCollateralRequirementCall),
        GetExercisePayout(GetExercisePayoutCall),
        GetNeutralizationPayout(GetNeutralizationPayoutCall),
        OptionsDecimals(OptionsDecimalsCall),
        OptionsFactory(OptionsFactoryCall),
        PriceRegistry(PriceRegistryCall),
        StrikeAssetDecimals(StrikeAssetDecimalsCall),
    }
    impl ethers::core::abi::AbiDecode for QuantCalculatorCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <AssetsRegistryCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantCalculatorCalls::AssetsRegistry(decoded));
            }
            if let Ok(decoded) =
                <CalculateClaimableCollateralCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(QuantCalculatorCalls::CalculateClaimableCollateral(decoded));
            }
            if let Ok(decoded) =
                <GetCollateralRequirementCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(QuantCalculatorCalls::GetCollateralRequirement(decoded));
            }
            if let Ok(decoded) =
                <GetExercisePayoutCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantCalculatorCalls::GetExercisePayout(decoded));
            }
            if let Ok(decoded) =
                <GetNeutralizationPayoutCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantCalculatorCalls::GetNeutralizationPayout(decoded));
            }
            if let Ok(decoded) =
                <OptionsDecimalsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantCalculatorCalls::OptionsDecimals(decoded));
            }
            if let Ok(decoded) =
                <OptionsFactoryCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantCalculatorCalls::OptionsFactory(decoded));
            }
            if let Ok(decoded) =
                <PriceRegistryCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantCalculatorCalls::PriceRegistry(decoded));
            }
            if let Ok(decoded) =
                <StrikeAssetDecimalsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantCalculatorCalls::StrikeAssetDecimals(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for QuantCalculatorCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                QuantCalculatorCalls::AssetsRegistry(element) => element.encode(),
                QuantCalculatorCalls::CalculateClaimableCollateral(element) => element.encode(),
                QuantCalculatorCalls::GetCollateralRequirement(element) => element.encode(),
                QuantCalculatorCalls::GetExercisePayout(element) => element.encode(),
                QuantCalculatorCalls::GetNeutralizationPayout(element) => element.encode(),
                QuantCalculatorCalls::OptionsDecimals(element) => element.encode(),
                QuantCalculatorCalls::OptionsFactory(element) => element.encode(),
                QuantCalculatorCalls::PriceRegistry(element) => element.encode(),
                QuantCalculatorCalls::StrikeAssetDecimals(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for QuantCalculatorCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                QuantCalculatorCalls::AssetsRegistry(element) => element.fmt(f),
                QuantCalculatorCalls::CalculateClaimableCollateral(element) => element.fmt(f),
                QuantCalculatorCalls::GetCollateralRequirement(element) => element.fmt(f),
                QuantCalculatorCalls::GetExercisePayout(element) => element.fmt(f),
                QuantCalculatorCalls::GetNeutralizationPayout(element) => element.fmt(f),
                QuantCalculatorCalls::OptionsDecimals(element) => element.fmt(f),
                QuantCalculatorCalls::OptionsFactory(element) => element.fmt(f),
                QuantCalculatorCalls::PriceRegistry(element) => element.fmt(f),
                QuantCalculatorCalls::StrikeAssetDecimals(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<AssetsRegistryCall> for QuantCalculatorCalls {
        fn from(var: AssetsRegistryCall) -> Self {
            QuantCalculatorCalls::AssetsRegistry(var)
        }
    }
    impl ::std::convert::From<CalculateClaimableCollateralCall> for QuantCalculatorCalls {
        fn from(var: CalculateClaimableCollateralCall) -> Self {
            QuantCalculatorCalls::CalculateClaimableCollateral(var)
        }
    }
    impl ::std::convert::From<GetCollateralRequirementCall> for QuantCalculatorCalls {
        fn from(var: GetCollateralRequirementCall) -> Self {
            QuantCalculatorCalls::GetCollateralRequirement(var)
        }
    }
    impl ::std::convert::From<GetExercisePayoutCall> for QuantCalculatorCalls {
        fn from(var: GetExercisePayoutCall) -> Self {
            QuantCalculatorCalls::GetExercisePayout(var)
        }
    }
    impl ::std::convert::From<GetNeutralizationPayoutCall> for QuantCalculatorCalls {
        fn from(var: GetNeutralizationPayoutCall) -> Self {
            QuantCalculatorCalls::GetNeutralizationPayout(var)
        }
    }
    impl ::std::convert::From<OptionsDecimalsCall> for QuantCalculatorCalls {
        fn from(var: OptionsDecimalsCall) -> Self {
            QuantCalculatorCalls::OptionsDecimals(var)
        }
    }
    impl ::std::convert::From<OptionsFactoryCall> for QuantCalculatorCalls {
        fn from(var: OptionsFactoryCall) -> Self {
            QuantCalculatorCalls::OptionsFactory(var)
        }
    }
    impl ::std::convert::From<PriceRegistryCall> for QuantCalculatorCalls {
        fn from(var: PriceRegistryCall) -> Self {
            QuantCalculatorCalls::PriceRegistry(var)
        }
    }
    impl ::std::convert::From<StrikeAssetDecimalsCall> for QuantCalculatorCalls {
        fn from(var: StrikeAssetDecimalsCall) -> Self {
            QuantCalculatorCalls::StrikeAssetDecimals(var)
        }
    }
    #[doc = "Container type for all return fields from the `assetsRegistry` function with signature `assetsRegistry()` and selector `[145, 19, 3, 180]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct AssetsRegistryReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `calculateClaimableCollateral` function with signature `calculateClaimableCollateral(uint256,uint256,address)` and selector `[42, 45, 125, 148]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct CalculateClaimableCollateralReturn {
        pub returnable_collateral: ethers::core::types::U256,
        pub collateral_asset: ethers::core::types::Address,
        pub amount_to_claim: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `getCollateralRequirement` function with signature `getCollateralRequirement(address,address,uint256)` and selector `[29, 248, 46, 89]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct GetCollateralRequirementReturn {
        pub collateral: ethers::core::types::Address,
        pub collateral_amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `getExercisePayout` function with signature `getExercisePayout(address,uint256)` and selector `[87, 40, 76, 42]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct GetExercisePayoutReturn {
        pub is_settled: bool,
        pub payout_token: ethers::core::types::Address,
        pub payout_amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `getNeutralizationPayout` function with signature `getNeutralizationPayout(address,address,uint256)` and selector `[9, 156, 168, 114]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct GetNeutralizationPayoutReturn {
        pub collateral_type: ethers::core::types::Address,
        pub collateral_owed: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `optionsDecimals` function with signature `optionsDecimals()` and selector `[132, 147, 206, 193]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct OptionsDecimalsReturn(pub u8);
    #[doc = "Container type for all return fields from the `optionsFactory` function with signature `optionsFactory()` and selector `[230, 110, 242, 196]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct OptionsFactoryReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `priceRegistry` function with signature `priceRegistry()` and selector `[83, 81, 49, 215]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct PriceRegistryReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `strikeAssetDecimals` function with signature `strikeAssetDecimals()` and selector `[193, 50, 86, 97]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct StrikeAssetDecimalsReturn(pub u8);
}
