pub use simpleexternaloptionsfactory_mod::*;
#[allow(clippy::too_many_arguments)]
mod simpleexternaloptionsfactory_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "SimpleExternalOptionsFactory was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static SIMPLEEXTERNALOPTIONSFACTORY_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetsRegistry\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CreateFail\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"assetsRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract CollateralToken\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint88\",\"name\":\"expiryTime\",\"type\":\"uint88\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isCall\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"createOption\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newQToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"newCollateralTokenId\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"qTokenAsCollateral\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint88\",\"name\":\"expiryTime\",\"type\":\"uint88\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isCall\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getCollateralToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint88\",\"name\":\"expiryTime\",\"type\":\"uint88\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isCall\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getQToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"qToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"contract QToken\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"optionsDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"salt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static SIMPLEEXTERNALOPTIONSFACTORY_BYTECODE: ethers::contract::Lazy<
        ethers::core::types::Bytes,
    > = ethers::contract::Lazy::new(|| {
        "0x6101208060405234620000d8576040816200552c803803809162000024828562000117565b833981010312620000d857806200004d60206200004562000054946200013b565b92016200013b565b9062000169565b6040516126fa9081620002df8239608051818181610100015281816103d701526119ff015260a05181818161047a015281816105890152611b43015260c0518181816102ac01528181610376015261199d015260e05181818161023c0152818161039801526119bf0152610100518181816103fe015281816105e40152611a5c0152f35b600080fd5b50634e487b7160e01b600052604160045260246000fd5b6001600160401b0381116200010857604052565b62000112620000dd565b604052565b601f909101601f19168101906001600160401b038211908210176200010857604052565b51906001600160a01b0382168203620000d857565b506040513d6000823e3d90fd5b6000910312620000d857565b601260e0526c524f4c4c412e46494e414e434560981b610100526001600160a01b039182166080526040518062000245612b53808301906001600160401b03821184831017620002ce575b620029d984396101409060608152600e60608201526d145d585b9d08141c9bdd1bd8dbdb60921b608082015260a06020820152600560a0820152640312e302e360dc1b60c082015260e06040820152602660e08201527f68747470733a2f2f746f6b656e732e726f6c6c612e66696e616e63652f7b6964610100820152653e973539b7b760d11b6101208201520190565b03906000f0908115620002be575b8160a05260c05216803b15620000d8576040516308f52ba960e31b8152306004820152906000908290602490829084905af18015620002ae575b620002955750565b80620002a5620002ac92620000f4565b806200015d565b565b620002b862000150565b6200028d565b620002c862000150565b62000253565b620002d8620000dd565b620001b456fe608080604052600436101561001357600080fd5b6000803560e01c9182635c60da1b146100b857505080635ce6524f146100af5780638493cec1146100a6578063911303b41461009d578063acae652d14610094578063b2016bd41461008b578063bfa0b133146100825763e42794e91461007a575b600080fd5b610075610607565b506100756105ad565b5061007561053d565b50610075610359565b50610075610260565b50610075610203565b50610075610150565b3461012457817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101245760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b73ffffffffffffffffffffffffffffffffffffffff81160361007557565b8015150361007557565b5034610075576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100755760043561018d81610128565b60243561019981610128565b604435916101a683610128565b606435926101b384610128565b6084356affffffffffffffffffffff81168103610075576101f19460a435926101db84610146565b60e435956101e887610128565b60c43595611ae2565b60408051928352901515602083015290f35b50346100755760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261007557602060405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346100755760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261007557602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60e09101126100755760043561030681610128565b9060243561031381610128565b9060443561032081610128565b906064356affffffffffffffffffffff81168103610075579060843561034581610146565b9060a4359060c43561035681610128565b90565b5034610075576103fc6103bc61036e366102d0565b9590949391937f0000000000000000000000000000000000000000000000000000000000000000917f00000000000000000000000000000000000000000000000000000000000000006107fc565b73ffffffffffffffffffffffffffffffffffffffff918291827f0000000000000000000000000000000000000000000000000000000000000000166125b7565b7f0000000000000000000000000000000000000000000000000000000000000000916000f5168015610513576040517f1c82a55900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015291602090839060249082906000907f0000000000000000000000000000000000000000000000000000000000000000165af1918215610506575b6000926104d6575b506040805173ffffffffffffffffffffffffffffffffffffffff9290921682526020820192909252f35b6104f891925060203d81116104ff575b6104f081836106a4565b8101906106e5565b90386104ac565b503d6104e6565b61050e6106f4565b6104a4565b60046040517febfef188000000000000000000000000000000000000000000000000000000008152fd5b50346100755760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261007557602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346100755760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100755760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b503461007557604061062761061b366102d0565b95949094939193611992565b73ffffffffffffffffffffffffffffffffffffffff83519216825215156020820152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761069757604052565b61069f61064b565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761069757604052565b90816020910312610075575190565b506040513d6000823e3d90fd5b805160208092019160005b82811061071a575050505090565b83518552938101939281019260010161070c565b61078f7fffffffffffffffffffffff00000000000000000000000000000000000000000095936107897fff0000000000000000000000000000000000000000000000000000000000000093607d9e9b979d9a959c999c610701565b90610701565b9960f81b1689527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000809881809460601b1660018c015260601b1660158a015260601b16602988015260a81b16603d860152151560f81b6048850152604984015260601b1660698201520190565b97949196939096959295606060206040516108168161067b565b8281520152604051967fbb9453a500000000000000000000000000000000000000000000000000000000885273ffffffffffffffffffffffffffffffffffffffff90818a1660048a0152886024816000948594165afa9788156109e7575b819861095c575b505061088685610eff565b9661089d6affffffffffffffffffffff8516611d4c565b9990918a826108ab8a610fff565b90956108b6906117fd565b9290936108c2906110e8565b926108cc86611c40565b906108d7948a610a4f565b6108e090610d0c565b9b6108ea906110e8565b916108f490611c40565b916108fe95610be5565b61090790610d0c565b97886109116109f4565b89815260200152604051998a9960208b019961092c9a61072e565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101825261035690826106a4565b909197503d8083833e61096f81836106a4565b81016080828203126109e357815167ffffffffffffffff908181116109df578261099a918501610e13565b5060208301519081116109db57906109b3918301610e13565b91604082015160ff8116036109d8575060606109d0910151610146565b95388061087b565b80fd5b8380fd5b8480fd5b8280fd5b6109ef6106f4565b610874565b60405190610a018261067b565b565b918091926000905b828210610a23575011610a1c575050565b6000910152565b91508060209183015181860152018291610a0b565b90610a4b60209282815194859201610a03565b0190565b93919594929095604051968795602087017f524f4c4c4100000000000000000000000000000000000000000000000000000090527f2000000000000000000000000000000000000000000000000000000000000000908160258901528051908160268a019160200191610ac192610a03565b870190602682015281519182602783019160200191610adf92610a03565b01602781017f2d00000000000000000000000000000000000000000000000000000000000000905281519182602883019160200191610b1d92610a03565b0160288101610b4b907f2d000000000000000000000000000000000000000000000000000000000000009052565b602901610b5791610a38565b7f20000000000000000000000000000000000000000000000000000000000000008152600101610b8691610a38565b7f20000000000000000000000000000000000000000000000000000000000000008152600101610bb591610a38565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352610a0190836106a4565b610cb6610a01956028600193610ce0969a9995976040519b8c997f524f4c4c4100000000000000000000000000000000000000000000000000000060208c01526026610c628c7f2d000000000000000000000000000000000000000000000000000000000000009687602583015260208151948593019101610a03565b8b01846026820152610c7e825180936020602785019101610a03565b01610c93825180936020602785019101610a03565b01610ca8825180936020602785019101610a03565b019060278201520190610a38565b7f2d0000000000000000000000000000000000000000000000000000000000000081520190610a38565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018452836106a4565b906040519160a0830183811067ffffffffffffffff821117610dbd575b60405260048352602083019260803685378093825192607f8411610d8f579083602081930160045afa15610d65576080019060f81b8151189052565b7f3a008ffa0000000000000000000000000000000000000000000000000000000060005260046000fd5b837f5307a8200000000000000000000000000000000000000000000000000000000060005260045260246000fd5b610dc561064b565b610d29565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209267ffffffffffffffff8111610e06575b01160190565b610e0e61064b565b610e00565b81601f82011215610075578051610e2981610dca565b92610e3760405194856106a4565b81845260208284010111610075576103569160208085019101610a03565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610eb3570190565b610a4b610e55565b80601310610eca575b60130390565b610ed2610e55565b610ec4565b604d8111610ee6575b600a0a90565b610eee610e55565b610ee0565b81198111610eb3570190565b610f15670de0b6b3a76400008083069204611c40565b8115610ffa576000905b600a808406610f3b57610f359192930492610e85565b90610f1f565b50610fc1610f7f61035693610f79610f73610f6e610f929884601210610fed575b610f6885601203610ed7565b90610ef3565b611c40565b91610ebb565b906111f0565b610fbb6040519586946020860190610a38565b7f2e00000000000000000000000000000000000000000000000000000000000000815260010190565b90610a38565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352826106a4565b610ff5610e55565b610f5c565b905090565b1561107657604051906110118261067b565b600182527f43000000000000000000000000000000000000000000000000000000000000006020830152604051916110488361067b565b600483527f43616c6c0000000000000000000000000000000000000000000000000000000060208401529190565b604051906110838261067b565b600182527f50000000000000000000000000000000000000000000000000000000000000006020830152604051916110ba8361067b565b600383527f507574000000000000000000000000000000000000000000000000000000000060208401529190565b60638111611158575b600a6110fc82611c40565b91106111055790565b610356602160405180937f300000000000000000000000000000000000000000000000000000000000000060208301526111488151809260208686019101610a03565b81010360018101845201826106a4565b606490066110f1565b9061116b82610dca565b61117860405191826106a4565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06111a68294610dca565b0190602036910137565b9081518110156111c1570160200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b91907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600191828110611298575b019061122982611161565b916000805b82811061123e5750929450505050565b80849119821161128b575b7fff000000000000000000000000000000000000000000000000000000000000006112768284018a6111b0565b5116831a61128482886111b0565b530161122e565b611293610e55565b611249565b6112a0610e55565b61121e565b604051906112b28261067b565b600382527f44454300000000000000000000000000000000000000000000000000000000006020830152565b604051906112eb8261067b565b600882527f446563656d6265720000000000000000000000000000000000000000000000006020830152565b604051906113248261067b565b600382527f4e4f5600000000000000000000000000000000000000000000000000000000006020830152565b6040519061135d8261067b565b600882527f4e6f76656d6265720000000000000000000000000000000000000000000000006020830152565b604051906113968261067b565b600382527f4f435400000000000000000000000000000000000000000000000000000000006020830152565b604051906113cf8261067b565b600782527f4f63746f626572000000000000000000000000000000000000000000000000006020830152565b604051906114088261067b565b600382527f53455000000000000000000000000000000000000000000000000000000000006020830152565b604051906114418261067b565b600982527f53657074656d62657200000000000000000000000000000000000000000000006020830152565b6040519061147a8261067b565b600382527f41554700000000000000000000000000000000000000000000000000000000006020830152565b604051906114b38261067b565b600682527f41756775737400000000000000000000000000000000000000000000000000006020830152565b604051906114ec8261067b565b600382527f4a554c00000000000000000000000000000000000000000000000000000000006020830152565b604051906115258261067b565b600482527f4a756c79000000000000000000000000000000000000000000000000000000006020830152565b6040519061155e8261067b565b600382527f4a554e00000000000000000000000000000000000000000000000000000000006020830152565b604051906115978261067b565b600482527f4a756e65000000000000000000000000000000000000000000000000000000006020830152565b604051906115d08261067b565b600382527f4d415900000000000000000000000000000000000000000000000000000000006020830152565b604051906116098261067b565b600382527f4d617900000000000000000000000000000000000000000000000000000000006020830152565b604051906116428261067b565b600382527f41505200000000000000000000000000000000000000000000000000000000006020830152565b6040519061167b8261067b565b600582527f417072696c0000000000000000000000000000000000000000000000000000006020830152565b604051906116b48261067b565b600382527f4d415200000000000000000000000000000000000000000000000000000000006020830152565b604051906116ed8261067b565b600582527f4d617263680000000000000000000000000000000000000000000000000000006020830152565b604051906117268261067b565b600382527f46454200000000000000000000000000000000000000000000000000000000006020830152565b6040519061175f8261067b565b600882527f46656272756172790000000000000000000000000000000000000000000000006020830152565b604051906117988261067b565b600382527f4a414e00000000000000000000000000000000000000000000000000000000006020830152565b604051906117d18261067b565b600782527f4a616e75617279000000000000000000000000000000000000000000000000006020830152565b60018103611817575061180e61178b565b906103566117c4565b600281036118315750611828611719565b90610356611752565b6003810361184b57506118426116a7565b906103566116e0565b60048103611865575061185c611635565b9061035661166e565b6005810361187f57506118766115c3565b906103566115fc565b600681036118995750611890611551565b9061035661158a565b600781036118b357506118aa6114df565b90610356611518565b600881036118cd57506118c461146d565b906103566114a6565b600981036118e757506118de6113fb565b90610356611434565b600a810361190157506118f8611389565b906103566113c2565b600b810361191b5750611912611317565b90610356611350565b600c036119335761192a6112a5565b906103566112de565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f7074696f6e735574696c733a20696e76616c6964206d6f6e746800000000006044820152606490fd5b6119e39695949392917f0000000000000000000000000000000000000000000000000000000000000000917f00000000000000000000000000000000000000000000000000000000000000006107fc565b611a2473ffffffffffffffffffffffffffffffffffffffff91827f0000000000000000000000000000000000000000000000000000000000000000166125b7565b902060405160208101917fff0000000000000000000000000000000000000000000000000000000000000083523060601b60218301527f000000000000000000000000000000000000000000000000000000000000000060358301526055820152605581526080810181811067ffffffffffffffff821117611ab0575b60405251902016803b15159091565b611ab861064b565b611aa1565b91908260409103126100755760208251611ad681610128565b92015161035681610128565b91611af4969492989795939198611992565b50604080517f6ed1ff6d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015293821660248501527f0000000000000000000000000000000000000000000000000000000000000000821693611bbe9190602081604481895afa908115611c33575b600091611c15575b508095825180809581947fd94a7e53000000000000000000000000000000000000000000000000000000008352600483019190602083019252565b03915afa908115611c08575b600091611bd9575b5016151590565b611bfa915060403d8111611c01575b611bf281836106a4565b810190611abd565b5038611bd2565b503d611be8565b611c106106f4565b611bca565b611c2d915060203d81116104ff576104f081836106a4565b38611b83565b611c3b6106f4565b611b7b565b8015611d12576000818181805b611cfa5750611c5b81611161565b935b611c675750505090565b8060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9210611ced575b0190600a907fff00000000000000000000000000000000000000000000000000000000000000828206603081198111611ce0575b0160f81b16841a611cd784876111b0565b53049081611c5d565b611ce8610e55565b611cc6565b611cf5610e55565b611c92565b9150611d07600a91610e85565b910480849291611c4d565b50604051611d1f8161067b565b600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b62015180611dbd9104600081129062010bd991817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313811516611ea1575b817f800000000000000000000000000000000000000000000000000000000000000003831216611e94575b01611eae565b611df7611dd5611dcc83612102565b62023ab1900590565b91611df1611dea611de585612185565b611f20565b6004900590565b9061253f565b90611e8e611e30611e2b611e1e611e15611e1087611f81565b612207565b62164b09900590565b94611df1611dea8761227c565b611fe2565b611e89611e5e611e4a611e42846122f1565b61098f900590565b92611df1611e5785612374565b6050900590565b94611e89611e84611e7e611e75600b870596612043565b611df1876123e9565b966124ef565b61246c565b6120a4565b91909192565b611e9c610e55565b611db7565b611ea9610e55565b611d8c565b600081129062253d8c91817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313811516611f13575b817f800000000000000000000000000000000000000000000000000000000000000003831216610eb3570190565b611f1b610e55565b611ee5565b60039060008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313811516611f1357817f800000000000000000000000000000000000000000000000000000000000000003831216610eb3570190565b60019060008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313811516611f1357817f800000000000000000000000000000000000000000000000000000000000000003831216610eb3570190565b601f9060008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313811516611f1357817f800000000000000000000000000000000000000000000000000000000000000003831216610eb3570190565b60029060008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313811516611f1357817f800000000000000000000000000000000000000000000000000000000000000003831216610eb3570190565b60008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313811516611f1357817f800000000000000000000000000000000000000000000000000000000000000003831216610eb3570190565b6001817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04600411600083131616612178575b60017fe000000000000000000000000000000000000000000000000000000000000000821260008312161661216b575b60021b90565b612173610e55565b612165565b612180610e55565b612135565b62023ab16001827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841316166121fa575b60017fffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce283126000841216166121ee570290565b6121f6610e55565b0290565b612202610e55565b6121bb565b610fa06001827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413161661226f575b60017ffff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c83126000841216166121ee570290565b612277610e55565b61223c565b6105b56001827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841316166122e4575b60017fffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa883126000841216166121ee570290565b6122ec610e55565b6122b1565b6001817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04605011600083131616612367575b60017ffe66666666666666666666666666666666666666666666666666666666666667821260008312161661235a575b60500290565b612362610e55565b612354565b61236f610e55565b612324565b61098f6001827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841316166123dc575b60017ffff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f307026883126000841216166121ee570290565b6123e4610e55565b6123a9565b6001817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04600c1160008313161661245f575b60017ff5555555555555555555555555555555555555555555555555555555555555568212600083121616612452575b600c0290565b61245a610e55565b61244c565b612467610e55565b61241c565b6001817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff046064116000831316166124e2575b60017ffeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb982126000831216166124d5575b60640290565b6124dd610e55565b6124cf565b6124ea610e55565b61249f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf907f80000000000000000000000000000000000000000000000000000000000000318112600116610eb3570190565b60008212827f80000000000000000000000000000000000000000000000000000000000000000182128115166125aa575b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182131661259e570390565b6125a6610e55565b0390565b6125b2610e55565b612570565b918151806043810193604051957f610000000000000000000000000000000000000000000000000000000000000087526039830160f01b60018801527f3d81600a3d39f33d3d3d3d363d3d37610000000000000000000000000000000060038801526002830160f01b8060138901527f60373639366100000000000000000000000000000000000000000000000000006015890152601b8801527f013d730000000000000000000000000000000000000000000000000000000000601d88015260601b60208701527f5af43d3d93803e603557fd5bf300000000000000000000000000000000000000603487015281602060418801920160045afa15610d655760418160f01b918501015256fea2646970667358221220209736a9df70106e0c9d8efe1380e070d402249441aaa5ac7c6813b55f7381d164736f6c634300080e00336101408060405234620000dd5762002b53803803809162000021828562000124565b8339810190606081830312620000dd5780516001600160401b039290838111620000dd57816200005391840162000148565b916020810151848111620000dd57826200006f91830162000148565b916040820151948511620000dd5762000095946200008e920162000148565b916200037b565b604051612702908162000451823960805181612036015260a051816120eb015260c05181612007015260e05181612085015261010051816120ab015261012051816120620152f35b600080fd5b50634e487b7160e01b600052604160045260246000fd5b60c081019081106001600160401b038211176200011557604052565b6200011f620000e2565b604052565b601f909101601f19168101906001600160401b038211908210176200011557604052565b9080601f83011215620000dd578151906001600160401b038211620001d1575b6040519260209162000184601f8501601f191684018662000124565b838552828483010111620000dd5782906000905b83838310620001b857505011620001ae57505090565b6000918301015290565b8193508281939201015182828801015201839162000198565b620001db620000e2565b62000168565b90600182811c9216801562000213575b6020831014620001fd57565b634e487b7160e01b600052602260045260246000fd5b91607f1691620001f1565b601f81116200022b575050565b6000906005825260208220906020601f850160051c830194106200026c575b601f0160051c01915b8281106200026057505050565b81815560010162000253565b90925082906200024a565b80519091906001600160401b0381116200036b575b620002a4816200029e600554620001e1565b6200021e565b602080601f8311600114620002e35750819293600092620002d7575b50508160011b916000199060031b1c191617600555565b015190503880620002c0565b6005600052601f198316949091907f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0926000905b8782106200035257505083600195961062000338575b505050811b01600555565b015160001960f88460031b161c191690553880806200032d565b8060018596829496860151815501950193019062000317565b62000375620000e2565b6200028c565b906200044e92916020815191012090602081519101208160e05280610100524660a05260405160208101917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f93848452604083015260608201524660808201523060a082015260a08152620003f081620000f9565b5190206080523060c0526101205260028054336001600160a01b0319821681179092556040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a362000277565b56fe60806040526004361015610013575b600080fd5b60003560e01c8062fdd58e146101a257806301ffc9a7146101995780630e89341c146101905780631c82a559146101875780632eb2c2d61461017e5780633e0291791461017557806347a95d481461016c5780634e1273f4146101635780636ed1ff6d1461015a578063715018a6146101515780637ecebe00146101485780638da5cb5b1461013f578063a22cb46514610136578063b4e60a321461012d578063d94a7e5314610124578063e1ad92211461011b578063e37f5ac714610112578063e985e9c514610109578063f242432a146101005763f2fde38b146100f857600080fd5b61000e6114b5565b5061000e611250565b5061000e6111e6565b5061000e61103b565b5061000e610e7c565b5061000e610e10565b5061000e610d94565b5061000e610c9a565b5061000e610c47565b5061000e610bdd565b5061000e610b33565b5061000e610b11565b5061000e610989565b5061000e6108bc565b5061000e61080b565b5061000e61071f565b5061000e610536565b5061000e6103df565b5061000e61026b565b5061000e6101c9565b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5773ffffffffffffffffffffffffffffffffffffffff60043561021a816101ab565b16600052600060205260406000206024356000526020526020604060002054604051908152f35b7fffffffff0000000000000000000000000000000000000000000000000000000081160361000e57565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760207fffffffff000000000000000000000000000000000000000000000000000000006004356102ca81610241565b167f01ffc9a7000000000000000000000000000000000000000000000000000000008114908115610332575b8115610308575b506040519015158152f35b7f0e89341c00000000000000000000000000000000000000000000000000000000915014386102fd565b7fd9b67a2600000000000000000000000000000000000000000000000000000000811491506102f6565b91908251928382526000905b8482106103b35750601f84602094957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093116103a6575b0116010190565b600085828601015261039f565b90602090818082850101519082860101520190610368565b9060206103dc92818152019061035c565b90565b503461000e576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576040519060009060055460019181831c9280831692831561052c575b82851084146104ff5784875260208701939081156104c7575060011461046d575b6104698661045d81880382611746565b604051918291826103cb565b0390f35b6005600090815294509192917f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b8386106104b6575050509101905061045d826104693861044d565b80548587015294820194810161049b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168452505001915061045d9050826104693861044d565b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526022600452fd5b93607f169361042c565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57610469600435610575816101ab565b73ffffffffffffffffffffffffffffffffffffffff8060025416331480156106b3575b6105a19061160e565b6106656105ad83611b40565b92600183604051926105be846116c9565b16938483526020830160008152866000526003602052610621826040600020955116859073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b511691019073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b7f7b88fa12e0eaf025be34548ca7c53f68b4ac70c4d36664baf147c0d4226335f3604051806106a08582919060206040840193600081520152565b0390a26040519081529081906020820190565b5060065481163314610598565b9181601f8401121561000e5782359167ffffffffffffffff831161000e576020808501948460051b01011161000e57565b9181601f8401121561000e5782359167ffffffffffffffff831161000e576020838186019501011161000e57565b503461000e5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760043561075b816101ab565b602435610767816101ab565b67ffffffffffffffff9160443583811161000e576107899036906004016106c0565b9060643585811161000e576107a29036906004016106c0565b92909160843596871161000e576107c06107c89736906004016106f1565b969095612449565b005b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc606091011261000e57600435610800816101ab565b906024359060443590565b503461000e576108a761081d366107ca565b9173ffffffffffffffffffffffffffffffffffffffff90610843826002541633146115a9565b16907fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6260009485948486528560205260408620848752602052604086208181548181106108af575b0390556040805194855260208501919091523393918291820190565b0390a4604051f35b6108b7612176565b61088b565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576004356108f8816101ab565b73ffffffffffffffffffffffffffffffffffffffff9061091d826002541633146115a9565b167fffffffffffffffffffffffff000000000000000000000000000000000000000060065416176006556000604051f35b6020908160408183019282815285518094520193019160005b828110610975575050505090565b835185529381019392810192600101610967565b503461000e576040807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5767ffffffffffffffff9060043582811161000e576109dc9036906004016106c0565b91909260243590811161000e576109f79036906004016106c0565b9390610a048585146122d0565b610a0d84612649565b93610a1a84519586611746565b8085527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610a4782612649565b016020903682880137600091825b818110610a69578651806104698a8261094e565b8073ffffffffffffffffffffffffffffffffffffffff610a8c600193858a612365565b35610a96816101ab565b168552848452610abc888620610aad838d8a612365565b35600052602052604060002090565b54610ac7828b61266a565b5201610a55565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc604091011261000e57600435610b04816101ab565b906024356103dc816101ab565b503461000e576020610b2b610b2536610ace565b90611b89565b604051908152f35b503461000e576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610bda576002547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff821691610bab3384146115a9565b1660025581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5773ffffffffffffffffffffffffffffffffffffffff600435610c2e816101ab565b1660005260046020526020604060002054604051908152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60025416604051908152f35b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435610cd6816101ab565b6024358015159182820361000e57610d6473ffffffffffffffffffffffffffffffffffffffff92336000526001602052610d348360406000209073ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b9060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083541691151516179055565b60405192835216907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b503461000e576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435610dd1816101ab565b60243590610dde826101ab565b604435801515810361000e5760a43560ff8116810361000e576107c89360e4359360c43593608435926064359261193c565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435600052600360205260408060002073ffffffffffffffffffffffffffffffffffffffff6001818354169201541682519182526020820152f35b503461000e57610e8b36610ace565b73ffffffffffffffffffffffffffffffffffffffff80600254163314801561102e575b610eb79061160e565b610ec18284611b89565b918184169181168214610f8457827f7b88fa12e0eaf025be34548ca7c53f68b4ac70c4d36664baf147c0d4226335f391610f5461046996610f1f610f03611787565b73ffffffffffffffffffffffffffffffffffffffff9092168252565b73ffffffffffffffffffffffffffffffffffffffff83166020820152610f4f846000526003602052604060002090565b611796565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252602082019290925290819081016106a0565b60a46040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604960248201527f436f6c6c61746572616c546f6b656e3a2043616e206f6e6c792063726561746560448201527f206120636f6c6c61746572616c20746f6b656e2077697468206469666665726560648201527f6e7420746f6b656e7300000000000000000000000000000000000000000000006084820152fd5b5060065481163314610eae565b503461000e5761112861104d366107ca565b92919073ffffffffffffffffffffffffffffffffffffffff93611075856002541633146115a9565b60405190611082826116f2565b6000958683526110c5846110b68773ffffffffffffffffffffffffffffffffffffffff166000526000602052604060002090565b90600052602052604060002090565b6110d08382546121bd565b905584169384876040517fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62339180611116888b8360209093929193604081019481520152565b0390a43b61112d57505050151561226b565b604051f35b611190917fffffffff000000000000000000000000000000000000000000000000000000009394602092886040518096819582947ff23a6e61000000000000000000000000000000000000000000000000000000009b8c8552336004860161268c565b03925af19081156111d9575b85916111ab575b50161461226b565b6111cc915060203d81116111d2575b6111c48183611746565b8101906121d5565b386111a3565b503d6111ba565b6111e1611eaf565b61119c565b503461000e57602060ff61124473ffffffffffffffffffffffffffffffffffffffff61121136610ace565b91166000526001845260406000209073ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b54166040519015158152f35b503461000e5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760043561128c816101ab565b602435611298816101ab565b6084359160443560643567ffffffffffffffff851161000e576112c26107c89536906004016106f1565b9173ffffffffffffffffffffffffffffffffffffffff9586861696873314801561144d575b6112f090612111565b61131e866110b68973ffffffffffffffffffffffffffffffffffffffff166000526000602052604060002090565b6113298482546121a6565b9055611359866110b68473ffffffffffffffffffffffffffffffffffffffff166000526000602052604060002090565b6113648482546121bd565b9055811680976040517fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f623391806113a9888c8360209093929193604081019481520152565b0390a4600094903b6113c257505050505050151561226b565b9560209291857fffffffff000000000000000000000000000000000000000000000000000000009798611427604051978896879586947ff23a6e61000000000000000000000000000000000000000000000000000000009e8f87523360048801612229565b03925af1918215611440575b916111ab5750161461226b565b611448611eaf565b611433565b506112f06114ae6114a7336114828b73ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b9073ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b5460ff1690565b90506112e7565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576004356114f1816101ab565b73ffffffffffffffffffffffffffffffffffffffff611515816002541633146115a9565b811615611525576107c890611bd1565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b156115b057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b1561161557565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f436f6c6c61746572616c546f6b656e3a2063616c6c6572206973206e6f74206f60448201527f776e6572206f72204f7074696f6e73466163746f7279000000000000000000006064820152fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176116e557604052565b6116ed611699565b604052565b6020810190811067ffffffffffffffff8211176116e557604052565b6060810190811067ffffffffffffffff8211176116e557604052565b60c0810190811067ffffffffffffffff8211176116e557604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176116e557604052565b60405190611794826116c9565b565b815181547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9182161782556117949260019190602001511691019073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b1561182d57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f436f6c6c61746572616c546f6b656e3a206578706972656420646561646c696e60448201527f65000000000000000000000000000000000000000000000000000000000000006064820152fd5b156118b857565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f436f6c6c61746572616c546f6b656e3a20696e76616c6964207369676e61747560448201527f72650000000000000000000000000000000000000000000000000000000000006064820152fd5b949092939695919673ffffffffffffffffffffffffffffffffffffffff94858716978860005260046020526040600020548203611ae25787611a7b8a89611a74611482958f999a611ad29b7f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319f611a6f908f9b611a678f91610d349f8f9190611a3b916119cb42831015611826565b60405195869460208601988991959493909260a09360c08401977f8733d126a676f1e83270eccfbe576f65af55d3ff784c4dc4884be48932f47c81855273ffffffffffffffffffffffffffffffffffffffff80921660208601521660408401521515606083015260808201520152565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282611746565b519020611f7f565b611c40565b16146118b1565b611aa58173ffffffffffffffffffffffffffffffffffffffff166000526004602052604060002090565b8054600101905573ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b60405194151585521692602090a3565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f436f6c6c61746572616c546f6b656e3a20696e76616c6964206e6f6e636500006044820152fd5b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000602082019260601b1682526000603482015260288152611b838161170e565b51902090565b6040519060208201927fffffffffffffffffffffffffffffffffffffffff000000000000000000000000809260601b16845260601b16603482015260288152611b838161170e565b6002549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600255167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b916103dc9391611c4f93611ebc565b919091611c90565b60051115611c6157565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b611c9981611c57565b80611ca15750565b611caa81611c57565b60018103611d11576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b611d1a81611c57565b60028103611d81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b611d8a81611c57565b60038103611e17576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608490fd5b80611e23600492611c57565b14611e2a57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608490fd5b506040513d6000823e3d90fd5b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311611f735760ff16601b81141580611f68575b611f5c579160809493916020936040519384528484015260408301526060820152600093849182805260015afa15611f4f575b815173ffffffffffffffffffffffffffffffffffffffff811615611f49579190565b50600190565b611f57611eaf565b611f27565b50505050600090600490565b50601c811415611ef4565b50505050600090600390565b611f87611ff0565b906040519060208201927f1901000000000000000000000000000000000000000000000000000000000000845260228301526042820152604281526080810181811067ffffffffffffffff821117611fe3575b60405251902090565b611feb611699565b611fda565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163014806120e8575b15612058577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f000000000000000000000000000000000000000000000000000000000000000082527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a08152611b838161172a565b507f0000000000000000000000000000000000000000000000000000000000000000461461202f565b1561211857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181106121b1570390565b6121b9612176565b0390565b811981116121c9570190565b6121d1612176565b0190565b9081602091031261000e57516103dc81610241565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b91926103dc96949160a09473ffffffffffffffffffffffffffffffffffffffff80921685521660208401526040830152606082015281608082015201916121ea565b1561227257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f554e534146455f524543495049454e54000000000000000000000000000000006044820152fd5b156122d757565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4c454e4754485f4d49534d4154434800000000000000000000000000000000006044820152fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9190811015612376575b60051b0190565b61237e612335565b61236f565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831161000e5760209260051b80928483013701016000815290565b92906123dd906103dc9593604086526040860191612383565b926020818503910152612383565b96949261243b9461242d926103dc9a989473ffffffffffffffffffffffffffffffffffffffff8092168b521660208a015260a060408a015260a0890191612383565b918683036060880152612383565b9260808185039101526121ea565b9095939291949661245b8884146122d0565b73ffffffffffffffffffffffffffffffffffffffff9687831697883314801561260d575b61248890612111565b8760005b8b87808310612575575050505081168098887f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb6124d38d6040519182918c8c3397856123c4565b0390a4600095903b6124f257505050505050506117949150151561226b565b6040979596975198899586957fbc197c81000000000000000000000000000000000000000000000000000000009a8b885233966004890197612533986123eb565b0381845a94602095f1611794937fffffffff0000000000000000000000000000000000000000000000000000000092821561144057916111ab5750161461226b565b6125fb6125948461258c8161260395600199612365565b35948d612365565b35926125c4816110b68c73ffffffffffffffffffffffffffffffffffffffff166000526000602052604060002090565b6125cf8582546121a6565b90556110b68873ffffffffffffffffffffffffffffffffffffffff166000526000602052604060002090565b9182546121bd565b905501889061248c565b506124886126426114a7336114828873ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b905061247f565b60209067ffffffffffffffff81116126625760051b0190565b61237e611699565b602091815181101561267f575b60051b010190565b612687612335565b612677565b909260a09273ffffffffffffffffffffffffffffffffffffffff6103dc96951683526000602084015260408301526060820152816080820152019061035c56fea2646970667358221220f099cd28067f8899fd000f20f055add35871b2ed4de644b577d8b9c725c0226a64736f6c634300080e0033" . parse () . expect ("invalid bytecode")
    });
    pub struct SimpleExternalOptionsFactory<M>(ethers::contract::Contract<M>);
    impl<M> Clone for SimpleExternalOptionsFactory<M> {
        fn clone(&self) -> Self {
            SimpleExternalOptionsFactory(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for SimpleExternalOptionsFactory<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for SimpleExternalOptionsFactory<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(SimpleExternalOptionsFactory))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> SimpleExternalOptionsFactory<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(
                address.into(),
                SIMPLEEXTERNALOPTIONSFACTORY_ABI.clone(),
                client,
            )
            .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                SIMPLEEXTERNALOPTIONSFACTORY_ABI.clone(),
                SIMPLEEXTERNALOPTIONSFACTORY_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `assetsRegistry` (0x911303b4) function"]
        pub fn assets_registry(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([145, 19, 3, 180], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `collateralToken` (0xb2016bd4) function"]
        pub fn collateral_token(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([178, 1, 107, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `createOption` (0xacae652d) function"]
        pub fn create_option(
            &self,
            underlying_asset: ethers::core::types::Address,
            strike_asset: ethers::core::types::Address,
            oracle: ethers::core::types::Address,
            expiry_time: u128,
            is_call: bool,
            strike_price: ethers::core::types::U256,
            controller: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (ethers::core::types::Address, ethers::core::types::U256),
        > {
            self.0
                .method_hash(
                    [172, 174, 101, 45],
                    (
                        underlying_asset,
                        strike_asset,
                        oracle,
                        expiry_time,
                        is_call,
                        strike_price,
                        controller,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getCollateralToken` (0x5ce6524f) function"]
        pub fn get_collateral_token(
            &self,
            underlying_asset: ethers::core::types::Address,
            q_token_as_collateral: ethers::core::types::Address,
            strike_asset: ethers::core::types::Address,
            oracle: ethers::core::types::Address,
            expiry_time: u128,
            is_call: bool,
            strike_price: ethers::core::types::U256,
            controller: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, (ethers::core::types::U256, bool)>
        {
            self.0
                .method_hash(
                    [92, 230, 82, 79],
                    (
                        underlying_asset,
                        q_token_as_collateral,
                        strike_asset,
                        oracle,
                        expiry_time,
                        is_call,
                        strike_price,
                        controller,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getQToken` (0xe42794e9) function"]
        pub fn get_q_token(
            &self,
            underlying_asset: ethers::core::types::Address,
            strike_asset: ethers::core::types::Address,
            oracle: ethers::core::types::Address,
            expiry_time: u128,
            is_call: bool,
            strike_price: ethers::core::types::U256,
            controller: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, (ethers::core::types::Address, bool)>
        {
            self.0
                .method_hash(
                    [228, 39, 148, 233],
                    (
                        underlying_asset,
                        strike_asset,
                        oracle,
                        expiry_time,
                        is_call,
                        strike_price,
                        controller,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `implementation` (0x5c60da1b) function"]
        pub fn implementation(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([92, 96, 218, 27], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `optionsDecimals` (0x8493cec1) function"]
        pub fn options_decimals(&self) -> ethers::contract::builders::ContractCall<M, u8> {
            self.0
                .method_hash([132, 147, 206, 193], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `salt` (0xbfa0b133) function"]
        pub fn salt(&self) -> ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([191, 160, 177, 51], ())
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>>
        for SimpleExternalOptionsFactory<M>
    {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[doc = "Container type for all input parameters for the `assetsRegistry`function with signature `assetsRegistry()` and selector `[145, 19, 3, 180]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "assetsRegistry", abi = "assetsRegistry()")]
    pub struct AssetsRegistryCall;
    #[doc = "Container type for all input parameters for the `collateralToken`function with signature `collateralToken()` and selector `[178, 1, 107, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "collateralToken", abi = "collateralToken()")]
    pub struct CollateralTokenCall;
    #[doc = "Container type for all input parameters for the `createOption`function with signature `createOption(address,address,address,uint88,bool,uint256,address)` and selector `[172, 174, 101, 45]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "createOption",
        abi = "createOption(address,address,address,uint88,bool,uint256,address)"
    )]
    pub struct CreateOptionCall {
        pub underlying_asset: ethers::core::types::Address,
        pub strike_asset: ethers::core::types::Address,
        pub oracle: ethers::core::types::Address,
        pub expiry_time: u128,
        pub is_call: bool,
        pub strike_price: ethers::core::types::U256,
        pub controller: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getCollateralToken`function with signature `getCollateralToken(address,address,address,address,uint88,bool,uint256,address)` and selector `[92, 230, 82, 79]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "getCollateralToken",
        abi = "getCollateralToken(address,address,address,address,uint88,bool,uint256,address)"
    )]
    pub struct GetCollateralTokenCall {
        pub underlying_asset: ethers::core::types::Address,
        pub q_token_as_collateral: ethers::core::types::Address,
        pub strike_asset: ethers::core::types::Address,
        pub oracle: ethers::core::types::Address,
        pub expiry_time: u128,
        pub is_call: bool,
        pub strike_price: ethers::core::types::U256,
        pub controller: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getQToken`function with signature `getQToken(address,address,address,uint88,bool,uint256,address)` and selector `[228, 39, 148, 233]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "getQToken",
        abi = "getQToken(address,address,address,uint88,bool,uint256,address)"
    )]
    pub struct GetQTokenCall {
        pub underlying_asset: ethers::core::types::Address,
        pub strike_asset: ethers::core::types::Address,
        pub oracle: ethers::core::types::Address,
        pub expiry_time: u128,
        pub is_call: bool,
        pub strike_price: ethers::core::types::U256,
        pub controller: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `implementation`function with signature `implementation()` and selector `[92, 96, 218, 27]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "implementation", abi = "implementation()")]
    pub struct ImplementationCall;
    #[doc = "Container type for all input parameters for the `optionsDecimals`function with signature `optionsDecimals()` and selector `[132, 147, 206, 193]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "optionsDecimals", abi = "optionsDecimals()")]
    pub struct OptionsDecimalsCall;
    #[doc = "Container type for all input parameters for the `salt`function with signature `salt()` and selector `[191, 160, 177, 51]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "salt", abi = "salt()")]
    pub struct SaltCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum SimpleExternalOptionsFactoryCalls {
        AssetsRegistry(AssetsRegistryCall),
        CollateralToken(CollateralTokenCall),
        CreateOption(CreateOptionCall),
        GetCollateralToken(GetCollateralTokenCall),
        GetQToken(GetQTokenCall),
        Implementation(ImplementationCall),
        OptionsDecimals(OptionsDecimalsCall),
        Salt(SaltCall),
    }
    impl ethers::core::abi::AbiDecode for SimpleExternalOptionsFactoryCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <AssetsRegistryCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SimpleExternalOptionsFactoryCalls::AssetsRegistry(decoded));
            }
            if let Ok(decoded) =
                <CollateralTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SimpleExternalOptionsFactoryCalls::CollateralToken(decoded));
            }
            if let Ok(decoded) =
                <CreateOptionCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SimpleExternalOptionsFactoryCalls::CreateOption(decoded));
            }
            if let Ok(decoded) =
                <GetCollateralTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SimpleExternalOptionsFactoryCalls::GetCollateralToken(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <GetQTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SimpleExternalOptionsFactoryCalls::GetQToken(decoded));
            }
            if let Ok(decoded) =
                <ImplementationCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SimpleExternalOptionsFactoryCalls::Implementation(decoded));
            }
            if let Ok(decoded) =
                <OptionsDecimalsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SimpleExternalOptionsFactoryCalls::OptionsDecimals(decoded));
            }
            if let Ok(decoded) = <SaltCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(SimpleExternalOptionsFactoryCalls::Salt(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for SimpleExternalOptionsFactoryCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                SimpleExternalOptionsFactoryCalls::AssetsRegistry(element) => element.encode(),
                SimpleExternalOptionsFactoryCalls::CollateralToken(element) => element.encode(),
                SimpleExternalOptionsFactoryCalls::CreateOption(element) => element.encode(),
                SimpleExternalOptionsFactoryCalls::GetCollateralToken(element) => element.encode(),
                SimpleExternalOptionsFactoryCalls::GetQToken(element) => element.encode(),
                SimpleExternalOptionsFactoryCalls::Implementation(element) => element.encode(),
                SimpleExternalOptionsFactoryCalls::OptionsDecimals(element) => element.encode(),
                SimpleExternalOptionsFactoryCalls::Salt(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for SimpleExternalOptionsFactoryCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                SimpleExternalOptionsFactoryCalls::AssetsRegistry(element) => element.fmt(f),
                SimpleExternalOptionsFactoryCalls::CollateralToken(element) => element.fmt(f),
                SimpleExternalOptionsFactoryCalls::CreateOption(element) => element.fmt(f),
                SimpleExternalOptionsFactoryCalls::GetCollateralToken(element) => element.fmt(f),
                SimpleExternalOptionsFactoryCalls::GetQToken(element) => element.fmt(f),
                SimpleExternalOptionsFactoryCalls::Implementation(element) => element.fmt(f),
                SimpleExternalOptionsFactoryCalls::OptionsDecimals(element) => element.fmt(f),
                SimpleExternalOptionsFactoryCalls::Salt(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<AssetsRegistryCall> for SimpleExternalOptionsFactoryCalls {
        fn from(var: AssetsRegistryCall) -> Self {
            SimpleExternalOptionsFactoryCalls::AssetsRegistry(var)
        }
    }
    impl ::std::convert::From<CollateralTokenCall> for SimpleExternalOptionsFactoryCalls {
        fn from(var: CollateralTokenCall) -> Self {
            SimpleExternalOptionsFactoryCalls::CollateralToken(var)
        }
    }
    impl ::std::convert::From<CreateOptionCall> for SimpleExternalOptionsFactoryCalls {
        fn from(var: CreateOptionCall) -> Self {
            SimpleExternalOptionsFactoryCalls::CreateOption(var)
        }
    }
    impl ::std::convert::From<GetCollateralTokenCall> for SimpleExternalOptionsFactoryCalls {
        fn from(var: GetCollateralTokenCall) -> Self {
            SimpleExternalOptionsFactoryCalls::GetCollateralToken(var)
        }
    }
    impl ::std::convert::From<GetQTokenCall> for SimpleExternalOptionsFactoryCalls {
        fn from(var: GetQTokenCall) -> Self {
            SimpleExternalOptionsFactoryCalls::GetQToken(var)
        }
    }
    impl ::std::convert::From<ImplementationCall> for SimpleExternalOptionsFactoryCalls {
        fn from(var: ImplementationCall) -> Self {
            SimpleExternalOptionsFactoryCalls::Implementation(var)
        }
    }
    impl ::std::convert::From<OptionsDecimalsCall> for SimpleExternalOptionsFactoryCalls {
        fn from(var: OptionsDecimalsCall) -> Self {
            SimpleExternalOptionsFactoryCalls::OptionsDecimals(var)
        }
    }
    impl ::std::convert::From<SaltCall> for SimpleExternalOptionsFactoryCalls {
        fn from(var: SaltCall) -> Self {
            SimpleExternalOptionsFactoryCalls::Salt(var)
        }
    }
}
