pub use simple_options_factory::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod simple_options_factory {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "SimpleOptionsFactory was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static SIMPLEOPTIONSFACTORY_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers :: core :: utils :: __serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetsRegistry\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"assetsRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract CollateralToken\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint88\",\"name\":\"expiryTime\",\"type\":\"uint88\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isCall\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"createOption\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newQToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"newCollateralTokenId\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"qTokenAsCollateral\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint88\",\"name\":\"expiryTime\",\"type\":\"uint88\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isCall\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getCollateralToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"strikeAsset\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint88\",\"name\":\"expiryTime\",\"type\":\"uint88\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isCall\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getQToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"qToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"contract QToken\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"optionsDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"salt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static SIMPLEOPTIONSFACTORY_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "" . parse () . expect ("invalid bytecode")
        });
    pub struct SimpleOptionsFactory<M>(ethers::contract::Contract<M>);
    impl<M> Clone for SimpleOptionsFactory<M> {
        fn clone(&self) -> Self {
            SimpleOptionsFactory(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for SimpleOptionsFactory<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for SimpleOptionsFactory<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(SimpleOptionsFactory))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> SimpleOptionsFactory<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(
                address.into(),
                SIMPLEOPTIONSFACTORY_ABI.clone(),
                client,
            )
            .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                SIMPLEOPTIONSFACTORY_ABI.clone(),
                SIMPLEOPTIONSFACTORY_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `assetsRegistry` (0x911303b4) function"]
        pub fn assets_registry(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([145, 19, 3, 180], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `collateralToken` (0xb2016bd4) function"]
        pub fn collateral_token(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([178, 1, 107, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `createOption` (0xacae652d) function"]
        pub fn create_option(
            &self,
            underlying_asset: ethers::core::types::Address,
            strike_asset: ethers::core::types::Address,
            oracle: ethers::core::types::Address,
            expiry_time: u128,
            is_call: bool,
            strike_price: ethers::core::types::U256,
            controller: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (ethers::core::types::Address, ethers::core::types::U256),
        > {
            self.0
                .method_hash(
                    [172, 174, 101, 45],
                    (
                        underlying_asset,
                        strike_asset,
                        oracle,
                        expiry_time,
                        is_call,
                        strike_price,
                        controller,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getCollateralToken` (0x5ce6524f) function"]
        pub fn get_collateral_token(
            &self,
            underlying_asset: ethers::core::types::Address,
            q_token_as_collateral: ethers::core::types::Address,
            strike_asset: ethers::core::types::Address,
            oracle: ethers::core::types::Address,
            expiry_time: u128,
            is_call: bool,
            strike_price: ethers::core::types::U256,
            controller: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, (ethers::core::types::U256, bool)>
        {
            self.0
                .method_hash(
                    [92, 230, 82, 79],
                    (
                        underlying_asset,
                        q_token_as_collateral,
                        strike_asset,
                        oracle,
                        expiry_time,
                        is_call,
                        strike_price,
                        controller,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getQToken` (0xe42794e9) function"]
        pub fn get_q_token(
            &self,
            underlying_asset: ethers::core::types::Address,
            strike_asset: ethers::core::types::Address,
            oracle: ethers::core::types::Address,
            expiry_time: u128,
            is_call: bool,
            strike_price: ethers::core::types::U256,
            controller: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, (ethers::core::types::Address, bool)>
        {
            self.0
                .method_hash(
                    [228, 39, 148, 233],
                    (
                        underlying_asset,
                        strike_asset,
                        oracle,
                        expiry_time,
                        is_call,
                        strike_price,
                        controller,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `implementation` (0x5c60da1b) function"]
        pub fn implementation(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([92, 96, 218, 27], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `optionsDecimals` (0x8493cec1) function"]
        pub fn options_decimals(&self) -> ethers::contract::builders::ContractCall<M, u8> {
            self.0
                .method_hash([132, 147, 206, 193], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `salt` (0xbfa0b133) function"]
        pub fn salt(&self) -> ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([191, 160, 177, 51], ())
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>>
        for SimpleOptionsFactory<M>
    {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[doc = "Container type for all input parameters for the `assetsRegistry` function with signature `assetsRegistry()` and selector `[145, 19, 3, 180]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "assetsRegistry", abi = "assetsRegistry()")]
    pub struct AssetsRegistryCall;
    #[doc = "Container type for all input parameters for the `collateralToken` function with signature `collateralToken()` and selector `[178, 1, 107, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "collateralToken", abi = "collateralToken()")]
    pub struct CollateralTokenCall;
    #[doc = "Container type for all input parameters for the `createOption` function with signature `createOption(address,address,address,uint88,bool,uint256,address)` and selector `[172, 174, 101, 45]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "createOption",
        abi = "createOption(address,address,address,uint88,bool,uint256,address)"
    )]
    pub struct CreateOptionCall {
        pub underlying_asset: ethers::core::types::Address,
        pub strike_asset: ethers::core::types::Address,
        pub oracle: ethers::core::types::Address,
        pub expiry_time: u128,
        pub is_call: bool,
        pub strike_price: ethers::core::types::U256,
        pub controller: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getCollateralToken` function with signature `getCollateralToken(address,address,address,address,uint88,bool,uint256,address)` and selector `[92, 230, 82, 79]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "getCollateralToken",
        abi = "getCollateralToken(address,address,address,address,uint88,bool,uint256,address)"
    )]
    pub struct GetCollateralTokenCall {
        pub underlying_asset: ethers::core::types::Address,
        pub q_token_as_collateral: ethers::core::types::Address,
        pub strike_asset: ethers::core::types::Address,
        pub oracle: ethers::core::types::Address,
        pub expiry_time: u128,
        pub is_call: bool,
        pub strike_price: ethers::core::types::U256,
        pub controller: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getQToken` function with signature `getQToken(address,address,address,uint88,bool,uint256,address)` and selector `[228, 39, 148, 233]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "getQToken",
        abi = "getQToken(address,address,address,uint88,bool,uint256,address)"
    )]
    pub struct GetQTokenCall {
        pub underlying_asset: ethers::core::types::Address,
        pub strike_asset: ethers::core::types::Address,
        pub oracle: ethers::core::types::Address,
        pub expiry_time: u128,
        pub is_call: bool,
        pub strike_price: ethers::core::types::U256,
        pub controller: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `implementation` function with signature `implementation()` and selector `[92, 96, 218, 27]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "implementation", abi = "implementation()")]
    pub struct ImplementationCall;
    #[doc = "Container type for all input parameters for the `optionsDecimals` function with signature `optionsDecimals()` and selector `[132, 147, 206, 193]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "optionsDecimals", abi = "optionsDecimals()")]
    pub struct OptionsDecimalsCall;
    #[doc = "Container type for all input parameters for the `salt` function with signature `salt()` and selector `[191, 160, 177, 51]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "salt", abi = "salt()")]
    pub struct SaltCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum SimpleOptionsFactoryCalls {
        AssetsRegistry(AssetsRegistryCall),
        CollateralToken(CollateralTokenCall),
        CreateOption(CreateOptionCall),
        GetCollateralToken(GetCollateralTokenCall),
        GetQToken(GetQTokenCall),
        Implementation(ImplementationCall),
        OptionsDecimals(OptionsDecimalsCall),
        Salt(SaltCall),
    }
    impl ethers::core::abi::AbiDecode for SimpleOptionsFactoryCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <AssetsRegistryCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SimpleOptionsFactoryCalls::AssetsRegistry(decoded));
            }
            if let Ok(decoded) =
                <CollateralTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SimpleOptionsFactoryCalls::CollateralToken(decoded));
            }
            if let Ok(decoded) =
                <CreateOptionCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SimpleOptionsFactoryCalls::CreateOption(decoded));
            }
            if let Ok(decoded) =
                <GetCollateralTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SimpleOptionsFactoryCalls::GetCollateralToken(decoded));
            }
            if let Ok(decoded) =
                <GetQTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SimpleOptionsFactoryCalls::GetQToken(decoded));
            }
            if let Ok(decoded) =
                <ImplementationCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SimpleOptionsFactoryCalls::Implementation(decoded));
            }
            if let Ok(decoded) =
                <OptionsDecimalsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SimpleOptionsFactoryCalls::OptionsDecimals(decoded));
            }
            if let Ok(decoded) = <SaltCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(SimpleOptionsFactoryCalls::Salt(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for SimpleOptionsFactoryCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                SimpleOptionsFactoryCalls::AssetsRegistry(element) => element.encode(),
                SimpleOptionsFactoryCalls::CollateralToken(element) => element.encode(),
                SimpleOptionsFactoryCalls::CreateOption(element) => element.encode(),
                SimpleOptionsFactoryCalls::GetCollateralToken(element) => element.encode(),
                SimpleOptionsFactoryCalls::GetQToken(element) => element.encode(),
                SimpleOptionsFactoryCalls::Implementation(element) => element.encode(),
                SimpleOptionsFactoryCalls::OptionsDecimals(element) => element.encode(),
                SimpleOptionsFactoryCalls::Salt(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for SimpleOptionsFactoryCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                SimpleOptionsFactoryCalls::AssetsRegistry(element) => element.fmt(f),
                SimpleOptionsFactoryCalls::CollateralToken(element) => element.fmt(f),
                SimpleOptionsFactoryCalls::CreateOption(element) => element.fmt(f),
                SimpleOptionsFactoryCalls::GetCollateralToken(element) => element.fmt(f),
                SimpleOptionsFactoryCalls::GetQToken(element) => element.fmt(f),
                SimpleOptionsFactoryCalls::Implementation(element) => element.fmt(f),
                SimpleOptionsFactoryCalls::OptionsDecimals(element) => element.fmt(f),
                SimpleOptionsFactoryCalls::Salt(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<AssetsRegistryCall> for SimpleOptionsFactoryCalls {
        fn from(var: AssetsRegistryCall) -> Self {
            SimpleOptionsFactoryCalls::AssetsRegistry(var)
        }
    }
    impl ::std::convert::From<CollateralTokenCall> for SimpleOptionsFactoryCalls {
        fn from(var: CollateralTokenCall) -> Self {
            SimpleOptionsFactoryCalls::CollateralToken(var)
        }
    }
    impl ::std::convert::From<CreateOptionCall> for SimpleOptionsFactoryCalls {
        fn from(var: CreateOptionCall) -> Self {
            SimpleOptionsFactoryCalls::CreateOption(var)
        }
    }
    impl ::std::convert::From<GetCollateralTokenCall> for SimpleOptionsFactoryCalls {
        fn from(var: GetCollateralTokenCall) -> Self {
            SimpleOptionsFactoryCalls::GetCollateralToken(var)
        }
    }
    impl ::std::convert::From<GetQTokenCall> for SimpleOptionsFactoryCalls {
        fn from(var: GetQTokenCall) -> Self {
            SimpleOptionsFactoryCalls::GetQToken(var)
        }
    }
    impl ::std::convert::From<ImplementationCall> for SimpleOptionsFactoryCalls {
        fn from(var: ImplementationCall) -> Self {
            SimpleOptionsFactoryCalls::Implementation(var)
        }
    }
    impl ::std::convert::From<OptionsDecimalsCall> for SimpleOptionsFactoryCalls {
        fn from(var: OptionsDecimalsCall) -> Self {
            SimpleOptionsFactoryCalls::OptionsDecimals(var)
        }
    }
    impl ::std::convert::From<SaltCall> for SimpleOptionsFactoryCalls {
        fn from(var: SaltCall) -> Self {
            SimpleOptionsFactoryCalls::Salt(var)
        }
    }
    #[doc = "Container type for all return fields from the `assetsRegistry` function with signature `assetsRegistry()` and selector `[145, 19, 3, 180]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct AssetsRegistryReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `collateralToken` function with signature `collateralToken()` and selector `[178, 1, 107, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct CollateralTokenReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `createOption` function with signature `createOption(address,address,address,uint88,bool,uint256,address)` and selector `[172, 174, 101, 45]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct CreateOptionReturn {
        pub new_q_token: ethers::core::types::Address,
        pub new_collateral_token_id: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `getCollateralToken` function with signature `getCollateralToken(address,address,address,address,uint88,bool,uint256,address)` and selector `[92, 230, 82, 79]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct GetCollateralTokenReturn {
        pub id: ethers::core::types::U256,
        pub exists: bool,
    }
    #[doc = "Container type for all return fields from the `getQToken` function with signature `getQToken(address,address,address,uint88,bool,uint256,address)` and selector `[228, 39, 148, 233]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct GetQTokenReturn {
        pub q_token: ethers::core::types::Address,
        pub exists: bool,
    }
    #[doc = "Container type for all return fields from the `implementation` function with signature `implementation()` and selector `[92, 96, 218, 27]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct ImplementationReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `optionsDecimals` function with signature `optionsDecimals()` and selector `[132, 147, 206, 193]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct OptionsDecimalsReturn(pub u8);
    #[doc = "Container type for all return fields from the `salt` function with signature `salt()` and selector `[191, 160, 177, 51]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct SaltReturn(pub [u8; 32]);
}
