pub use optionsfactory_mod::*;
#[allow(clippy::too_many_arguments)]
mod optionsfactory_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "OptionsFactory was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static OPTIONSFACTORY_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strikeAsset\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_oracleRegistry\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_assetsRegistry\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"contract QToken\",\"name\":\"_implementation\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CreateFail\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"qTokenAddress\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint88\",\"name\":\"expiry\",\"type\":\"uint88\",\"components\":[],\"indexed\":false},{\"internalType\":\"bool\",\"name\":\"isCall\",\"type\":\"bool\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"collateralTokenId\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"OptionCreated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"assetsRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint88\",\"name\":\"_expiryTime\",\"type\":\"uint88\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"_isCall\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_strikePrice\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"createOption\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newQToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"newCollateralTokenId\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_qTokenAsCollateral\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint88\",\"name\":\"_expiryTime\",\"type\":\"uint88\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"_isCall\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_strikePrice\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getCollateralToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint88\",\"name\":\"_expiryTime\",\"type\":\"uint88\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"_isCall\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_strikePrice\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getQToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"qToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"contract QToken\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isQToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"optionsDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"oracleRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"strikeAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static OPTIONSFACTORY_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x610160346200015a57601f6200337d38819003918201601f19168301916001600160401b038311848410176200015f5780849260c0946040528339810103126200015a578051620000ad91620000558262000175565b6020810151620000658162000175565b6040820151620000758162000175565b606083015191620000868362000175565b60a0608085015194620000998662000175565b015194620000a78662000175565b62000389565b604051612f2190816200045c82396080518181816101d10152818161031501526122ce015260a0518181816104090152818161075a015261097f015260c0518181816102f301528181610a30015261228a015260e0518181816102c901526105ff0152610100518181816102a00152818161090f01526122ac01526101205181818161037b0152818161066f01526123300152610140518181816103370152818161089f01526122f00152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116036200015a57565b156200018f57565b60405162461bcd60e51b815260206004820152602f60248201527f4f7074696f6e73466163746f72793a20696e76616c696420436f6c6c6174657260448201526e616c546f6b656e206164647265737360881b6064820152608490fd5b15620001f457565b60405162461bcd60e51b815260206004820152602a60248201527f4f7074696f6e73466163746f72793a20696e76616c696420636f6e74726f6c6c6044820152696572206164647265737360b01b6064820152608490fd5b156200025457565b60405162461bcd60e51b815260206004820152602f60248201527f4f7074696f6e73466163746f72793a20696e76616c6964206f7261636c65207260448201526e65676973747279206164647265737360881b6064820152608490fd5b15620002b957565b60405162461bcd60e51b815260206004820152602f60248201527f4f7074696f6e73466163746f72793a20696e76616c696420617373657473207260448201526e65676973747279206164647265737360881b6064820152608490fd5b156200031e57565b60405162461bcd60e51b815260206004820152603560248201527f4f7074696f6e73466163746f72793a20696e76616c69642051546f6b656e206960448201527f6d706c656d656e746174696f6e206164647265737300000000000000000000006064820152608490fd5b6012610140526001600160a01b0381811615620004015780620003b4620003eb928516151562000187565b620003c38186161515620001ec565b620003d281871615156200024c565b620003e18188161515620002b1565b8716151562000316565b60805260a05260c05260e0526101005261012052565b60405162461bcd60e51b815260206004820152602c60248201527f4f7074696f6e73466163746f72793a20696e76616c696420737472696b65206160448201526b73736574206164647265737360a01b6064820152608490fdfe60806040526004361015610013575b600080fd5b60003560e01c80630c74804e146100ef57806317d69bc8146100e65780631fa6e922146100dd5780634bb93ab1146100d45780635c60da1b146100cb5780637b0815f5146100c25780638493cec1146100b9578063911303b4146100b0578063b2016bd4146100a7578063bd128fcb1461009e5763f77c47911461009657600080fd5b61000e6109e4565b5061000e6109a3565b5061000e610933565b5061000e6108c3565b5061000e610866565b5061000e610693565b5061000e610623565b5061000e6105b3565b5061000e610288565b5061000e610185565b5061000e610116565b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5773ffffffffffffffffffffffffffffffffffffffff600435610167816100f8565b166000526000602052602060ff604060002054166040519015158152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b606435906affffffffffffffffffffff8216820361000e57565b8015150361000e57565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60a091011261000e5760043561024f816100f8565b9060243561025c816100f8565b906044356affffffffffffffffffffff8116810361000e57906064356102818161020f565b9060843590565b503461000e5761029736610219565b9092919361035b7f00000000000000000000000000000000000000000000000000000000000000006102ed84888784877f0000000000000000000000000000000000000000000000000000000000000000610d8d565b838688877f0000000000000000000000000000000000000000000000000000000000000000947f0000000000000000000000000000000000000000000000000000000000000000887f0000000000000000000000000000000000000000000000000000000000000000611204565b916103b96103a073ffffffffffffffffffffffffffffffffffffffff94857f000000000000000000000000000000000000000000000000000000000000000016612d66565b73ffffffffffffffffffffffffffffffffffffffff1690565b6040517f1c82a55900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201529690959060208860248160007f00000000000000000000000000000000000000000000000000000000000000008a165af19788156105a6575b60009861054a575b507f361c952bed9a11d1c9361d3203d84dd9b5841c6f29d9dcbbb2316f004f6366a394939261051a9289926104bf6104948b73ffffffffffffffffffffffffffffffffffffffff166000526000602052604060002090565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055565b6040805173ffffffffffffffffffffffffffffffffffffffff808d168252336020830152909a16908a01526affffffffffffffffffffff1660608901521515608088015260a087015260c086015291169290819060e0820190565b0390a26040805173ffffffffffffffffffffffffffffffffffffffff9290921682526020820192909252f35b0390f35b61051a929850926105947f361c952bed9a11d1c9361d3203d84dd9b5841c6f29d9dcbbb2316f004f6366a396959460203d811161059f575b61058c8183610aad565b810190610aee565b98925092939461043c565b503d610582565b6105ae610afd565b610434565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e5760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576004356106cf816100f8565b610709602435916106df836100f8565b6044356106eb816100f8565b6106f36101f5565b608435916107008361020f565b60a43593612280565b50604080517f6ed1ff6d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152928216602484015290917f0000000000000000000000000000000000000000000000000000000000000000831690602081604481855afa908115610859575b60009161083b575b5082805180937fd94a7e5300000000000000000000000000000000000000000000000000000000825281806107d286600483019190602083019252565b03915afa91821561082e575b6000926107fc575b5091519182529190911615156020820152604090f35b610546925061082090843d8611610827575b6108188183610aad565b81019061225b565b50916107e6565b503d61080e565b610836610afd565b6107de565b610853915060203d811161059f5761058c8183610aad565b38610795565b610861610afd565b61078d565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e5760406109c06109b736610219565b93929092612280565b73ffffffffffffffffffffffffffffffffffffffff83519216825215156020820152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810190811067ffffffffffffffff821117610aa057604052565b610aa8610a54565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610aa057604052565b9081602091031261000e575190565b506040513d6000823e3d90fd5b15610b1157565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f4f7074696f6e73466163746f72793a20676976656e206578706972792074696d60448201527f6520697320696e207468652070617374000000000000000000000000000000006064820152fd5b9081602091031261000e5751610baa8161020f565b90565b15610bb457565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f4f7074696f6e73466163746f72793a204f7261636c6520646f65736e2774207360448201527f7570706f72742074686520676976656e206f7074696f6e0000000000000000006064820152fd5b15610c3f57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f4f7074696f6e73466163746f72793a204f7261636c65206973206e6f7420616360448201527f7469766520696e20746865204f7261636c6552656769737472790000000000006064820152fd5b15610cca57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f737472696b652063616e277420626520300000000000000000000000000000006044820152fd5b15610d2f57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f756e6465726c79696e67206e6f7420696e2074686520726567697374727900006044820152fd5b94610ed0610edc95839495610ed794610eb4610ee19a610dbb426affffffffffffffffffffff871611610b0a565b604051937fe2411261000000000000000000000000000000000000000000000000000000008552610e6285610e2c8a6020998a98600485016affffffffffffffffffffff60409295949373ffffffffffffffffffffffffffffffffffffffff60608401971683521660208201520152565b0395858173ffffffffffffffffffffffffffffffffffffffff98818a87165afa908115610f3a575b600091610f1d575b50610bad565b6040519485809481937f05f29d0f0000000000000000000000000000000000000000000000000000000083526004830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0392165afa918215610f10575b600092610ee3575b5050610c38565b1515610cc3565b611077565b610d28565b565b610f029250803d10610f09575b610efa8183610aad565b810190610b95565b3880610ec9565b503d610ef0565b610f18610afd565b610ec1565b610f349150863d8811610f0957610efa8183610aad565b38610e5c565b610f42610afd565b610e54565b60405190610ee182610a84565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209267ffffffffffffffff8111610f90575b01160190565b610f98610a54565b610f8a565b918091926000905b828210610fbd575011610fb6575050565b6000910152565b91508060209183015181860152018291610fa5565b81601f8201121561000e578051610fe881610f54565b92610ff66040519485610aad565b8184526020828401011161000e57610baa9160208085019101610f9d565b91909160808184031261000e57805167ffffffffffffffff9081811161000e5784611040918401610fd2565b93602083015191821161000e57611058918301610fd2565b91604082015160ff8116810361000e57606090920151610baa8161020f565b906000906024604051809481937fbb9453a500000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff8092166004840152165afa9081156110fc575b6000916110da575090565b6110f5913d8091833e6110ed8183610aad565b810190611014565b9250505090565b611104610afd565b6110cf565b805160208092019160005b828110611122575050505090565b835185529381019392810192600101611114565b6111977fffffffffffffffffffffff00000000000000000000000000000000000000000095936111917fff0000000000000000000000000000000000000000000000000000000000000093607d9e9b979d9a959c999c611109565b90611109565b9960f81b1689527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000809881809460601b1660018c015260601b1660158a015260601b16602988015260a81b16603d860152151560f81b6048850152604984015260601b1660698201520190565b97949160008298959297946060602060405161121f81610a84565b82815201526024604051809a81937fbb9453a500000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff8092166004840152165afa96871561137f575b600097611360575b5061128a856117c8565b966112a16affffffffffffffffffffff85166124fb565b9990918a826112af8a6118c8565b90956112ba906120c6565b9290936112c6906119b1565b926112d0866123ee565b906112db948a6113a3565b6112e490611660565b9b6112ee906119b1565b916112f8906123ee565b9161130295611539565b61130b90611660565b9788611315610f47565b89815260200152604051998a9960208b01996113309a611136565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018252610baa9082610aad565b61137491973d8091833e6110ed8183610aad565b505090509538611280565b611387610afd565b611278565b9061139f60209282815194859201610f9d565b0190565b93919594929095604051968795602087017f524f4c4c4100000000000000000000000000000000000000000000000000000090527f2000000000000000000000000000000000000000000000000000000000000000908160258901528051908160268a01916020019161141592610f9d565b87019060268201528151918260278301916020019161143392610f9d565b01602781017f2d0000000000000000000000000000000000000000000000000000000000000090528151918260288301916020019161147192610f9d565b016028810161149f907f2d000000000000000000000000000000000000000000000000000000000000009052565b6029016114ab9161138c565b7f200000000000000000000000000000000000000000000000000000000000000081526001016114da9161138c565b7f200000000000000000000000000000000000000000000000000000000000000081526001016115099161138c565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352610ee19083610aad565b61160a610ee1956028600193611634969a9995976040519b8c997f524f4c4c4100000000000000000000000000000000000000000000000000000060208c015260266115b68c7f2d000000000000000000000000000000000000000000000000000000000000009687602583015260208151948593019101610f9d565b8b018460268201526115d2825180936020602785019101610f9d565b016115e7825180936020602785019101610f9d565b016115fc825180936020602785019101610f9d565b01906027820152019061138c565b7f2d000000000000000000000000000000000000000000000000000000000000008152019061138c565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101845283610aad565b906040519160a0830183811067ffffffffffffffff821117611711575b60405260048352602083019260803685378093825192607f84116116e3579083602081930160045afa156116b9576080019060f81b8151189052565b7f3a008ffa0000000000000000000000000000000000000000000000000000000060005260046000fd5b837f5307a8200000000000000000000000000000000000000000000000000000000060005260045260246000fd5b611719610a54565b61167d565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461177c570190565b61139f61171e565b80601310611793575b60130390565b61179b61171e565b61178d565b604d81116117af575b600a0a90565b6117b761171e565b6117a9565b8119811161177c570190565b6117de670de0b6b3a764000080830692046123ee565b81156118c3576000905b600a808406611804576117fe919293049261174e565b906117e8565b5061188a611848610baa9361184261183c61183761185b98846012106118b6575b611831856012036117a0565b906117bc565b6123ee565b91611784565b90611ab9565b611884604051958694602086019061138c565b7f2e00000000000000000000000000000000000000000000000000000000000000815260010190565b9061138c565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610aad565b6118be61171e565b611825565b905090565b1561193f57604051906118da82610a84565b600182527f430000000000000000000000000000000000000000000000000000000000000060208301526040519161191183610a84565b600483527f43616c6c0000000000000000000000000000000000000000000000000000000060208401529190565b6040519061194c82610a84565b600182527f500000000000000000000000000000000000000000000000000000000000000060208301526040519161198383610a84565b600383527f507574000000000000000000000000000000000000000000000000000000000060208401529190565b60638111611a21575b600a6119c5826123ee565b91106119ce5790565b610baa602160405180937f30000000000000000000000000000000000000000000000000000000000000006020830152611a118151809260208686019101610f9d565b8101036001810184520182610aad565b606490066119ba565b90611a3482610f54565b611a416040519182610aad565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0611a6f8294610f54565b0190602036910137565b908151811015611a8a570160200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b91907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600191828110611b61575b0190611af282611a2a565b916000805b828110611b075750929450505050565b808491198211611b54575b7fff00000000000000000000000000000000000000000000000000000000000000611b3f8284018a611a79565b5116831a611b4d8288611a79565b5301611af7565b611b5c61171e565b611b12565b611b6961171e565b611ae7565b60405190611b7b82610a84565b600382527f44454300000000000000000000000000000000000000000000000000000000006020830152565b60405190611bb482610a84565b600882527f446563656d6265720000000000000000000000000000000000000000000000006020830152565b60405190611bed82610a84565b600382527f4e4f5600000000000000000000000000000000000000000000000000000000006020830152565b60405190611c2682610a84565b600882527f4e6f76656d6265720000000000000000000000000000000000000000000000006020830152565b60405190611c5f82610a84565b600382527f4f435400000000000000000000000000000000000000000000000000000000006020830152565b60405190611c9882610a84565b600782527f4f63746f626572000000000000000000000000000000000000000000000000006020830152565b60405190611cd182610a84565b600382527f53455000000000000000000000000000000000000000000000000000000000006020830152565b60405190611d0a82610a84565b600982527f53657074656d62657200000000000000000000000000000000000000000000006020830152565b60405190611d4382610a84565b600382527f41554700000000000000000000000000000000000000000000000000000000006020830152565b60405190611d7c82610a84565b600682527f41756775737400000000000000000000000000000000000000000000000000006020830152565b60405190611db582610a84565b600382527f4a554c00000000000000000000000000000000000000000000000000000000006020830152565b60405190611dee82610a84565b600482527f4a756c79000000000000000000000000000000000000000000000000000000006020830152565b60405190611e2782610a84565b600382527f4a554e00000000000000000000000000000000000000000000000000000000006020830152565b60405190611e6082610a84565b600482527f4a756e65000000000000000000000000000000000000000000000000000000006020830152565b60405190611e9982610a84565b600382527f4d415900000000000000000000000000000000000000000000000000000000006020830152565b60405190611ed282610a84565b600382527f4d617900000000000000000000000000000000000000000000000000000000006020830152565b60405190611f0b82610a84565b600382527f41505200000000000000000000000000000000000000000000000000000000006020830152565b60405190611f4482610a84565b600582527f417072696c0000000000000000000000000000000000000000000000000000006020830152565b60405190611f7d82610a84565b600382527f4d415200000000000000000000000000000000000000000000000000000000006020830152565b60405190611fb682610a84565b600582527f4d617263680000000000000000000000000000000000000000000000000000006020830152565b60405190611fef82610a84565b600382527f46454200000000000000000000000000000000000000000000000000000000006020830152565b6040519061202882610a84565b600882527f46656272756172790000000000000000000000000000000000000000000000006020830152565b6040519061206182610a84565b600382527f4a414e00000000000000000000000000000000000000000000000000000000006020830152565b6040519061209a82610a84565b600782527f4a616e75617279000000000000000000000000000000000000000000000000006020830152565b600181036120e057506120d7612054565b90610baa61208d565b600281036120fa57506120f1611fe2565b90610baa61201b565b60038103612114575061210b611f70565b90610baa611fa9565b6004810361212e5750612125611efe565b90610baa611f37565b60058103612148575061213f611e8c565b90610baa611ec5565b600681036121625750612159611e1a565b90610baa611e53565b6007810361217c5750612173611da8565b90610baa611de1565b60088103612196575061218d611d36565b90610baa611d6f565b600981036121b057506121a7611cc4565b90610baa611cfd565b600a81036121ca57506121c1611c52565b90610baa611c8b565b600b81036121e457506121db611be0565b90610baa611c19565b600c036121fc576121f3611b6e565b90610baa611ba7565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f7074696f6e735574696c733a20696e76616c6964206d6f6e746800000000006044820152606490fd5b919082604091031261000e5760208251612274816100f8565b920151610baa816100f8565b92909161231494927f0000000000000000000000000000000000000000000000000000000000000000947f0000000000000000000000000000000000000000000000000000000000000000907f0000000000000000000000000000000000000000000000000000000000000000907f0000000000000000000000000000000000000000000000000000000000000000611204565b61235573ffffffffffffffffffffffffffffffffffffffff91827f000000000000000000000000000000000000000000000000000000000000000016612dde565b902060405160208101917fff0000000000000000000000000000000000000000000000000000000000000083523060601b60218301527f524f4c4c412e46494e414e43450000000000000000000000000000000000000060358301526055820152605581526080810181811067ffffffffffffffff8211176123e1575b60405251902016803b15159091565b6123e9610a54565b6123d2565b80156124c1576000818181805b6124a9575061240981611a2a565b935b6124155750505090565b8060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff921061249c575b018091600a916124867fff0000000000000000000000000000000000000000000000000000000000000084840660308119811161248f575b0160f81b16861a9187611a79565b5304908161240b565b61249761171e565b612478565b6124a461171e565b612440565b91506124b6600a9161174e565b9104808492916123fb565b506040516124ce81610a84565b600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b6201518061256c9104600081129062010bd991817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313811516612650575b817f800000000000000000000000000000000000000000000000000000000000000003831216612643575b0161265d565b6125a661258461257b836128b1565b62023ab1900590565b916125a061259961259485612934565b6126cf565b6004900590565b90612cee565b9061263d6125df6125da6125cd6125c46125bf87612730565b6129b6565b62164b09900590565b946125a061259987612a2b565b612791565b61263861260d6125f96125f184612aa0565b61098f900590565b926125a061260685612b23565b6050900590565b9461263861263361262d612624600b8705966127f2565b6125a087612b98565b96612c9e565b612c1b565b612853565b91909192565b61264b61171e565b612566565b61265861171e565b61253b565b600081129062253d8c91817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166126c2575b817f80000000000000000000000000000000000000000000000000000000000000000383121661177c570190565b6126ca61171e565b612694565b60039060008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166126c257817f80000000000000000000000000000000000000000000000000000000000000000383121661177c570190565b60019060008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166126c257817f80000000000000000000000000000000000000000000000000000000000000000383121661177c570190565b601f9060008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166126c257817f80000000000000000000000000000000000000000000000000000000000000000383121661177c570190565b60029060008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166126c257817f80000000000000000000000000000000000000000000000000000000000000000383121661177c570190565b60008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166126c257817f80000000000000000000000000000000000000000000000000000000000000000383121661177c570190565b6001817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04600411600083131616612927575b60017fe000000000000000000000000000000000000000000000000000000000000000821260008312161661291a575b60021b90565b61292261171e565b612914565b61292f61171e565b6128e4565b62023ab16001827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841316166129a9575b60017fffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce2831260008412161661299d570290565b6129a561171e565b0290565b6129b161171e565b61296a565b610fa06001827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084131616612a1e575b60017ffff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c831260008412161661299d570290565b612a2661171e565b6129eb565b6105b56001827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084131616612a93575b60017fffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa8831260008412161661299d570290565b612a9b61171e565b612a60565b6001817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04605011600083131616612b16575b60017ffe666666666666666666666666666666666666666666666666666666666666678212600083121616612b09575b60500290565b612b1161171e565b612b03565b612b1e61171e565b612ad3565b61098f6001827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084131616612b8b575b60017ffff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f3070268831260008412161661299d570290565b612b9361171e565b612b58565b6001817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04600c11600083131616612c0e575b60017ff5555555555555555555555555555555555555555555555555555555555555568212600083121616612c01575b600c0290565b612c0961171e565b612bfb565b612c1661171e565b612bcb565b6001817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04606411600083131616612c91575b60017ffeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb98212600083121616612c84575b60640290565b612c8c61171e565b612c7e565b612c9961171e565b612c4e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf907f8000000000000000000000000000000000000000000000000000000000000031811260011661177c570190565b60008212827f8000000000000000000000000000000000000000000000000000000000000000018212811516612d59575b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821316612d4d570390565b612d5561171e565b0390565b612d6161171e565b612d1f565b7f524f4c4c412e46494e414e43450000000000000000000000000000000000000091612d9191612dde565b906000f59073ffffffffffffffffffffffffffffffffffffffff821615612db457565b60046040517febfef188000000000000000000000000000000000000000000000000000000008152fd5b918151806043810193604051957f610000000000000000000000000000000000000000000000000000000000000087526039830160f01b60018801527f3d81600a3d39f33d3d3d3d363d3d37610000000000000000000000000000000060038801526002830160f01b8060138901527f60373639366100000000000000000000000000000000000000000000000000006015890152601b8801527f013d730000000000000000000000000000000000000000000000000000000000601d88015260601b60208701527f5af43d3d93803e603557fd5bf300000000000000000000000000000000000000603487015281602060418801920160045afa156116b95760418160f01b918501015256fea26469706673582212201f635bcc96122b7b07999297fc67f85f9ef652808b1bc5f15c4a1aa2e858032264736f6c634300080e0033" . parse () . expect ("invalid bytecode")
        });
    pub struct OptionsFactory<M>(ethers::contract::Contract<M>);
    impl<M> Clone for OptionsFactory<M> {
        fn clone(&self) -> Self {
            OptionsFactory(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for OptionsFactory<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for OptionsFactory<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(OptionsFactory))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> OptionsFactory<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), OPTIONSFACTORY_ABI.clone(), client)
                .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                OPTIONSFACTORY_ABI.clone(),
                OPTIONSFACTORY_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `assetsRegistry` (0x911303b4) function"]
        pub fn assets_registry(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([145, 19, 3, 180], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `collateralToken` (0xb2016bd4) function"]
        pub fn collateral_token(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([178, 1, 107, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `controller` (0xf77c4791) function"]
        pub fn controller(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([247, 124, 71, 145], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `createOption` (0x1fa6e922) function"]
        pub fn create_option(
            &self,
            underlying_asset: ethers::core::types::Address,
            oracle: ethers::core::types::Address,
            expiry_time: u128,
            is_call: bool,
            strike_price: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (ethers::core::types::Address, ethers::core::types::U256),
        > {
            self.0
                .method_hash(
                    [31, 166, 233, 34],
                    (underlying_asset, oracle, expiry_time, is_call, strike_price),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getCollateralToken` (0x7b0815f5) function"]
        pub fn get_collateral_token(
            &self,
            underlying_asset: ethers::core::types::Address,
            q_token_as_collateral: ethers::core::types::Address,
            oracle: ethers::core::types::Address,
            expiry_time: u128,
            is_call: bool,
            strike_price: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, (ethers::core::types::U256, bool)>
        {
            self.0
                .method_hash(
                    [123, 8, 21, 245],
                    (
                        underlying_asset,
                        q_token_as_collateral,
                        oracle,
                        expiry_time,
                        is_call,
                        strike_price,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getQToken` (0xbd128fcb) function"]
        pub fn get_q_token(
            &self,
            underlying_asset: ethers::core::types::Address,
            oracle: ethers::core::types::Address,
            expiry_time: u128,
            is_call: bool,
            strike_price: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, (ethers::core::types::Address, bool)>
        {
            self.0
                .method_hash(
                    [189, 18, 143, 203],
                    (underlying_asset, oracle, expiry_time, is_call, strike_price),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `implementation` (0x5c60da1b) function"]
        pub fn implementation(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([92, 96, 218, 27], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `isQToken` (0x0c74804e) function"]
        pub fn is_q_token(
            &self,
            p0: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([12, 116, 128, 78], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `optionsDecimals` (0x8493cec1) function"]
        pub fn options_decimals(&self) -> ethers::contract::builders::ContractCall<M, u8> {
            self.0
                .method_hash([132, 147, 206, 193], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `oracleRegistry` (0x4bb93ab1) function"]
        pub fn oracle_registry(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([75, 185, 58, 177], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `strikeAsset` (0x17d69bc8) function"]
        pub fn strike_asset(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([23, 214, 155, 200], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `OptionCreated` event"]
        pub fn option_created_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, OptionCreatedFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, OptionCreatedFilter> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for OptionsFactory<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "OptionCreated",
        abi = "OptionCreated(address,address,address,address,uint88,bool,uint256,uint256)"
    )]
    pub struct OptionCreatedFilter {
        pub q_token_address: ethers::core::types::Address,
        pub creator: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub underlying: ethers::core::types::Address,
        pub oracle: ethers::core::types::Address,
        pub expiry: u128,
        pub is_call: bool,
        pub strike_price: ethers::core::types::U256,
        pub collateral_token_id: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `assetsRegistry`function with signature `assetsRegistry()` and selector `[145, 19, 3, 180]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "assetsRegistry", abi = "assetsRegistry()")]
    pub struct AssetsRegistryCall;
    #[doc = "Container type for all input parameters for the `collateralToken`function with signature `collateralToken()` and selector `[178, 1, 107, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "collateralToken", abi = "collateralToken()")]
    pub struct CollateralTokenCall;
    #[doc = "Container type for all input parameters for the `controller`function with signature `controller()` and selector `[247, 124, 71, 145]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "controller", abi = "controller()")]
    pub struct ControllerCall;
    #[doc = "Container type for all input parameters for the `createOption`function with signature `createOption(address,address,uint88,bool,uint256)` and selector `[31, 166, 233, 34]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "createOption",
        abi = "createOption(address,address,uint88,bool,uint256)"
    )]
    pub struct CreateOptionCall {
        pub underlying_asset: ethers::core::types::Address,
        pub oracle: ethers::core::types::Address,
        pub expiry_time: u128,
        pub is_call: bool,
        pub strike_price: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `getCollateralToken`function with signature `getCollateralToken(address,address,address,uint88,bool,uint256)` and selector `[123, 8, 21, 245]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "getCollateralToken",
        abi = "getCollateralToken(address,address,address,uint88,bool,uint256)"
    )]
    pub struct GetCollateralTokenCall {
        pub underlying_asset: ethers::core::types::Address,
        pub q_token_as_collateral: ethers::core::types::Address,
        pub oracle: ethers::core::types::Address,
        pub expiry_time: u128,
        pub is_call: bool,
        pub strike_price: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `getQToken`function with signature `getQToken(address,address,uint88,bool,uint256)` and selector `[189, 18, 143, 203]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "getQToken",
        abi = "getQToken(address,address,uint88,bool,uint256)"
    )]
    pub struct GetQTokenCall {
        pub underlying_asset: ethers::core::types::Address,
        pub oracle: ethers::core::types::Address,
        pub expiry_time: u128,
        pub is_call: bool,
        pub strike_price: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `implementation`function with signature `implementation()` and selector `[92, 96, 218, 27]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "implementation", abi = "implementation()")]
    pub struct ImplementationCall;
    #[doc = "Container type for all input parameters for the `isQToken`function with signature `isQToken(address)` and selector `[12, 116, 128, 78]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "isQToken", abi = "isQToken(address)")]
    pub struct IsQTokenCall(pub ethers::core::types::Address);
    #[doc = "Container type for all input parameters for the `optionsDecimals`function with signature `optionsDecimals()` and selector `[132, 147, 206, 193]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "optionsDecimals", abi = "optionsDecimals()")]
    pub struct OptionsDecimalsCall;
    #[doc = "Container type for all input parameters for the `oracleRegistry`function with signature `oracleRegistry()` and selector `[75, 185, 58, 177]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "oracleRegistry", abi = "oracleRegistry()")]
    pub struct OracleRegistryCall;
    #[doc = "Container type for all input parameters for the `strikeAsset`function with signature `strikeAsset()` and selector `[23, 214, 155, 200]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "strikeAsset", abi = "strikeAsset()")]
    pub struct StrikeAssetCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum OptionsFactoryCalls {
        AssetsRegistry(AssetsRegistryCall),
        CollateralToken(CollateralTokenCall),
        Controller(ControllerCall),
        CreateOption(CreateOptionCall),
        GetCollateralToken(GetCollateralTokenCall),
        GetQToken(GetQTokenCall),
        Implementation(ImplementationCall),
        IsQToken(IsQTokenCall),
        OptionsDecimals(OptionsDecimalsCall),
        OracleRegistry(OracleRegistryCall),
        StrikeAsset(StrikeAssetCall),
    }
    impl ethers::core::abi::AbiDecode for OptionsFactoryCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <AssetsRegistryCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OptionsFactoryCalls::AssetsRegistry(decoded));
            }
            if let Ok(decoded) =
                <CollateralTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OptionsFactoryCalls::CollateralToken(decoded));
            }
            if let Ok(decoded) =
                <ControllerCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OptionsFactoryCalls::Controller(decoded));
            }
            if let Ok(decoded) =
                <CreateOptionCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OptionsFactoryCalls::CreateOption(decoded));
            }
            if let Ok(decoded) =
                <GetCollateralTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OptionsFactoryCalls::GetCollateralToken(decoded));
            }
            if let Ok(decoded) =
                <GetQTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OptionsFactoryCalls::GetQToken(decoded));
            }
            if let Ok(decoded) =
                <ImplementationCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OptionsFactoryCalls::Implementation(decoded));
            }
            if let Ok(decoded) =
                <IsQTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OptionsFactoryCalls::IsQToken(decoded));
            }
            if let Ok(decoded) =
                <OptionsDecimalsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OptionsFactoryCalls::OptionsDecimals(decoded));
            }
            if let Ok(decoded) =
                <OracleRegistryCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OptionsFactoryCalls::OracleRegistry(decoded));
            }
            if let Ok(decoded) =
                <StrikeAssetCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OptionsFactoryCalls::StrikeAsset(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for OptionsFactoryCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                OptionsFactoryCalls::AssetsRegistry(element) => element.encode(),
                OptionsFactoryCalls::CollateralToken(element) => element.encode(),
                OptionsFactoryCalls::Controller(element) => element.encode(),
                OptionsFactoryCalls::CreateOption(element) => element.encode(),
                OptionsFactoryCalls::GetCollateralToken(element) => element.encode(),
                OptionsFactoryCalls::GetQToken(element) => element.encode(),
                OptionsFactoryCalls::Implementation(element) => element.encode(),
                OptionsFactoryCalls::IsQToken(element) => element.encode(),
                OptionsFactoryCalls::OptionsDecimals(element) => element.encode(),
                OptionsFactoryCalls::OracleRegistry(element) => element.encode(),
                OptionsFactoryCalls::StrikeAsset(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for OptionsFactoryCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                OptionsFactoryCalls::AssetsRegistry(element) => element.fmt(f),
                OptionsFactoryCalls::CollateralToken(element) => element.fmt(f),
                OptionsFactoryCalls::Controller(element) => element.fmt(f),
                OptionsFactoryCalls::CreateOption(element) => element.fmt(f),
                OptionsFactoryCalls::GetCollateralToken(element) => element.fmt(f),
                OptionsFactoryCalls::GetQToken(element) => element.fmt(f),
                OptionsFactoryCalls::Implementation(element) => element.fmt(f),
                OptionsFactoryCalls::IsQToken(element) => element.fmt(f),
                OptionsFactoryCalls::OptionsDecimals(element) => element.fmt(f),
                OptionsFactoryCalls::OracleRegistry(element) => element.fmt(f),
                OptionsFactoryCalls::StrikeAsset(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<AssetsRegistryCall> for OptionsFactoryCalls {
        fn from(var: AssetsRegistryCall) -> Self {
            OptionsFactoryCalls::AssetsRegistry(var)
        }
    }
    impl ::std::convert::From<CollateralTokenCall> for OptionsFactoryCalls {
        fn from(var: CollateralTokenCall) -> Self {
            OptionsFactoryCalls::CollateralToken(var)
        }
    }
    impl ::std::convert::From<ControllerCall> for OptionsFactoryCalls {
        fn from(var: ControllerCall) -> Self {
            OptionsFactoryCalls::Controller(var)
        }
    }
    impl ::std::convert::From<CreateOptionCall> for OptionsFactoryCalls {
        fn from(var: CreateOptionCall) -> Self {
            OptionsFactoryCalls::CreateOption(var)
        }
    }
    impl ::std::convert::From<GetCollateralTokenCall> for OptionsFactoryCalls {
        fn from(var: GetCollateralTokenCall) -> Self {
            OptionsFactoryCalls::GetCollateralToken(var)
        }
    }
    impl ::std::convert::From<GetQTokenCall> for OptionsFactoryCalls {
        fn from(var: GetQTokenCall) -> Self {
            OptionsFactoryCalls::GetQToken(var)
        }
    }
    impl ::std::convert::From<ImplementationCall> for OptionsFactoryCalls {
        fn from(var: ImplementationCall) -> Self {
            OptionsFactoryCalls::Implementation(var)
        }
    }
    impl ::std::convert::From<IsQTokenCall> for OptionsFactoryCalls {
        fn from(var: IsQTokenCall) -> Self {
            OptionsFactoryCalls::IsQToken(var)
        }
    }
    impl ::std::convert::From<OptionsDecimalsCall> for OptionsFactoryCalls {
        fn from(var: OptionsDecimalsCall) -> Self {
            OptionsFactoryCalls::OptionsDecimals(var)
        }
    }
    impl ::std::convert::From<OracleRegistryCall> for OptionsFactoryCalls {
        fn from(var: OracleRegistryCall) -> Self {
            OptionsFactoryCalls::OracleRegistry(var)
        }
    }
    impl ::std::convert::From<StrikeAssetCall> for OptionsFactoryCalls {
        fn from(var: StrikeAssetCall) -> Self {
            OptionsFactoryCalls::StrikeAsset(var)
        }
    }
}
