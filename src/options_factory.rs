pub use options_factory::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod options_factory {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "OptionsFactory was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static OPTIONSFACTORY_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers :: core :: utils :: __serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strikeAsset\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_oracleRegistry\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_assetsRegistry\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"contract QToken\",\"name\":\"_implementation\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"qTokenAddress\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint88\",\"name\":\"expiry\",\"type\":\"uint88\",\"components\":[],\"indexed\":false},{\"internalType\":\"bool\",\"name\":\"isCall\",\"type\":\"bool\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"collateralTokenId\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"OptionCreated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"assetsRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint88\",\"name\":\"_expiryTime\",\"type\":\"uint88\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"_isCall\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_strikePrice\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"createOption\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newQToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"newCollateralTokenId\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_qTokenAsCollateral\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint88\",\"name\":\"_expiryTime\",\"type\":\"uint88\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"_isCall\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_strikePrice\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getCollateralToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint88\",\"name\":\"_expiryTime\",\"type\":\"uint88\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"_isCall\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_strikePrice\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getQToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"qToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"contract QToken\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isQToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"optionsDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"oracleRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"strikeAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static OPTIONSFACTORY_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x61016034620003c957601f62002fcf38819003918201601f1916830191906001600160401b03831184841017620003ce578160c09285926040958652833981010312620003c9576200005182620003e4565b9060209062000062828501620003e4565b6200006f828601620003e4565b6200007d60608701620003e4565b9160a06200008e60808901620003e4565b970151956001600160a01b0395868816808903620003c957610140976012895280841615620003705780851615620003145780861615620002bd578087161562000261578a16156200020557156200019c575060805260a05260c05260e0526101009384526101209283525191612bd59384620003fa85396080518481816101d10152818161031501526120ce015260a0518481816104090152818161075a015261097f015260c0518481816102f301528181610a30015261208a015260e0518481816102c901526105ff0152518381816102a00152818161090f01526120ac01525182818161037b0152818161066f01526121300152518181816103370152818161089f01526120f00152f35b60849086519062461bcd60e51b82526004820152603560248201527f4f7074696f6e73466163746f72793a20696e76616c69642051546f6b656e206960448201527f6d706c656d656e746174696f6e206164647265737300000000000000000000006064820152fd5b865162461bcd60e51b815260048101839052602f60248201527f4f7074696f6e73466163746f72793a20696e76616c696420617373657473207260448201526e65676973747279206164647265737360881b6064820152608490fd5b875162461bcd60e51b815260048101849052602f60248201527f4f7074696f6e73466163746f72793a20696e76616c6964206f7261636c65207260448201526e65676973747279206164647265737360881b6064820152608490fd5b875162461bcd60e51b815260048101849052602a60248201527f4f7074696f6e73466163746f72793a20696e76616c696420636f6e74726f6c6c6044820152696572206164647265737360b01b6064820152608490fd5b875162461bcd60e51b815260048101849052602f60248201527f4f7074696f6e73466163746f72793a20696e76616c696420436f6c6c6174657260448201526e616c546f6b656e206164647265737360881b6064820152608490fd5b875162461bcd60e51b815260048101849052602c60248201527f4f7074696f6e73466163746f72793a20696e76616c696420737472696b65206160448201526b73736574206164647265737360a01b6064820152608490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620003c95756fe60806040526004361015610013575b600080fd5b60003560e01c80630c74804e146100ef57806317d69bc8146100e65780631fa6e922146100dd5780634bb93ab1146100d45780635c60da1b146100cb5780637b0815f5146100c25780638493cec1146100b9578063911303b4146100b0578063b2016bd4146100a7578063bd128fcb1461009e5763f77c47911461009657600080fd5b61000e6109e4565b5061000e6109a3565b5061000e610933565b5061000e6108c3565b5061000e610866565b5061000e610693565b5061000e610623565b5061000e6105b3565b5061000e610288565b5061000e610185565b5061000e610116565b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5773ffffffffffffffffffffffffffffffffffffffff600435610167816100f8565b166000526000602052602060ff604060002054166040519015158152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b606435906affffffffffffffffffffff8216820361000e57565b8015150361000e57565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60a091011261000e5760043561024f816100f8565b9060243561025c816100f8565b906044356affffffffffffffffffffff8116810361000e57906064356102818161020f565b9060843590565b503461000e5761029736610219565b9092919361035b7f00000000000000000000000000000000000000000000000000000000000000006102ed84888784877f0000000000000000000000000000000000000000000000000000000000000000610d8d565b838688877f0000000000000000000000000000000000000000000000000000000000000000947f0000000000000000000000000000000000000000000000000000000000000000887f000000000000000000000000000000000000000000000000000000000000000061120e565b916103b96103a073ffffffffffffffffffffffffffffffffffffffff94857f000000000000000000000000000000000000000000000000000000000000000016612993565b73ffffffffffffffffffffffffffffffffffffffff1690565b6040517f1c82a55900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201529690959060208860248160007f00000000000000000000000000000000000000000000000000000000000000008a165af19788156105a6575b60009861054a575b507f361c952bed9a11d1c9361d3203d84dd9b5841c6f29d9dcbbb2316f004f6366a394939261051a9289926104bf6104948b73ffffffffffffffffffffffffffffffffffffffff166000526000602052604060002090565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055565b6040805173ffffffffffffffffffffffffffffffffffffffff808d168252336020830152909a16908a01526affffffffffffffffffffff1660608901521515608088015260a087015260c086015291169290819060e0820190565b0390a26040805173ffffffffffffffffffffffffffffffffffffffff9290921682526020820192909252f35b0390f35b61051a929850926105947f361c952bed9a11d1c9361d3203d84dd9b5841c6f29d9dcbbb2316f004f6366a396959460203d811161059f575b61058c8183610aad565b810190610aee565b98925092939461043c565b503d610582565b6105ae610afd565b610434565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e5760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576004356106cf816100f8565b610709602435916106df836100f8565b6044356106eb816100f8565b6106f36101f5565b608435916107008361020f565b60a43593612080565b50604080517f6ed1ff6d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152928216602484015290917f0000000000000000000000000000000000000000000000000000000000000000831690602081604481855afa908115610859575b60009161083b575b5082805180937fd94a7e5300000000000000000000000000000000000000000000000000000000825281806107d286600483019190602083019252565b03915afa91821561082e575b6000926107fc575b5091519182529190911615156020820152604090f35b610546925061082090843d8611610827575b6108188183610aad565b81019061205b565b50916107e6565b503d61080e565b610836610afd565b6107de565b610853915060203d811161059f5761058c8183610aad565b38610795565b610861610afd565b61078d565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e5760406109c06109b736610219565b93929092612080565b73ffffffffffffffffffffffffffffffffffffffff83519216825215156020820152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810190811067ffffffffffffffff821117610aa057604052565b610aa8610a54565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610aa057604052565b9081602091031261000e575190565b506040513d6000823e3d90fd5b15610b1157565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f4f7074696f6e73466163746f72793a20676976656e206578706972792074696d60448201527f6520697320696e207468652070617374000000000000000000000000000000006064820152fd5b9081602091031261000e5751610baa8161020f565b90565b15610bb457565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f4f7074696f6e73466163746f72793a204f7261636c6520646f65736e2774207360448201527f7570706f72742074686520676976656e206f7074696f6e0000000000000000006064820152fd5b15610c3f57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f4f7074696f6e73466163746f72793a204f7261636c65206973206e6f7420616360448201527f7469766520696e20746865204f7261636c6552656769737472790000000000006064820152fd5b15610cca57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f737472696b652063616e277420626520300000000000000000000000000000006044820152fd5b15610d2f57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f756e6465726c79696e67206e6f7420696e2074686520726567697374727900006044820152fd5b94610ed0610edc95839495610ed794610eb4610ee19a610dbb426affffffffffffffffffffff871611610b0a565b604051937fe2411261000000000000000000000000000000000000000000000000000000008552610e6285610e2c8a6020998a98600485016affffffffffffffffffffff60409295949373ffffffffffffffffffffffffffffffffffffffff60608401971683521660208201520152565b0395858173ffffffffffffffffffffffffffffffffffffffff98818a87165afa908115610f3a575b600091610f1d575b50610bad565b6040519485809481937f05f29d0f0000000000000000000000000000000000000000000000000000000083526004830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0392165afa918215610f10575b600092610ee3575b5050610c38565b1515610cc3565b61105d565b610d28565b565b610f029250803d10610f09575b610efa8183610aad565b810190610b95565b3880610ec9565b503d610ef0565b610f18610afd565b610ec1565b610f349150863d8811610f0957610efa8183610aad565b38610e5c565b610f42610afd565b610e54565b918091926000905b828210610f67575011610f60575050565b6000910152565b91508060209183015181860152018291610f4f565b81601f8201121561000e57805167ffffffffffffffff8111610fed575b60405192610fcf60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160185610aad565b8184526020828401011161000e57610baa9160208085019101610f47565b610ff5610a54565b610f99565b91909160808184031261000e57805167ffffffffffffffff9081811161000e5784611026918401610f7c565b93602083015191821161000e5761103e918301610f7c565b91604082015160ff8116810361000e57606090920151610baa8161020f565b906000906024604051809481937fbb9453a500000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff8092166004840152165afa9081156110e2575b6000916110c0575090565b6110db913d8091833e6110d38183610aad565b810190610ffa565b9250505090565b6110ea610afd565b6110b5565b9061110260209282815194859201610f47565b0190565b9561110298947fff000000000000000000000000000000000000000000000000000000000000006020607d9d9a9561117e827fffffffffffffffffffffff000000000000000000000000000000000000000000999f9c6111706111dd9d9982815194859201610f47565b019182815194859201610f47565b019b60f81b168b527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000009283809260601b1660018d015260601b1660158b015260601b16602989015260a81b16603d8701526048860190151560f81b9052565b604984015260601b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166069830152565b97949160008298959297946024604051809a81937fbb9453a500000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff8092166004840152165afa968715611431575b600097611412575b5061127f8561174d565b9661129b620151806affffffffffffffffffffff86160461221e565b6112a490612298565b886112ae826124de565b62023ab19005916112be83612561565b6112c7906122fc565b600490056112d49161291b565b6112dd8161235d565b6112e6906125e3565b62164b099005906112f682612658565b600490056113039161291b565b61130c906123be565b611315816126cd565b61098f90059061132482612750565b605090056113319161291b565b91600b8205916113409061241f565b611349836127c5565b6113529161291b565b9461135c906128cb565b61136590612848565b9061136f91612480565b9061137991612480565b906113838961183e565b92909461138f90611ec6565b93909261139b90611927565b9d6113a68f93612b2c565b80956113b2948a61143e565b9b6113bc8d6116fb565b6113c5956115d4565b976113cf896116fb565b604051998a996113e29960208c01611106565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018252610baa9082610aad565b61142691973d8091833e6110d38183610aad565b505090509538611275565b611439610afd565b61126d565b93919594929095604051968795602087017f524f4c4c4100000000000000000000000000000000000000000000000000000090527f2000000000000000000000000000000000000000000000000000000000000000908160258901528051908160268a0191602001916114b092610f47565b8701906026820152815191826027830191602001916114ce92610f47565b01602781017f2d0000000000000000000000000000000000000000000000000000000000000090528151918260288301916020019161150c92610f47565b016028810161153a907f2d000000000000000000000000000000000000000000000000000000000000009052565b602901611546916110ef565b7f20000000000000000000000000000000000000000000000000000000000000008152600101611575916110ef565b7f200000000000000000000000000000000000000000000000000000000000000081526001016115a4916110ef565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352610ee19083610aad565b6116a5610ee19560286001936116cf969a9995976040519b8c997f524f4c4c4100000000000000000000000000000000000000000000000000000060208c015260266116518c7f2d000000000000000000000000000000000000000000000000000000000000009687602583015260208151948593019101610f47565b8b0184602682015261166d825180936020602785019101610f47565b01611682825180936020602785019101610f47565b01611697825180936020602785019101610f47565b0190602782015201906110ef565b7f2d00000000000000000000000000000000000000000000000000000000000000815201906110ef565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101845283610aad565b805190607f821161171f5780608080925260a08101604052019060f81b8151189052565b507f5307a8200000000000000000000000000000000000000000000000000000000060005260045260246000fd5b611763670de0b6b3a76400008083069204612b2c565b8115611839576000905b600a8084066117845760019192930492019061176d565b5061180d610baa927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60016117c36117de9784601203600a0a01612b2c565b019160130301815261180760405195869460208601906110ef565b7f2e00000000000000000000000000000000000000000000000000000000000000815260010190565b906110ef565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610aad565b905090565b156118b5576040519061185082610a84565b600182527f430000000000000000000000000000000000000000000000000000000000000060208301526040519161188783610a84565b600483527f43616c6c0000000000000000000000000000000000000000000000000000000060208401529190565b604051906118c282610a84565b600182527f50000000000000000000000000000000000000000000000000000000000000006020830152604051916118f983610a84565b600383527f507574000000000000000000000000000000000000000000000000000000000060208401529190565b90604051916022830160405260028352600a811060001461195357603060208401536030016021830153565b80600a80809304066030016020850153066030016021830153565b6040519061197b82610a84565b600382527f44454300000000000000000000000000000000000000000000000000000000006020830152565b604051906119b482610a84565b600882527f446563656d6265720000000000000000000000000000000000000000000000006020830152565b604051906119ed82610a84565b600382527f4e4f5600000000000000000000000000000000000000000000000000000000006020830152565b60405190611a2682610a84565b600882527f4e6f76656d6265720000000000000000000000000000000000000000000000006020830152565b60405190611a5f82610a84565b600382527f4f435400000000000000000000000000000000000000000000000000000000006020830152565b60405190611a9882610a84565b600782527f4f63746f626572000000000000000000000000000000000000000000000000006020830152565b60405190611ad182610a84565b600382527f53455000000000000000000000000000000000000000000000000000000000006020830152565b60405190611b0a82610a84565b600982527f53657074656d62657200000000000000000000000000000000000000000000006020830152565b60405190611b4382610a84565b600382527f41554700000000000000000000000000000000000000000000000000000000006020830152565b60405190611b7c82610a84565b600682527f41756775737400000000000000000000000000000000000000000000000000006020830152565b60405190611bb582610a84565b600382527f4a554c00000000000000000000000000000000000000000000000000000000006020830152565b60405190611bee82610a84565b600482527f4a756c79000000000000000000000000000000000000000000000000000000006020830152565b60405190611c2782610a84565b600382527f4a554e00000000000000000000000000000000000000000000000000000000006020830152565b60405190611c6082610a84565b600482527f4a756e65000000000000000000000000000000000000000000000000000000006020830152565b60405190611c9982610a84565b600382527f4d415900000000000000000000000000000000000000000000000000000000006020830152565b60405190611cd282610a84565b600382527f4d617900000000000000000000000000000000000000000000000000000000006020830152565b60405190611d0b82610a84565b600382527f41505200000000000000000000000000000000000000000000000000000000006020830152565b60405190611d4482610a84565b600582527f417072696c0000000000000000000000000000000000000000000000000000006020830152565b60405190611d7d82610a84565b600382527f4d415200000000000000000000000000000000000000000000000000000000006020830152565b60405190611db682610a84565b600582527f4d617263680000000000000000000000000000000000000000000000000000006020830152565b60405190611def82610a84565b600382527f46454200000000000000000000000000000000000000000000000000000000006020830152565b60405190611e2882610a84565b600882527f46656272756172790000000000000000000000000000000000000000000000006020830152565b60405190611e6182610a84565b600382527f4a414e00000000000000000000000000000000000000000000000000000000006020830152565b60405190611e9a82610a84565b600782527f4a616e75617279000000000000000000000000000000000000000000000000006020830152565b60018103611ee05750611ed7611e54565b90610baa611e8d565b60028103611efa5750611ef1611de2565b90610baa611e1b565b60038103611f145750611f0b611d70565b90610baa611da9565b60048103611f2e5750611f25611cfe565b90610baa611d37565b60058103611f485750611f3f611c8c565b90610baa611cc5565b60068103611f625750611f59611c1a565b90610baa611c53565b60078103611f7c5750611f73611ba8565b90610baa611be1565b60088103611f965750611f8d611b36565b90610baa611b6f565b60098103611fb05750611fa7611ac4565b90610baa611afd565b600a8103611fca5750611fc1611a52565b90610baa611a8b565b600b8103611fe45750611fdb6119e0565b90610baa611a19565b600c03611ffc57611ff361196e565b90610baa6119a7565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f7074696f6e735574696c733a20696e76616c6964206d6f6e746800000000006044820152606490fd5b919082604091031261000e5760208251612074816100f8565b920151610baa816100f8565b92909161211494927f0000000000000000000000000000000000000000000000000000000000000000947f0000000000000000000000000000000000000000000000000000000000000000907f0000000000000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000061120e565b61215573ffffffffffffffffffffffffffffffffffffffff91827f0000000000000000000000000000000000000000000000000000000000000000166129f5565b902060405160208101917fff0000000000000000000000000000000000000000000000000000000000000083523060601b60218301527f524f4c4c412e46494e414e43450000000000000000000000000000000000000060358301526055820152605581526080810181811067ffffffffffffffff8211176121e1575b60405251902016803b15159091565b6121e9610a54565b6121d2565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600081129062010bd991817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831381151661228b575b817f800000000000000000000000000000000000000000000000000000000000000003831216612283570190565b6111026121ee565b6122936121ee565b612255565b600081129062253d8c91817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831381151661228b57817f800000000000000000000000000000000000000000000000000000000000000003831216612283570190565b60039060008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831381151661228b57817f800000000000000000000000000000000000000000000000000000000000000003831216612283570190565b60019060008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831381151661228b57817f800000000000000000000000000000000000000000000000000000000000000003831216612283570190565b601f9060008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831381151661228b57817f800000000000000000000000000000000000000000000000000000000000000003831216612283570190565b60029060008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831381151661228b57817f800000000000000000000000000000000000000000000000000000000000000003831216612283570190565b60008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831381151661228b57817f800000000000000000000000000000000000000000000000000000000000000003831216612283570190565b6001817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04600411600083131616612554575b60017fe0000000000000000000000000000000000000000000000000000000000000008212600083121616612547575b60021b90565b61254f6121ee565b612541565b61255c6121ee565b612511565b62023ab16001827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841316166125d6575b60017fffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce283126000841216166125ca570290565b6125d26121ee565b0290565b6125de6121ee565b612597565b610fa06001827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413161661264b575b60017ffff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c83126000841216166125ca570290565b6126536121ee565b612618565b6105b56001827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841316166126c0575b60017fffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa883126000841216166125ca570290565b6126c86121ee565b61268d565b6001817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04605011600083131616612743575b60017ffe666666666666666666666666666666666666666666666666666666666666678212600083121616612736575b60500290565b61273e6121ee565b612730565b61274b6121ee565b612700565b61098f6001827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841316166127b8575b60017ffff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f307026883126000841216166125ca570290565b6127c06121ee565b612785565b6001817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04600c1160008313161661283b575b60017ff555555555555555555555555555555555555555555555555555555555555556821260008312161661282e575b600c0290565b6128366121ee565b612828565b6128436121ee565b6127f8565b6001817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff046064116000831316166128be575b60017ffeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb982126000831216166128b1575b60640290565b6128b96121ee565b6128ab565b6128c66121ee565b61287b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf907f80000000000000000000000000000000000000000000000000000000000000318112600116612283570190565b60008212827f8000000000000000000000000000000000000000000000000000000000000000018212811516612986575b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182131661297a570390565b6129826121ee565b0390565b61298e6121ee565b61294c565b7f524f4c4c412e46494e414e434500000000000000000000000000000000000000916129be916129f5565b906000f59081156129cb57565b7febfef1880000000000000000000000000000000000000000000000000000000060005260046000fd5b918151806043810193604051957f610000000000000000000000000000000000000000000000000000000000000087526039830160f01b60018801527f3d81600a3d39f33d3d3d3d363d3d37610000000000000000000000000000000060038801526002830160f01b8060138901527f60373639366100000000000000000000000000000000000000000000000000006015890152601b8801527f013d730000000000000000000000000000000000000000000000000000000000601d88015260601b60208701527f5af43d3d93803e603557fd5bf300000000000000000000000000000000000000603487015281602060418801920160045afa15612b025760418160f01b9185010152565b7f3a008ffa0000000000000000000000000000000000000000000000000000000060005260046000fd5b906040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff608082019384604052935b0192600a90818106603001855304928315612b98577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90612b5c565b92506080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0920301920191825256fea164736f6c634300080f000a" . parse () . expect ("invalid bytecode")
        });
    pub struct OptionsFactory<M>(ethers::contract::Contract<M>);
    impl<M> Clone for OptionsFactory<M> {
        fn clone(&self) -> Self {
            OptionsFactory(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for OptionsFactory<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for OptionsFactory<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(OptionsFactory))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> OptionsFactory<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), OPTIONSFACTORY_ABI.clone(), client)
                .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                OPTIONSFACTORY_ABI.clone(),
                OPTIONSFACTORY_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `assetsRegistry` (0x911303b4) function"]
        pub fn assets_registry(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([145, 19, 3, 180], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `collateralToken` (0xb2016bd4) function"]
        pub fn collateral_token(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([178, 1, 107, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `controller` (0xf77c4791) function"]
        pub fn controller(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([247, 124, 71, 145], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `createOption` (0x1fa6e922) function"]
        pub fn create_option(
            &self,
            underlying_asset: ethers::core::types::Address,
            oracle: ethers::core::types::Address,
            expiry_time: u128,
            is_call: bool,
            strike_price: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (ethers::core::types::Address, ethers::core::types::U256),
        > {
            self.0
                .method_hash(
                    [31, 166, 233, 34],
                    (underlying_asset, oracle, expiry_time, is_call, strike_price),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getCollateralToken` (0x7b0815f5) function"]
        pub fn get_collateral_token(
            &self,
            underlying_asset: ethers::core::types::Address,
            q_token_as_collateral: ethers::core::types::Address,
            oracle: ethers::core::types::Address,
            expiry_time: u128,
            is_call: bool,
            strike_price: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, (ethers::core::types::U256, bool)>
        {
            self.0
                .method_hash(
                    [123, 8, 21, 245],
                    (
                        underlying_asset,
                        q_token_as_collateral,
                        oracle,
                        expiry_time,
                        is_call,
                        strike_price,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getQToken` (0xbd128fcb) function"]
        pub fn get_q_token(
            &self,
            underlying_asset: ethers::core::types::Address,
            oracle: ethers::core::types::Address,
            expiry_time: u128,
            is_call: bool,
            strike_price: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, (ethers::core::types::Address, bool)>
        {
            self.0
                .method_hash(
                    [189, 18, 143, 203],
                    (underlying_asset, oracle, expiry_time, is_call, strike_price),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `implementation` (0x5c60da1b) function"]
        pub fn implementation(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([92, 96, 218, 27], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `isQToken` (0x0c74804e) function"]
        pub fn is_q_token(
            &self,
            p0: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([12, 116, 128, 78], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `optionsDecimals` (0x8493cec1) function"]
        pub fn options_decimals(&self) -> ethers::contract::builders::ContractCall<M, u8> {
            self.0
                .method_hash([132, 147, 206, 193], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `oracleRegistry` (0x4bb93ab1) function"]
        pub fn oracle_registry(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([75, 185, 58, 177], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `strikeAsset` (0x17d69bc8) function"]
        pub fn strike_asset(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([23, 214, 155, 200], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `OptionCreated` event"]
        pub fn option_created_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, OptionCreatedFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, OptionCreatedFilter> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for OptionsFactory<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "OptionCreated",
        abi = "OptionCreated(address,address,address,address,uint88,bool,uint256,uint256)"
    )]
    pub struct OptionCreatedFilter {
        pub q_token_address: ethers::core::types::Address,
        pub creator: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub underlying: ethers::core::types::Address,
        pub oracle: ethers::core::types::Address,
        pub expiry: u128,
        pub is_call: bool,
        pub strike_price: ethers::core::types::U256,
        pub collateral_token_id: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `assetsRegistry` function with signature `assetsRegistry()` and selector `[145, 19, 3, 180]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "assetsRegistry", abi = "assetsRegistry()")]
    pub struct AssetsRegistryCall;
    #[doc = "Container type for all input parameters for the `collateralToken` function with signature `collateralToken()` and selector `[178, 1, 107, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "collateralToken", abi = "collateralToken()")]
    pub struct CollateralTokenCall;
    #[doc = "Container type for all input parameters for the `controller` function with signature `controller()` and selector `[247, 124, 71, 145]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "controller", abi = "controller()")]
    pub struct ControllerCall;
    #[doc = "Container type for all input parameters for the `createOption` function with signature `createOption(address,address,uint88,bool,uint256)` and selector `[31, 166, 233, 34]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "createOption",
        abi = "createOption(address,address,uint88,bool,uint256)"
    )]
    pub struct CreateOptionCall {
        pub underlying_asset: ethers::core::types::Address,
        pub oracle: ethers::core::types::Address,
        pub expiry_time: u128,
        pub is_call: bool,
        pub strike_price: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `getCollateralToken` function with signature `getCollateralToken(address,address,address,uint88,bool,uint256)` and selector `[123, 8, 21, 245]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "getCollateralToken",
        abi = "getCollateralToken(address,address,address,uint88,bool,uint256)"
    )]
    pub struct GetCollateralTokenCall {
        pub underlying_asset: ethers::core::types::Address,
        pub q_token_as_collateral: ethers::core::types::Address,
        pub oracle: ethers::core::types::Address,
        pub expiry_time: u128,
        pub is_call: bool,
        pub strike_price: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `getQToken` function with signature `getQToken(address,address,uint88,bool,uint256)` and selector `[189, 18, 143, 203]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "getQToken",
        abi = "getQToken(address,address,uint88,bool,uint256)"
    )]
    pub struct GetQTokenCall {
        pub underlying_asset: ethers::core::types::Address,
        pub oracle: ethers::core::types::Address,
        pub expiry_time: u128,
        pub is_call: bool,
        pub strike_price: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `implementation` function with signature `implementation()` and selector `[92, 96, 218, 27]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "implementation", abi = "implementation()")]
    pub struct ImplementationCall;
    #[doc = "Container type for all input parameters for the `isQToken` function with signature `isQToken(address)` and selector `[12, 116, 128, 78]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "isQToken", abi = "isQToken(address)")]
    pub struct IsQTokenCall(pub ethers::core::types::Address);
    #[doc = "Container type for all input parameters for the `optionsDecimals` function with signature `optionsDecimals()` and selector `[132, 147, 206, 193]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "optionsDecimals", abi = "optionsDecimals()")]
    pub struct OptionsDecimalsCall;
    #[doc = "Container type for all input parameters for the `oracleRegistry` function with signature `oracleRegistry()` and selector `[75, 185, 58, 177]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "oracleRegistry", abi = "oracleRegistry()")]
    pub struct OracleRegistryCall;
    #[doc = "Container type for all input parameters for the `strikeAsset` function with signature `strikeAsset()` and selector `[23, 214, 155, 200]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "strikeAsset", abi = "strikeAsset()")]
    pub struct StrikeAssetCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum OptionsFactoryCalls {
        AssetsRegistry(AssetsRegistryCall),
        CollateralToken(CollateralTokenCall),
        Controller(ControllerCall),
        CreateOption(CreateOptionCall),
        GetCollateralToken(GetCollateralTokenCall),
        GetQToken(GetQTokenCall),
        Implementation(ImplementationCall),
        IsQToken(IsQTokenCall),
        OptionsDecimals(OptionsDecimalsCall),
        OracleRegistry(OracleRegistryCall),
        StrikeAsset(StrikeAssetCall),
    }
    impl ethers::core::abi::AbiDecode for OptionsFactoryCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <AssetsRegistryCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OptionsFactoryCalls::AssetsRegistry(decoded));
            }
            if let Ok(decoded) =
                <CollateralTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OptionsFactoryCalls::CollateralToken(decoded));
            }
            if let Ok(decoded) =
                <ControllerCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OptionsFactoryCalls::Controller(decoded));
            }
            if let Ok(decoded) =
                <CreateOptionCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OptionsFactoryCalls::CreateOption(decoded));
            }
            if let Ok(decoded) =
                <GetCollateralTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OptionsFactoryCalls::GetCollateralToken(decoded));
            }
            if let Ok(decoded) =
                <GetQTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OptionsFactoryCalls::GetQToken(decoded));
            }
            if let Ok(decoded) =
                <ImplementationCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OptionsFactoryCalls::Implementation(decoded));
            }
            if let Ok(decoded) =
                <IsQTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OptionsFactoryCalls::IsQToken(decoded));
            }
            if let Ok(decoded) =
                <OptionsDecimalsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OptionsFactoryCalls::OptionsDecimals(decoded));
            }
            if let Ok(decoded) =
                <OracleRegistryCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OptionsFactoryCalls::OracleRegistry(decoded));
            }
            if let Ok(decoded) =
                <StrikeAssetCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OptionsFactoryCalls::StrikeAsset(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for OptionsFactoryCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                OptionsFactoryCalls::AssetsRegistry(element) => element.encode(),
                OptionsFactoryCalls::CollateralToken(element) => element.encode(),
                OptionsFactoryCalls::Controller(element) => element.encode(),
                OptionsFactoryCalls::CreateOption(element) => element.encode(),
                OptionsFactoryCalls::GetCollateralToken(element) => element.encode(),
                OptionsFactoryCalls::GetQToken(element) => element.encode(),
                OptionsFactoryCalls::Implementation(element) => element.encode(),
                OptionsFactoryCalls::IsQToken(element) => element.encode(),
                OptionsFactoryCalls::OptionsDecimals(element) => element.encode(),
                OptionsFactoryCalls::OracleRegistry(element) => element.encode(),
                OptionsFactoryCalls::StrikeAsset(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for OptionsFactoryCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                OptionsFactoryCalls::AssetsRegistry(element) => element.fmt(f),
                OptionsFactoryCalls::CollateralToken(element) => element.fmt(f),
                OptionsFactoryCalls::Controller(element) => element.fmt(f),
                OptionsFactoryCalls::CreateOption(element) => element.fmt(f),
                OptionsFactoryCalls::GetCollateralToken(element) => element.fmt(f),
                OptionsFactoryCalls::GetQToken(element) => element.fmt(f),
                OptionsFactoryCalls::Implementation(element) => element.fmt(f),
                OptionsFactoryCalls::IsQToken(element) => element.fmt(f),
                OptionsFactoryCalls::OptionsDecimals(element) => element.fmt(f),
                OptionsFactoryCalls::OracleRegistry(element) => element.fmt(f),
                OptionsFactoryCalls::StrikeAsset(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<AssetsRegistryCall> for OptionsFactoryCalls {
        fn from(var: AssetsRegistryCall) -> Self {
            OptionsFactoryCalls::AssetsRegistry(var)
        }
    }
    impl ::std::convert::From<CollateralTokenCall> for OptionsFactoryCalls {
        fn from(var: CollateralTokenCall) -> Self {
            OptionsFactoryCalls::CollateralToken(var)
        }
    }
    impl ::std::convert::From<ControllerCall> for OptionsFactoryCalls {
        fn from(var: ControllerCall) -> Self {
            OptionsFactoryCalls::Controller(var)
        }
    }
    impl ::std::convert::From<CreateOptionCall> for OptionsFactoryCalls {
        fn from(var: CreateOptionCall) -> Self {
            OptionsFactoryCalls::CreateOption(var)
        }
    }
    impl ::std::convert::From<GetCollateralTokenCall> for OptionsFactoryCalls {
        fn from(var: GetCollateralTokenCall) -> Self {
            OptionsFactoryCalls::GetCollateralToken(var)
        }
    }
    impl ::std::convert::From<GetQTokenCall> for OptionsFactoryCalls {
        fn from(var: GetQTokenCall) -> Self {
            OptionsFactoryCalls::GetQToken(var)
        }
    }
    impl ::std::convert::From<ImplementationCall> for OptionsFactoryCalls {
        fn from(var: ImplementationCall) -> Self {
            OptionsFactoryCalls::Implementation(var)
        }
    }
    impl ::std::convert::From<IsQTokenCall> for OptionsFactoryCalls {
        fn from(var: IsQTokenCall) -> Self {
            OptionsFactoryCalls::IsQToken(var)
        }
    }
    impl ::std::convert::From<OptionsDecimalsCall> for OptionsFactoryCalls {
        fn from(var: OptionsDecimalsCall) -> Self {
            OptionsFactoryCalls::OptionsDecimals(var)
        }
    }
    impl ::std::convert::From<OracleRegistryCall> for OptionsFactoryCalls {
        fn from(var: OracleRegistryCall) -> Self {
            OptionsFactoryCalls::OracleRegistry(var)
        }
    }
    impl ::std::convert::From<StrikeAssetCall> for OptionsFactoryCalls {
        fn from(var: StrikeAssetCall) -> Self {
            OptionsFactoryCalls::StrikeAsset(var)
        }
    }
    #[doc = "Container type for all return fields from the `assetsRegistry` function with signature `assetsRegistry()` and selector `[145, 19, 3, 180]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct AssetsRegistryReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `collateralToken` function with signature `collateralToken()` and selector `[178, 1, 107, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct CollateralTokenReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `controller` function with signature `controller()` and selector `[247, 124, 71, 145]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct ControllerReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `createOption` function with signature `createOption(address,address,uint88,bool,uint256)` and selector `[31, 166, 233, 34]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct CreateOptionReturn {
        pub new_q_token: ethers::core::types::Address,
        pub new_collateral_token_id: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `getCollateralToken` function with signature `getCollateralToken(address,address,address,uint88,bool,uint256)` and selector `[123, 8, 21, 245]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct GetCollateralTokenReturn {
        pub id: ethers::core::types::U256,
        pub exists: bool,
    }
    #[doc = "Container type for all return fields from the `getQToken` function with signature `getQToken(address,address,uint88,bool,uint256)` and selector `[189, 18, 143, 203]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct GetQTokenReturn {
        pub q_token: ethers::core::types::Address,
        pub exists: bool,
    }
    #[doc = "Container type for all return fields from the `implementation` function with signature `implementation()` and selector `[92, 96, 218, 27]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct ImplementationReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `isQToken` function with signature `isQToken(address)` and selector `[12, 116, 128, 78]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct IsQTokenReturn(pub bool);
    #[doc = "Container type for all return fields from the `optionsDecimals` function with signature `optionsDecimals()` and selector `[132, 147, 206, 193]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct OptionsDecimalsReturn(pub u8);
    #[doc = "Container type for all return fields from the `oracleRegistry` function with signature `oracleRegistry()` and selector `[75, 185, 58, 177]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct OracleRegistryReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `strikeAsset` function with signature `strikeAsset()` and selector `[23, 214, 155, 200]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct StrikeAssetReturn(pub ethers::core::types::Address);
}
