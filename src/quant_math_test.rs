pub use quant_math_test::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod quant_math_test {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "QuantMathTest was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static QUANTMATHTEST_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers :: core :: utils :: __serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_SCRIPT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"bound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"adjust\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"what\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deployCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"what\",\"type\":\"string\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deployCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"rewind\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"skip\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testMultiplicationOverflow\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"tip\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vm\",\"outputs\":[{\"internalType\":\"contract Vm\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static QUANTMATHTEST_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x60808060405234610027576201000162ff00ff1960005416176000556140cc908161002d8239f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c908163108554f21461282857508063233240ee146126fb578063260f7754146124d357806329a9e300146123a157806329ce9dde146121b65780632d6c17a3146121795780633a7684631461212c5780633bf82db1146120395780635a6c1eed14611e725780636bce989b146117275780636f597075146115fa57806397754ae914610d025780639a8325a014610b71578063af9bbe5f14610a69578063b9c071b4146109c7578063ba414fa614610984578063c88a5e6d146108d4578063d06d82291461076d578063d82555f1146102f8578063e9a79a7b14610198578063f8ccbf47146101555763fa7626d41461011357600080fd5b3461015257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101525760ff60209154166040519015158152f35b80fd5b503461015257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101525760ff6020915460101c166040519015158152f35b50346101525760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261015257806101d1612972565b737109709ecfa91a80626ff3989d68f67f5b1dd12d90813b156102d5576040517fc88a5e6d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024803590820152838160448183875af19081156102ed5784916102d9575b5050813b156102d55773ffffffffffffffffffffffffffffffffffffffff602484928360405195869485937fca669fa70000000000000000000000000000000000000000000000000000000085521660048401525af180156102ca576102b6575b50604051f35b6102bf906129b8565b6101525780386102b0565b6040513d84823e3d90fd5b5050fd5b6102e2906129b8565b6102d557823861024f565b6040513d86823e3d90fd5b50346101525761030736612b1f565b90916040519160408352600760408401527f5741524e494e470000000000000000000000000000000000000000000000000060608401527f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583610100602094608086820152605e60808201527f546573742074697028616464726573732c616464726573732c75696e7432353660a08201527f293a2054686520607469706020737464636865617420686173206265656e206460c08201527f6570726563617465642e2055736520606465616c6020696e73746561642e000060e0820152a161046673ffffffffffffffffffffffffffffffffffffffff94857fffffffffffffffffffffffff000000000000000000000000000000000000000094168460065416176006556104616370a082317fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000006004541617600455600190565b612e0a565b91856005840195865416926003850193845460e01b9160048701976105ba8954868060028c019b6104968d612e85565b906104a08261400b565b916040519a8b926104e6846104b98c8201978589612ed6565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0958682018152612a4f565b8b600052600181018a527fffffffff0000000000000000000000000000000000000000000000000000000060406000209216918287528a52604086206040518b810190610544816105388d8986612f16565b03888101835282612a4f565b51902087528a5260ff6040872054161561075e575b8b600052895260406000209085528852604084209161059060405191826105848a8d83019687612f16565b03908101835282612a4f565b519020835286526040822054985190885afa506105b46105ae612d4e565b91612f49565b90613f53565b6040517f667f9d7000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260248101869052737109709ecfa91a80626ff3989d68f67f5b1dd12d92919082816044818b885af192831561075357889361071b575b50500361070e575b803b1561070a576040517f70ca10bb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff939093166004840152602483019390935260448201529082908290606490829084905af180156102ca576106ec575b505090846106e69392600096541690557fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000815416905561304a565b55604051f35b6106f990949392946129b8565b61070657909185386106ab565b8580fd5b8480fd5b610716612f79565b61063a565b819850809293503d831161074c575b6107348183612a4f565b81010312610747578b9551903880610632565b600080fd5b503d61072a565b6040513d8a823e3d90fd5b61076781613107565b50610559565b50346101525760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261015257806107a6612972565b6107ae612995565b90737109709ecfa91a80626ff3989d68f67f5b1dd12d91823b156108b0576040517fc88a5e6d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201527001000000000000000000000000000000006024820152848160448183885af19081156108c95785916108b5575b5050823b156108b0576040517f45b5607800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152911660248201529082908290818381604481015b03925af180156102ca576102b65750604051f35b505050fd5b6108be906129b8565b6108b057833861083c565b6040513d87823e3d90fd5b50346101525760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610152578061090d612972565b737109709ecfa91a80626ff3989d68f67f5b1dd12d803b156102d5576040517fc88a5e6d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024803590830152829082908183816044810161089c565b503461015257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101525760ff6020915460081c166040519015158152f35b50346101525760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101525780610a0460043542612d08565b737109709ecfa91a80626ff3989d68f67f5b1dd12d90813b156102d55782916024839260405194859384927fe5d6bf0200000000000000000000000000000000000000000000000000000000845260048401525af180156102ca576102b65750604051f35b50346101525780610a7936612b1f565b9190737109709ecfa91a80626ff3989d68f67f5b1dd12d92833b1561070a576040517fc88a5e6d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024810191909152848160448183885af19081156108c9578591610b5d575b5050823b156108b0576040517f47e50cce00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201529116602482015290829082908183816044810161089c565b610b66906129b8565b6108b0578338610af9565b50346101525760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610152576004358167ffffffffffffffff821161015257610bc5610c00923690600401612b01565b604051809381927f8d1cc925000000000000000000000000000000000000000000000000000000008352602060048401526024830190612bb4565b038183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af19081156102ca579173ffffffffffffffffffffffffffffffffffffffff928192610cde575b5060208251920190f0168015610c5a57602090604051908152f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f54657374206465706c6f79436f646528737472696e67293a204465706c6f796d60448201527f656e74206661696c65642e0000000000000000000000000000000000000000006064820152fd5b610cfb9192503d8084833e610cf38183612a4f565b810190612dab565b9038610c3f565b50346101525760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261015257610d3a612972565b610d42612995565b6064351515606435036115f6576040519060208201917f70a0823100000000000000000000000000000000000000000000000000000000835260008093819273ffffffffffffffffffffffffffffffffffffffff8516602482015260248152610daa81612a17565b519082875af150610db9612d4e565b6020818051810103126115f6576020610e459101519173ffffffffffffffffffffffffffffffffffffffff85167fffffffffffffffffffffffff000000000000000000000000000000000000000060065416176006556104616370a082317fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000006004541617600455600190565b73ffffffffffffffffffffffffffffffffffffffff600582015416610e9d610faf600384015460e01b600485015490610e8060028701612e85565b90610ec9610e8d8361400b565b6040519687918460208401612ed6565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101875286612a4f565b858952600187016020527fffffffff0000000000000000000000000000000000000000000000000000000060408a20911690818a52602052604089206040516020810190610f4881610f1c888886612f16565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282612a4f565b5190208a5260205260ff60408a205416156115e7575b85895286602052604089209089526020526040882090604051610f8a81610f1c86602083019586612f16565b51902088526020528680604081205494602081519101875afa506105b46105ae612d4e565b6040517f667f9d7000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260248101839052906020826044818a737109709ecfa91a80626ff3989d68f67f5b1dd12d5af19182156115dc5787926115a4575b5003611597575b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561070a576040517f70ca10bb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92909216600483015260248201526044803590820152838160648183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af180156102ed57611580575b506005810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556003810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001690556000906004906111276002820161304a565b0155606435611137575b83604051f35b818060405160208101907f18160ddd0000000000000000000000000000000000000000000000000000000082526004815261117181612a33565b519082875af150611180612d4e565b9060208280518101031261074757602073ffffffffffffffffffffffffffffffffffffffff9201518160443510600014611565576111c46111ca9260443590612d43565b90612d43565b925b167fffffffffffffffffffffffff0000000000000000000000000000000000000000600654161760065561122c6318160ddd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000006004541617600455600190565b9173ffffffffffffffffffffffffffffffffffffffff600584015416600384015460e01b9061136c6004860154858061126760028a01612e85565b6112708161400b565b90604051976112b48961128860208201958487612ed6565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018b528a612a4f565b8760005260018c016020527fffffffff00000000000000000000000000000000000000000000000000000000604060002091169081855260205260408420604051602081019061130981610f1c8b8886612f16565b519020855260205260ff60408520541615611556575b876000528b6020526040600020908452602052604083209060405161134d81610f1c89602083019586612f16565b51902083526020526040822054965190865afa506105b46105ae612d4e565b6040517f667f9d7000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602481018490529060208260448189737109709ecfa91a80626ff3989d68f67f5b1dd12d5af191821561154b578692611517575b500361150a575b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15611506576040517f70ca10bb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91909116600482015260248101919091526044810191909152818160648183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af180156102ca576114f2575b50506005810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556003810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001690556000906004906114e86002820161304a565b0155388080611131565b6114fc82916129b8565b6101525780611480565b8380fd5b611512612f79565b6113e9565b9091506020813d602011611543575b8161153360209383612a4f565b81010312610747575190386113e2565b3d9150611526565b6040513d88823e3d90fd5b61155f8c613107565b5061131f565b61157461157a92604435612d43565b90612d08565b926111cc565b6000919361158f6004926129b8565b9391506110c0565b61159f612f79565b61102c565b9091506020813d6020116115d4575b816115c060209383612a4f565b810103126115d057519038611025565b8680fd5b3d91506115b3565b6040513d89823e3d90fd5b6115f087613107565b50610f5e565b8280fd5b50346101525760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101525780611633612972565b737109709ecfa91a80626ff3989d68f67f5b1dd12d90813b156102d55773ffffffffffffffffffffffffffffffffffffffff604051917fc88a5e6d00000000000000000000000000000000000000000000000000000000835216908160048201527001000000000000000000000000000000006024820152838160448183875af19081156102ed578491611713575b5050813b156102d55782916024839260405194859384927f06447d5600000000000000000000000000000000000000000000000000000000845260048401525af180156102ca576102b65750604051f35b61171c906129b8565b6102d55782386116c2565b50346101525761173636612b1f565b90600091828060405160208101907f70a0823100000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff861660248201526024815261179081612a17565b519082885af15061179f612d4e565b60208180518101031261150657602061182b9101519273ffffffffffffffffffffffffffffffffffffffff86167fffffffffffffffffffffffff000000000000000000000000000000000000000060065416176006556104616370a082317fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000006004541617600455600190565b61188373ffffffffffffffffffffffffffffffffffffffff600583015416611969600384015460e01b60048501549061186660028701612e85565b906118af6118738361400b565b6040519788918460208401612ed6565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101885287612a4f565b848a52600187016020527fffffffff0000000000000000000000000000000000000000000000000000000060408b20911690818b5260205260408a20604051602081019061190281610f1c888886612f16565b5190208b5260205260ff60408b20541615611e63575b848a528660205260408a20908a52602052604089209060405161194481610f1c86602083019586612f16565b51902089526020528780604081205495602081519101865afa506105b46105ae612d4e565b6040517f667f9d7000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316600482015260248101849052906020826044818b737109709ecfa91a80626ff3989d68f67f5b1dd12d5af1918215610753578892611e2b575b5003611e1e575b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610706576040517f70ca10bb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff919091166004820152602481019190915260448101839052848160648183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af180156108c957611e09575b5060006004827fffffffffffffffffffffffff00000000000000000000000000000000000000006005889501541660058201557fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000006003820154166003820155611ae76002820161304a565b0155611af4575b84604051f35b828060405160208101907f18160ddd00000000000000000000000000000000000000000000000000000000825260048152611b2e81612a33565b519082885af150611b3d612d4e565b9160208380518101031261074757602073ffffffffffffffffffffffffffffffffffffffff93015190808310600014611df657611b7d926111c491612d43565b925b167fffffffffffffffffffffffff00000000000000000000000000000000000000006006541617600655611bdf6318160ddd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000006004541617600455600190565b9173ffffffffffffffffffffffffffffffffffffffff600584015416600384015460e01b90611c1a6004860154858061126760028a01612e85565b6040517f667f9d7000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602481018490529060208260448189737109709ecfa91a80626ff3989d68f67f5b1dd12d5af191821561154b578692611dc2575b5003611db5575b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15611506576040517f70ca10bb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91909116600482015260248101919091526044810191909152818160648183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af180156102ca57611da1575b50506005810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556003810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000169055600090600490611d966002820161304a565b015538808080611aee565b611dab82916129b8565b6101525780611d2e565b611dbd612f79565b611c97565b9091506020813d602011611dee575b81611dde60209383612a4f565b8101031261074757519038611c90565b3d9150611dd1565b61157490611e0393612d43565b92611b7f565b600494611e176000926129b8565b9450611a7c565b611e26612f79565b6119e6565b9091506020813d602011611e5b575b81611e4760209383612a4f565b81010312611e57575190386119df565b8780fd5b3d9150611e3a565b611e6c87613107565b50611918565b50346101525760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101525760043560243591604435808411611fb55783611ebd91612d43565b80611f2e575050506020905b7fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8608060405160408152600c60408201527f426f756e6420526573756c74000000000000000000000000000000000000000060608201528385820152a1604051908152f35b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8103611f6057505060209150611ec9565b611f6c90929192612d7e565b918215611f88575091611f83916020930690612d08565b611ec9565b807f4e487b7100000000000000000000000000000000000000000000000000000000602492526012600452fd5b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f5465737420626f756e642875696e743235362c75696e743235362c75696e743260448201527f3536293a204d6178206973206c657373207468616e206d696e2e0000000000006064820152fd5b5034610152578061204936612b1f565b9190737109709ecfa91a80626ff3989d68f67f5b1dd12d92833b1561070a576040517fc88a5e6d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024810191909152848160448183885af19081156108c95785916108b5575050823b156108b0576040517f45b5607800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201529116602482015290829082908183816044810161089c565b503461015257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610152576020604051737109709ecfa91a80626ff3989d68f67f5b1dd12d8152f35b50346101525760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101525780610a0460043542612d43565b50346101525760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101525767ffffffffffffffff6004358181116115f657612207903690600401612b01565b906024359081116115f657366023820112156115f657612231903690602481600401359101612aca565b91604051927f8d1cc9250000000000000000000000000000000000000000000000000000000084528184806122726020968760048401526024830190612bb4565b038183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af19081156102ca5773ffffffffffffffffffffffffffffffffffffffff93948392612385575b506122ef856040518093826122cf8184019788815193849201612b7f565b82016122e382518093868085019101612b7f565b01038084520182612a4f565b5191f016801561230157604051908152f35b608482604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152603160248201527f54657374206465706c6f79436f646528737472696e672c6279746573293a204460448201527f65706c6f796d656e74206661696c65642e0000000000000000000000000000006064820152fd5b61239a9192503d8085833e610cf38183612a4f565b90386122b1565b50346101525760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261015257806123da612972565b6123e2612995565b90737109709ecfa91a80626ff3989d68f67f5b1dd12d91823b156108b0576040517fc88a5e6d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201527001000000000000000000000000000000006024820152848160448183885af19081156108c9578591610b5d575050823b156108b0576040517f47e50cce00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201529116602482015290829082908183816044810161089c565b503461015257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261015257604051817f4e487b710000000000000000000000000000000000000000000000000000000091826020820152601160248201526024815261254281612a17565b737109709ecfa91a80626ff3989d68f67f5b1dd12d803b156115f6576125a383929183926040519485809481937ff28dceb3000000000000000000000000000000000000000000000000000000008352602060048401526024830190612bb4565b03925af180156102ca576126e3575b506040516125bf816129fb565b52604051906125cd826129fb565b703ac653e386b9497f5773eac200000000008252826040516125ee816129fb565b526b033b2e3c9fd0803ce800000061264e60405161260b816129fb565b7058297dd54a15ee3f032de023000000000081528560405161262c816129fb565b5261263a8551825190612bf7565b5085156126db576001945b51905190612bf7565b0591830b90838312837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166126ce57837f8000000000000000000000000000000000000000000000000000000000000000038312166126c25750604051916126ba836129fb565b019052604051f35b83526011600452602483fd5b6024858381526011600452fd5b600094612645565b6126ec906129b8565b6126f75781386125b2565b5080fd5b50346101525760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101525780612734612972565b737109709ecfa91a80626ff3989d68f67f5b1dd12d90813b156102d55773ffffffffffffffffffffffffffffffffffffffff604051917fc88a5e6d00000000000000000000000000000000000000000000000000000000835216908160048201527001000000000000000000000000000000006024820152838160448183875af19081156102ed578491612814575b5050813b156102d55782916024839260405194859384927fca669fa700000000000000000000000000000000000000000000000000000000845260048401525af180156102ca576102b65750604051f35b61281d906129b8565b6102d55782386127c3565b82346101525760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261015257612860612972565b737109709ecfa91a80626ff3989d68f67f5b1dd12d90813b156115f6577fc88a5e6d00000000000000000000000000000000000000000000000000000000845273ffffffffffffffffffffffffffffffffffffffff811660048501526024803590850152828460448183865af1801561296757612953575b829350813b156102d55773ffffffffffffffffffffffffffffffffffffffff602484928360405195869485937f06447d560000000000000000000000000000000000000000000000000000000085521660048401525af180156102ca5761293f5750604051f35b612948906129b8565b6101525780826102b0565b91909261295f906129b8565b9082906128d8565b6040513d85823e3d90fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361074757565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361074757565b67ffffffffffffffff81116129cc57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6020810190811067ffffffffffffffff8211176129cc57604052565b6060810190811067ffffffffffffffff8211176129cc57604052565b6040810190811067ffffffffffffffff8211176129cc57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176129cc57604052565b67ffffffffffffffff81116129cc57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b929192612ad682612a90565b91612ae46040519384612a4f565b829481845281830111610747578281602093846000960137010152565b9080601f8301121561074757816020612b1c93359101612aca565b90565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60609101126107475773ffffffffffffffffffffffffffffffffffffffff90600435828116810361074757916024359081168103610747579060443590565b918091926000905b828210612b9f575011612b98575050565b6000910152565b91508060209183015181860152018291612b87565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093612bf081518092818752878088019101612b7f565b0116010190565b60008082138184137f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff828216868204861116612cae57838612917f800000000000000000000000000000000000000000000000000000000000000093838786058912911616612cdb57868587129405861290841616612cae578590058412911616612c8157500290565b807f4e487b7100000000000000000000000000000000000000000000000000000000602492526011600452fd5b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024857f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b81198111612d14570190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818110612d14570390565b3d15612d79573d90612d5f82612a90565b91612d6d6040519384612a4f565b82523d6000602084013e565b606090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114612d145760010190565b6020818303126107475780519067ffffffffffffffff8211610747570181601f82011215610747578051612dde81612a90565b92612dec6040519485612a4f565b8184526020828401011161074757612b1c9160208085019101612b7f565b9060028201805491680100000000000000008310156129cc5760018301808355831015612e565773ffffffffffffffffffffffffffffffffffffffff9160005216906020600020015590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060405191828154918282526020928383019160005283600020936000905b828210612ebc57505050612eba92500383612a4f565b565b855484526001958601958895509381019390910190612ea4565b7fffffffff0000000000000000000000000000000000000000000000000000000060049392168152612f118251809360208685019101612b7f565b010190565b9091825160208094019060005b85828210612f35575050505081520190565b835186529485019490920191600101612f23565b7f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8111600116612d145760051b90565b5060c46040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152606f60248201527f73746453746f726167652066696e642853746453746f72616765293a2050616360448201527f6b656420736c6f742e205468697320776f756c642063617573652064616e676560648201527f726f7573206f76657277726974696e6720616e642063757272656e746c79206960848201527f736e277420737570706f727465642e000000000000000000000000000000000060a4820152fd5b8054906000908181558261305d57505050565b815260208120918201915b82811061307457505050565b818155600101613068565b9080601f830112156107475781519067ffffffffffffffff82116129cc578160051b604051936020936130b485840187612a4f565b85528380860192820101928311610747578301905b8282106130d7575050505090565b815181529083019083016130c9565b805115612e565760200190565b8051821015612e565760209160051b010190565b600581015490600090600381015460e01b9060048101549161312b60028301612e85565b9173ffffffffffffffffffffffffffffffffffffffff8616855260018101602052604085207fffffffff00000000000000000000000000000000000000000000000000000000831686526020526040852060405161319181610f1c888860208401612f16565b60208151910120865260205260ff604086205416613ef057610f1c6131c86131b88561400b565b6040519283918660208401612ed6565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610706576040517f266cf109000000000000000000000000000000000000000000000000000000008152868160048183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af180156115dc57613edd575b50858082516020840173ffffffffffffffffffffffffffffffffffffffff8b165afa5061326861325f612d4e565b6105b487612f49565b90604051907f65bc948100000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff89166004830152878260248183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af1918215610753578892613e6e575b508151600181036137eb5750506132ed816130e6565b516040517f667f9d7000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a1660048201526024810191909152916020836044818b737109709ecfa91a80626ff3989d68f67f5b1dd12d5af19081156107535788916137b5575b61343d93508115613739575b0361372c575b7f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed73ffffffffffffffffffffffffffffffffffffffff8961343588610f1c6133ca8c604051928391602083019586612f16565b5190206133d6866130e6565b5190896040519586951685909493927fffffffff0000000000000000000000000000000000000000000000000000000060609373ffffffffffffffffffffffffffffffffffffffff608085019816845216602083015260408201520152565b0390a16130e6565b5173ffffffffffffffffffffffffffffffffffffffff87166000528160205260406000207fffffffff00000000000000000000000000000000000000000000000000000000841687526020526040862060405160208101906134a481610f1c8a8a86612f16565b5190208752602052604086205573ffffffffffffffffffffffffffffffffffffffff86166000526001810160205260406000207fffffffff000000000000000000000000000000000000000000000000000000008316865260205260408520604051602081019061351a81610f1c898986612f16565b51902086526020526040852060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790555b73ffffffffffffffffffffffffffffffffffffffff86166000526001810160205260406000207fffffffff00000000000000000000000000000000000000000000000000000000831686526020526040852060405160208101906135b981610f1c898986612f16565b519020865260205260ff604086205416156136a8576005810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556003810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000016905560409573ffffffffffffffffffffffffffffffffffffffff906136476002840161304a565b60006004840155166000526020527fffffffff000000000000000000000000000000000000000000000000000000008560002091168452602052610f1c61369b858520938651928391602083019586612f16565b5190208252602052205490565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f73746453746f726167652066696e642853746453746f72616765293a20536c6f60448201527f74287329206e6f7420666f756e642e00000000000000000000000000000000006064820152fd5b613734612f79565b613377565b7f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a573ffffffffffffffffffffffffffffffffffffffff8b6137ad61377c876130e6565b5160405193849316836020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0390a1613371565b90506020833d6020116137e3575b816137d060209383612a4f565b810103126107475761343d925190613365565b3d91506137c3565b600191979499989a959296935011600014613dea57885b8551811015613ddb57613875602061381a83896130f3565b516040517f667f9d7000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c16600482015260248101919091529182908d90829081906044820190565b0391737109709ecfa91a80626ff3989d68f67f5b1dd12d5af1908115613dd0578b91613d9e575b508015613d52575b8a6138af83896130f3565b51737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156126f757604051907f70ca10bb00000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff8c16600483015260248201527f13370000000000000000000000000000000000000000000000000000000000006044820152818160648183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af180156102ca57613d3a575b5080895160208b0173ffffffffffffffffffffffffffffffffffffffff8d165afa61399661398d612d4e565b6105b488612f49565b81613d10575b50613a69578a906139ad83896130f3565b5190737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156115f6576040517f70ca10bb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c16600482015260248101929092526044820152818160648183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af180156102ca57613a51575b5050613a4c90612d7e565b613802565b613a5a906129b8565b613a65578938613a41565b8980fd5b92958497507f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed73ffffffffffffffffffffffffffffffffffffffff8a613b368a613c5c979a9f9d9e99613aca610f1c91604051928391602083019586612f16565b519020613ad787876130f3565b51908b6040519586951685909493927fffffffff0000000000000000000000000000000000000000000000000000000060609373ffffffffffffffffffffffffffffffffffffffff608085019816845216602083015260408201520152565b0390a1613b4382826130f3565b5173ffffffffffffffffffffffffffffffffffffffff8b166000528560205260406000207fffffffff0000000000000000000000000000000000000000000000000000000088168b5260205260408a2088610f1c613bac8c604051928391602083019586612f16565b5190208b5260205260408a205573ffffffffffffffffffffffffffffffffffffffff8a166000526001850160205260406000207fffffffff0000000000000000000000000000000000000000000000000000000087168a52602052604089206040516020810190613c2281610f1c8d8d86612f16565b5190208a526020526040892060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790556130f3565b51737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156115d0576040517f70ca10bb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8916600482015260248101919091526044810191909152858160648183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af1801561154b57908691613cfc575b5050613550565b613d05906129b8565b61070a578438613cf5565b7f13370000000000000000000000000000000000000000000000000000000000009150143861399c565b613d43906129b8565b613d4e578a38613961565b8a80fd5b7f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a573ffffffffffffffffffffffffffffffffffffffff8a613d9661377c868c6130f3565b0390a16138a4565b90506020813d602011613dc8575b81613db960209383612a4f565b8101031261074757513861389c565b3d9150613dac565b6040513d8d823e3d90fd5b50929795969194509250613550565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604060248201527f73746453746f726167652066696e642853746453746f72616765293a204e6f2060448201527f73746f726167652075736520646574656374656420666f72207461726765742e6064820152fd5b9091503d908189823e613e818282612a4f565b6040818381010312613ed957805167ffffffffffffffff8111613a6557613ead9083830190830161307f565b9160208201519067ffffffffffffffff8211613d4e57613ed192908101910161307f565b5090386132d7565b8880fd5b613ee9909691966129b8565b9438613231565b73ffffffffffffffffffffffffffffffffffffffff6040961685526020527fffffffff0000000000000000000000000000000000000000000000000000000085852091168452602052610f1c61369b858520938651928391602083019586612f16565b906000918051602090818111600014614004575090815b84935b838510613f7c57505050505090565b9091929394613f8b8683612d08565b8451811015612e5657837fff0000000000000000000000000000000000000000000000000000000000000091860101511690867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0460081187151516612d1457613ffb918760031b1c1795612d7e565b93929190613f6d565b9190613f6a565b9081516020817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04811182151516612d1457600591821b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061408561406f83612a90565b9261407d6040519485612a4f565b808452612a90565b01368383013760005b85518110156140b857806140a56140b392886130f3565b518482871b85010152612d7e565b61408e565b509350505056fea164736f6c634300080f000a" . parse () . expect ("invalid bytecode")
        });
    pub struct QuantMathTest<M>(ethers::contract::Contract<M>);
    impl<M> Clone for QuantMathTest<M> {
        fn clone(&self) -> Self {
            QuantMathTest(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for QuantMathTest<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for QuantMathTest<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(QuantMathTest))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> QuantMathTest<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), QUANTMATHTEST_ABI.clone(), client)
                .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                QUANTMATHTEST_ABI.clone(),
                QUANTMATHTEST_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_SCRIPT` (0xf8ccbf47) function"]
        pub fn is_script(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([248, 204, 191, 71], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `bound` (0x5a6c1eed) function"]
        pub fn bound(
            &self,
            x: ethers::core::types::U256,
            min: ethers::core::types::U256,
            max: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([90, 108, 30, 237], (x, min, max))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0x6bce989b) function"]
        pub fn deal_with_token(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([107, 206, 152, 155], (token, to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0x97754ae9) function"]
        pub fn deal_with_token_and_adjust(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
            adjust: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([151, 117, 74, 233], (token, to, give, adjust))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0xc88a5e6d) function"]
        pub fn deal(
            &self,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([200, 138, 94, 109], (to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deployCode` (0x29ce9dde) function"]
        pub fn deploy_code_with_args(
            &self,
            what: String,
            args: ethers::core::types::Bytes,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([41, 206, 157, 222], (what, args))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deployCode` (0x9a8325a0) function"]
        pub fn deploy_code(
            &self,
            what: String,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([154, 131, 37, 160], what)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0x233240ee) function"]
        pub fn hoax_0(
            &self,
            who: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([35, 50, 64, 238], who)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0x29a9e300) function"]
        pub fn hoax_1(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([41, 169, 227, 0], (who, origin))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0xaf9bbe5f) function"]
        pub fn hoax_3(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([175, 155, 190, 95], (who, origin, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0xe9a79a7b) function"]
        pub fn hoax_2(
            &self,
            who: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([233, 167, 154, 123], (who, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `rewind` (0x2d6c17a3) function"]
        pub fn rewind(
            &self,
            time: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([45, 108, 23, 163], time)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `skip` (0xb9c071b4) function"]
        pub fn skip(
            &self,
            time: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([185, 192, 113, 180], time)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x108554f2) function"]
        pub fn start_hoax_1(
            &self,
            who: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([16, 133, 84, 242], (who, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x3bf82db1) function"]
        pub fn start_hoax_3(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([59, 248, 45, 177], (who, origin, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x6f597075) function"]
        pub fn start_hoax_0(
            &self,
            who: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([111, 89, 112, 117], who)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0xd06d8229) function"]
        pub fn start_hoax_2(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([208, 109, 130, 41], (who, origin))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testMultiplicationOverflow` (0x260f7754) function"]
        pub fn test_multiplication_overflow(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([38, 15, 119, 84], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `tip` (0xd82555f1) function"]
        pub fn tip(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([216, 37, 85, 241], (token, to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `vm` (0x3a768463) function"]
        pub fn vm(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([58, 118, 132, 99], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_1_filter(&self) -> ethers::contract::builders::Event<M, LogArray1Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_2_filter(&self) -> ethers::contract::builders::Event<M, LogArray2Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_1_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray1Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_2_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray2Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, QuantMathTestEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for QuantMathTest<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_array", abi = "log_array(uint256[])")]
    pub struct LogArray1Filter {
        pub val: Vec<ethers::core::types::U256>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_array", abi = "log_array(int256[])")]
    pub struct LogArray2Filter {
        pub val: Vec<I256>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,uint256[])")]
    pub struct LogNamedArray1Filter {
        pub key: String,
        pub val: Vec<ethers::core::types::U256>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,int256[])")]
    pub struct LogNamedArray2Filter {
        pub key: String,
        pub val: Vec<I256>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum QuantMathTestEvents {
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogArray1Filter(LogArray1Filter),
        LogArray2Filter(LogArray2Filter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedArray1Filter(LogNamedArray1Filter),
        LogNamedArray2Filter(LogNamedArray2Filter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for QuantMathTestEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(QuantMathTestEvents::LogFilter(decoded));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(QuantMathTestEvents::LogAddressFilter(decoded));
            }
            if let Ok(decoded) = LogArray1Filter::decode_log(log) {
                return Ok(QuantMathTestEvents::LogArray1Filter(decoded));
            }
            if let Ok(decoded) = LogArray2Filter::decode_log(log) {
                return Ok(QuantMathTestEvents::LogArray2Filter(decoded));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(QuantMathTestEvents::LogBytesFilter(decoded));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(QuantMathTestEvents::LogBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(QuantMathTestEvents::LogIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(QuantMathTestEvents::LogNamedAddressFilter(decoded));
            }
            if let Ok(decoded) = LogNamedArray1Filter::decode_log(log) {
                return Ok(QuantMathTestEvents::LogNamedArray1Filter(decoded));
            }
            if let Ok(decoded) = LogNamedArray2Filter::decode_log(log) {
                return Ok(QuantMathTestEvents::LogNamedArray2Filter(decoded));
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(QuantMathTestEvents::LogNamedBytesFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(QuantMathTestEvents::LogNamedBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(QuantMathTestEvents::LogNamedDecimalIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(QuantMathTestEvents::LogNamedDecimalUintFilter(decoded));
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(QuantMathTestEvents::LogNamedIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(QuantMathTestEvents::LogNamedStringFilter(decoded));
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(QuantMathTestEvents::LogNamedUintFilter(decoded));
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(QuantMathTestEvents::LogStringFilter(decoded));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(QuantMathTestEvents::LogUintFilter(decoded));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(QuantMathTestEvents::LogsFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for QuantMathTestEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                QuantMathTestEvents::LogFilter(element) => element.fmt(f),
                QuantMathTestEvents::LogAddressFilter(element) => element.fmt(f),
                QuantMathTestEvents::LogArray1Filter(element) => element.fmt(f),
                QuantMathTestEvents::LogArray2Filter(element) => element.fmt(f),
                QuantMathTestEvents::LogBytesFilter(element) => element.fmt(f),
                QuantMathTestEvents::LogBytes32Filter(element) => element.fmt(f),
                QuantMathTestEvents::LogIntFilter(element) => element.fmt(f),
                QuantMathTestEvents::LogNamedAddressFilter(element) => element.fmt(f),
                QuantMathTestEvents::LogNamedArray1Filter(element) => element.fmt(f),
                QuantMathTestEvents::LogNamedArray2Filter(element) => element.fmt(f),
                QuantMathTestEvents::LogNamedBytesFilter(element) => element.fmt(f),
                QuantMathTestEvents::LogNamedBytes32Filter(element) => element.fmt(f),
                QuantMathTestEvents::LogNamedDecimalIntFilter(element) => element.fmt(f),
                QuantMathTestEvents::LogNamedDecimalUintFilter(element) => element.fmt(f),
                QuantMathTestEvents::LogNamedIntFilter(element) => element.fmt(f),
                QuantMathTestEvents::LogNamedStringFilter(element) => element.fmt(f),
                QuantMathTestEvents::LogNamedUintFilter(element) => element.fmt(f),
                QuantMathTestEvents::LogStringFilter(element) => element.fmt(f),
                QuantMathTestEvents::LogUintFilter(element) => element.fmt(f),
                QuantMathTestEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `[248, 204, 191, 71]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "IS_SCRIPT", abi = "IS_SCRIPT()")]
    pub struct IsScriptCall;
    #[doc = "Container type for all input parameters for the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `bound` function with signature `bound(uint256,uint256,uint256)` and selector `[90, 108, 30, 237]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "bound", abi = "bound(uint256,uint256,uint256)")]
    pub struct BoundCall {
        pub x: ethers::core::types::U256,
        pub min: ethers::core::types::U256,
        pub max: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deal` function with signature `deal(address,address,uint256)` and selector `[107, 206, 152, 155]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,address,uint256)")]
    pub struct DealWithTokenCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deal` function with signature `deal(address,address,uint256,bool)` and selector `[151, 117, 74, 233]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,address,uint256,bool)")]
    pub struct DealWithTokenAndAdjustCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
        pub adjust: bool,
    }
    #[doc = "Container type for all input parameters for the `deal` function with signature `deal(address,uint256)` and selector `[200, 138, 94, 109]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,uint256)")]
    pub struct DealCall {
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deployCode` function with signature `deployCode(string,bytes)` and selector `[41, 206, 157, 222]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deployCode", abi = "deployCode(string,bytes)")]
    pub struct DeployCodeWithArgsCall {
        pub what: String,
        pub args: ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `deployCode` function with signature `deployCode(string)` and selector `[154, 131, 37, 160]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deployCode", abi = "deployCode(string)")]
    pub struct DeployCodeCall {
        pub what: String,
    }
    #[doc = "Container type for all input parameters for the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `hoax` function with signature `hoax(address)` and selector `[35, 50, 64, 238]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address)")]
    pub struct Hoax0Call {
        pub who: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `hoax` function with signature `hoax(address,address)` and selector `[41, 169, 227, 0]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,address)")]
    pub struct Hoax1Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `hoax` function with signature `hoax(address,address,uint256)` and selector `[175, 155, 190, 95]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,address,uint256)")]
    pub struct Hoax3Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `hoax` function with signature `hoax(address,uint256)` and selector `[233, 167, 154, 123]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,uint256)")]
    pub struct Hoax2Call {
        pub who: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `rewind` function with signature `rewind(uint256)` and selector `[45, 108, 23, 163]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "rewind", abi = "rewind(uint256)")]
    pub struct RewindCall {
        pub time: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `skip` function with signature `skip(uint256)` and selector `[185, 192, 113, 180]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "skip", abi = "skip(uint256)")]
    pub struct SkipCall {
        pub time: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax` function with signature `startHoax(address,uint256)` and selector `[16, 133, 84, 242]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,uint256)")]
    pub struct StartHoax1Call {
        pub who: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax` function with signature `startHoax(address,address,uint256)` and selector `[59, 248, 45, 177]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,address,uint256)")]
    pub struct StartHoax3Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax` function with signature `startHoax(address)` and selector `[111, 89, 112, 117]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address)")]
    pub struct StartHoax0Call {
        pub who: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `startHoax` function with signature `startHoax(address,address)` and selector `[208, 109, 130, 41]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,address)")]
    pub struct StartHoax2Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `testMultiplicationOverflow` function with signature `testMultiplicationOverflow()` and selector `[38, 15, 119, 84]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testMultiplicationOverflow",
        abi = "testMultiplicationOverflow()"
    )]
    pub struct TestMultiplicationOverflowCall;
    #[doc = "Container type for all input parameters for the `tip` function with signature `tip(address,address,uint256)` and selector `[216, 37, 85, 241]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "tip", abi = "tip(address,address,uint256)")]
    pub struct TipCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `vm` function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "vm", abi = "vm()")]
    pub struct VmCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum QuantMathTestCalls {
        IsScript(IsScriptCall),
        IsTest(IsTestCall),
        Bound(BoundCall),
        DealWithToken(DealWithTokenCall),
        DealWithTokenAndAdjust(DealWithTokenAndAdjustCall),
        Deal(DealCall),
        DeployCodeWithArgs(DeployCodeWithArgsCall),
        DeployCode(DeployCodeCall),
        Failed(FailedCall),
        Hoax0(Hoax0Call),
        Hoax1(Hoax1Call),
        Hoax3(Hoax3Call),
        Hoax2(Hoax2Call),
        Rewind(RewindCall),
        Skip(SkipCall),
        StartHoax1(StartHoax1Call),
        StartHoax3(StartHoax3Call),
        StartHoax0(StartHoax0Call),
        StartHoax2(StartHoax2Call),
        TestMultiplicationOverflow(TestMultiplicationOverflowCall),
        Tip(TipCall),
        Vm(VmCall),
    }
    impl ethers::core::abi::AbiDecode for QuantMathTestCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <IsScriptCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantMathTestCalls::IsScript(decoded));
            }
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantMathTestCalls::IsTest(decoded));
            }
            if let Ok(decoded) = <BoundCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantMathTestCalls::Bound(decoded));
            }
            if let Ok(decoded) =
                <DealWithTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantMathTestCalls::DealWithToken(decoded));
            }
            if let Ok(decoded) =
                <DealWithTokenAndAdjustCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantMathTestCalls::DealWithTokenAndAdjust(decoded));
            }
            if let Ok(decoded) = <DealCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(QuantMathTestCalls::Deal(decoded));
            }
            if let Ok(decoded) =
                <DeployCodeWithArgsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantMathTestCalls::DeployCodeWithArgs(decoded));
            }
            if let Ok(decoded) =
                <DeployCodeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantMathTestCalls::DeployCode(decoded));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantMathTestCalls::Failed(decoded));
            }
            if let Ok(decoded) = <Hoax0Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantMathTestCalls::Hoax0(decoded));
            }
            if let Ok(decoded) = <Hoax1Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantMathTestCalls::Hoax1(decoded));
            }
            if let Ok(decoded) = <Hoax3Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantMathTestCalls::Hoax3(decoded));
            }
            if let Ok(decoded) = <Hoax2Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantMathTestCalls::Hoax2(decoded));
            }
            if let Ok(decoded) = <RewindCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantMathTestCalls::Rewind(decoded));
            }
            if let Ok(decoded) = <SkipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(QuantMathTestCalls::Skip(decoded));
            }
            if let Ok(decoded) =
                <StartHoax1Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantMathTestCalls::StartHoax1(decoded));
            }
            if let Ok(decoded) =
                <StartHoax3Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantMathTestCalls::StartHoax3(decoded));
            }
            if let Ok(decoded) =
                <StartHoax0Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantMathTestCalls::StartHoax0(decoded));
            }
            if let Ok(decoded) =
                <StartHoax2Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(QuantMathTestCalls::StartHoax2(decoded));
            }
            if let Ok(decoded) =
                <TestMultiplicationOverflowCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(QuantMathTestCalls::TestMultiplicationOverflow(decoded));
            }
            if let Ok(decoded) = <TipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(QuantMathTestCalls::Tip(decoded));
            }
            if let Ok(decoded) = <VmCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(QuantMathTestCalls::Vm(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for QuantMathTestCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                QuantMathTestCalls::IsScript(element) => element.encode(),
                QuantMathTestCalls::IsTest(element) => element.encode(),
                QuantMathTestCalls::Bound(element) => element.encode(),
                QuantMathTestCalls::DealWithToken(element) => element.encode(),
                QuantMathTestCalls::DealWithTokenAndAdjust(element) => element.encode(),
                QuantMathTestCalls::Deal(element) => element.encode(),
                QuantMathTestCalls::DeployCodeWithArgs(element) => element.encode(),
                QuantMathTestCalls::DeployCode(element) => element.encode(),
                QuantMathTestCalls::Failed(element) => element.encode(),
                QuantMathTestCalls::Hoax0(element) => element.encode(),
                QuantMathTestCalls::Hoax1(element) => element.encode(),
                QuantMathTestCalls::Hoax3(element) => element.encode(),
                QuantMathTestCalls::Hoax2(element) => element.encode(),
                QuantMathTestCalls::Rewind(element) => element.encode(),
                QuantMathTestCalls::Skip(element) => element.encode(),
                QuantMathTestCalls::StartHoax1(element) => element.encode(),
                QuantMathTestCalls::StartHoax3(element) => element.encode(),
                QuantMathTestCalls::StartHoax0(element) => element.encode(),
                QuantMathTestCalls::StartHoax2(element) => element.encode(),
                QuantMathTestCalls::TestMultiplicationOverflow(element) => element.encode(),
                QuantMathTestCalls::Tip(element) => element.encode(),
                QuantMathTestCalls::Vm(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for QuantMathTestCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                QuantMathTestCalls::IsScript(element) => element.fmt(f),
                QuantMathTestCalls::IsTest(element) => element.fmt(f),
                QuantMathTestCalls::Bound(element) => element.fmt(f),
                QuantMathTestCalls::DealWithToken(element) => element.fmt(f),
                QuantMathTestCalls::DealWithTokenAndAdjust(element) => element.fmt(f),
                QuantMathTestCalls::Deal(element) => element.fmt(f),
                QuantMathTestCalls::DeployCodeWithArgs(element) => element.fmt(f),
                QuantMathTestCalls::DeployCode(element) => element.fmt(f),
                QuantMathTestCalls::Failed(element) => element.fmt(f),
                QuantMathTestCalls::Hoax0(element) => element.fmt(f),
                QuantMathTestCalls::Hoax1(element) => element.fmt(f),
                QuantMathTestCalls::Hoax3(element) => element.fmt(f),
                QuantMathTestCalls::Hoax2(element) => element.fmt(f),
                QuantMathTestCalls::Rewind(element) => element.fmt(f),
                QuantMathTestCalls::Skip(element) => element.fmt(f),
                QuantMathTestCalls::StartHoax1(element) => element.fmt(f),
                QuantMathTestCalls::StartHoax3(element) => element.fmt(f),
                QuantMathTestCalls::StartHoax0(element) => element.fmt(f),
                QuantMathTestCalls::StartHoax2(element) => element.fmt(f),
                QuantMathTestCalls::TestMultiplicationOverflow(element) => element.fmt(f),
                QuantMathTestCalls::Tip(element) => element.fmt(f),
                QuantMathTestCalls::Vm(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<IsScriptCall> for QuantMathTestCalls {
        fn from(var: IsScriptCall) -> Self {
            QuantMathTestCalls::IsScript(var)
        }
    }
    impl ::std::convert::From<IsTestCall> for QuantMathTestCalls {
        fn from(var: IsTestCall) -> Self {
            QuantMathTestCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<BoundCall> for QuantMathTestCalls {
        fn from(var: BoundCall) -> Self {
            QuantMathTestCalls::Bound(var)
        }
    }
    impl ::std::convert::From<DealWithTokenCall> for QuantMathTestCalls {
        fn from(var: DealWithTokenCall) -> Self {
            QuantMathTestCalls::DealWithToken(var)
        }
    }
    impl ::std::convert::From<DealWithTokenAndAdjustCall> for QuantMathTestCalls {
        fn from(var: DealWithTokenAndAdjustCall) -> Self {
            QuantMathTestCalls::DealWithTokenAndAdjust(var)
        }
    }
    impl ::std::convert::From<DealCall> for QuantMathTestCalls {
        fn from(var: DealCall) -> Self {
            QuantMathTestCalls::Deal(var)
        }
    }
    impl ::std::convert::From<DeployCodeWithArgsCall> for QuantMathTestCalls {
        fn from(var: DeployCodeWithArgsCall) -> Self {
            QuantMathTestCalls::DeployCodeWithArgs(var)
        }
    }
    impl ::std::convert::From<DeployCodeCall> for QuantMathTestCalls {
        fn from(var: DeployCodeCall) -> Self {
            QuantMathTestCalls::DeployCode(var)
        }
    }
    impl ::std::convert::From<FailedCall> for QuantMathTestCalls {
        fn from(var: FailedCall) -> Self {
            QuantMathTestCalls::Failed(var)
        }
    }
    impl ::std::convert::From<Hoax0Call> for QuantMathTestCalls {
        fn from(var: Hoax0Call) -> Self {
            QuantMathTestCalls::Hoax0(var)
        }
    }
    impl ::std::convert::From<Hoax1Call> for QuantMathTestCalls {
        fn from(var: Hoax1Call) -> Self {
            QuantMathTestCalls::Hoax1(var)
        }
    }
    impl ::std::convert::From<Hoax3Call> for QuantMathTestCalls {
        fn from(var: Hoax3Call) -> Self {
            QuantMathTestCalls::Hoax3(var)
        }
    }
    impl ::std::convert::From<Hoax2Call> for QuantMathTestCalls {
        fn from(var: Hoax2Call) -> Self {
            QuantMathTestCalls::Hoax2(var)
        }
    }
    impl ::std::convert::From<RewindCall> for QuantMathTestCalls {
        fn from(var: RewindCall) -> Self {
            QuantMathTestCalls::Rewind(var)
        }
    }
    impl ::std::convert::From<SkipCall> for QuantMathTestCalls {
        fn from(var: SkipCall) -> Self {
            QuantMathTestCalls::Skip(var)
        }
    }
    impl ::std::convert::From<StartHoax1Call> for QuantMathTestCalls {
        fn from(var: StartHoax1Call) -> Self {
            QuantMathTestCalls::StartHoax1(var)
        }
    }
    impl ::std::convert::From<StartHoax3Call> for QuantMathTestCalls {
        fn from(var: StartHoax3Call) -> Self {
            QuantMathTestCalls::StartHoax3(var)
        }
    }
    impl ::std::convert::From<StartHoax0Call> for QuantMathTestCalls {
        fn from(var: StartHoax0Call) -> Self {
            QuantMathTestCalls::StartHoax0(var)
        }
    }
    impl ::std::convert::From<StartHoax2Call> for QuantMathTestCalls {
        fn from(var: StartHoax2Call) -> Self {
            QuantMathTestCalls::StartHoax2(var)
        }
    }
    impl ::std::convert::From<TestMultiplicationOverflowCall> for QuantMathTestCalls {
        fn from(var: TestMultiplicationOverflowCall) -> Self {
            QuantMathTestCalls::TestMultiplicationOverflow(var)
        }
    }
    impl ::std::convert::From<TipCall> for QuantMathTestCalls {
        fn from(var: TipCall) -> Self {
            QuantMathTestCalls::Tip(var)
        }
    }
    impl ::std::convert::From<VmCall> for QuantMathTestCalls {
        fn from(var: VmCall) -> Self {
            QuantMathTestCalls::Vm(var)
        }
    }
    #[doc = "Container type for all return fields from the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `[248, 204, 191, 71]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct IsScriptReturn(pub bool);
    #[doc = "Container type for all return fields from the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct IsTestReturn(pub bool);
    #[doc = "Container type for all return fields from the `bound` function with signature `bound(uint256,uint256,uint256)` and selector `[90, 108, 30, 237]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct BoundReturn {
        pub result: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `deployCode` function with signature `deployCode(string,bytes)` and selector `[41, 206, 157, 222]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct DeployCodeWithArgsReturn {
        pub addr: ethers::core::types::Address,
    }
    #[doc = "Container type for all return fields from the `deployCode` function with signature `deployCode(string)` and selector `[154, 131, 37, 160]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct DeployCodeReturn {
        pub addr: ethers::core::types::Address,
    }
    #[doc = "Container type for all return fields from the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct FailedReturn(pub bool);
    #[doc = "Container type for all return fields from the `vm` function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct VmReturn(pub ethers::core::types::Address);
}
